# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from recruitR.api_client import ApiClient


class TransferApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tfs_transfers(self, **kwargs):  # noqa: E501
        """Retrieves information on transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfs_transfers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_key: The Key of the sport to lookup
        :param int year: The year associated with the season
        :param TransferListTypes list_type: The type of list we are wanting to retrieve
        :param int position_group_key: The position group to filter by
        :param int position_key: The position to filter by
        :param TransferEligibility eligibility: The eligibility to filter by
        :param int institution_key: The institution to filter by
        :param str status: The status to filter by
        :param int page_size: The number of elements in the page to retrieve
        :param int page: The page to retrieve
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tfs_transfers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tfs_transfers_with_http_info(**kwargs)  # noqa: E501
            return data

    def tfs_transfers_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves information on transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tfs_transfers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sport_key: The Key of the sport to lookup
        :param int year: The year associated with the season
        :param TransferListTypes list_type: The type of list we are wanting to retrieve
        :param int position_group_key: The position group to filter by
        :param int position_key: The position to filter by
        :param TransferEligibility eligibility: The eligibility to filter by
        :param int institution_key: The institution to filter by
        :param str status: The status to filter by
        :param int page_size: The number of elements in the page to retrieve
        :param int page: The page to retrieve
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sport_key', 'year', 'list_type', 'position_group_key', 'position_key', 'eligibility', 'institution_key', 'status', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tfs_transfers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sport_key' in params:
            query_params.append(('sportKey', params['sport_key']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'list_type' in params:
            query_params.append(('listType', params['list_type']))  # noqa: E501
        if 'position_group_key' in params:
            query_params.append(('positionGroupKey', params['position_group_key']))  # noqa: E501
        if 'position_key' in params:
            query_params.append(('positionKey', params['position_key']))  # noqa: E501
        if 'eligibility' in params:
            query_params.append(('eligibility', params['eligibility']))  # noqa: E501
        if 'institution_key' in params:
            query_params.append(('institutionKey', params['institution_key']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/rdb/v1/transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'user_subscription_key': 'int',
        'special_field': 'str',
        'user_subscription': 'UserSubscription'
    }

    attribute_map = {
        'key': 'key',
        'user_subscription_key': 'userSubscriptionKey',
        'special_field': 'specialField',
        'user_subscription': 'userSubscription'
    }

    def __init__(self, key=None, user_subscription_key=None, special_field=None, user_subscription=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._user_subscription_key = None
        self._special_field = None
        self._user_subscription = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if user_subscription_key is not None:
            self.user_subscription_key = user_subscription_key
        if special_field is not None:
            self.special_field = special_field
        if user_subscription is not None:
            self.user_subscription = user_subscription

    @property
    def key(self):
        """Gets the key of this Account.  # noqa: E501


        :return: The key of this Account.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Account.


        :param key: The key of this Account.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def user_subscription_key(self):
        """Gets the user_subscription_key of this Account.  # noqa: E501


        :return: The user_subscription_key of this Account.  # noqa: E501
        :rtype: int
        """
        return self._user_subscription_key

    @user_subscription_key.setter
    def user_subscription_key(self, user_subscription_key):
        """Sets the user_subscription_key of this Account.


        :param user_subscription_key: The user_subscription_key of this Account.  # noqa: E501
        :type: int
        """

        self._user_subscription_key = user_subscription_key

    @property
    def special_field(self):
        """Gets the special_field of this Account.  # noqa: E501


        :return: The special_field of this Account.  # noqa: E501
        :rtype: str
        """
        return self._special_field

    @special_field.setter
    def special_field(self, special_field):
        """Sets the special_field of this Account.


        :param special_field: The special_field of this Account.  # noqa: E501
        :type: str
        """

        self._special_field = special_field

    @property
    def user_subscription(self):
        """Gets the user_subscription of this Account.  # noqa: E501


        :return: The user_subscription of this Account.  # noqa: E501
        :rtype: UserSubscription
        """
        return self._user_subscription

    @user_subscription.setter
    def user_subscription(self, user_subscription):
        """Sets the user_subscription of this Account.


        :param user_subscription: The user_subscription of this Account.  # noqa: E501
        :type: UserSubscription
        """

        self._user_subscription = user_subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

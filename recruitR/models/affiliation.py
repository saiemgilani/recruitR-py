# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Affiliation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'url': 'str',
        'asset_key': 'int',
        'client_id': 'str',
        'users': 'list[User]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'url': 'url',
        'asset_key': 'assetKey',
        'client_id': 'clientId',
        'users': 'users'
    }

    def __init__(self, key=None, name=None, url=None, asset_key=None, client_id=None, users=None):  # noqa: E501
        """Affiliation - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._url = None
        self._asset_key = None
        self._client_id = None
        self._users = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        self.url = url
        if asset_key is not None:
            self.asset_key = asset_key
        if client_id is not None:
            self.client_id = client_id
        if users is not None:
            self.users = users

    @property
    def key(self):
        """Gets the key of this Affiliation.  # noqa: E501


        :return: The key of this Affiliation.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Affiliation.


        :param key: The key of this Affiliation.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Affiliation.  # noqa: E501


        :return: The name of this Affiliation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Affiliation.


        :param name: The name of this Affiliation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Affiliation.  # noqa: E501


        :return: The url of this Affiliation.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Affiliation.


        :param url: The url of this Affiliation.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def asset_key(self):
        """Gets the asset_key of this Affiliation.  # noqa: E501


        :return: The asset_key of this Affiliation.  # noqa: E501
        :rtype: int
        """
        return self._asset_key

    @asset_key.setter
    def asset_key(self, asset_key):
        """Sets the asset_key of this Affiliation.


        :param asset_key: The asset_key of this Affiliation.  # noqa: E501
        :type: int
        """

        self._asset_key = asset_key

    @property
    def client_id(self):
        """Gets the client_id of this Affiliation.  # noqa: E501


        :return: The client_id of this Affiliation.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Affiliation.


        :param client_id: The client_id of this Affiliation.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def users(self):
        """Gets the users of this Affiliation.  # noqa: E501


        :return: The users of this Affiliation.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Affiliation.


        :param users: The users of this Affiliation.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Affiliation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Affiliation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Asset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'user_key': 'int',
        '_date': 'datetime',
        'height': 'int',
        'width': 'int',
        'duration': 'int',
        'file_system': 'str',
        '_class': 'AssetClass',
        'original_filename': 'str',
        'file_type': 'str',
        'source_key': 'int',
        'path': 'str',
        'name': 'str',
        'text': 'str',
        'thumbnail': 'str',
        'coaches': 'list[Coach]',
        'coach_assets': 'list[CoachAsset]',
        'event_assets': 'list[EventAsset]',
        'institution_assets': 'list[InstitutionAsset]',
        'player_assets': 'list[PlayerAsset]',
        'stat_game_assets': 'list[StatGameAsset]',
        'post_assets': 'list[PostAsset]',
        'source_path': 'str',
        'asset_tag_links': 'list[IAssetTagLink]',
        'tags': 'list[ITaggable]'
    }

    attribute_map = {
        'key': 'key',
        'user_key': 'userKey',
        '_date': 'date',
        'height': 'height',
        'width': 'width',
        'duration': 'duration',
        'file_system': 'fileSystem',
        '_class': 'class',
        'original_filename': 'originalFilename',
        'file_type': 'fileType',
        'source_key': 'sourceKey',
        'path': 'path',
        'name': 'name',
        'text': 'text',
        'thumbnail': 'thumbnail',
        'coaches': 'coaches',
        'coach_assets': 'coachAssets',
        'event_assets': 'eventAssets',
        'institution_assets': 'institutionAssets',
        'player_assets': 'playerAssets',
        'stat_game_assets': 'statGameAssets',
        'post_assets': 'postAssets',
        'source_path': 'sourcePath',
        'asset_tag_links': 'assetTagLinks',
        'tags': 'tags'
    }

    def __init__(self, key=None, user_key=None, _date=None, height=None, width=None, duration=None, file_system=None, _class=None, original_filename=None, file_type=None, source_key=None, path=None, name=None, text=None, thumbnail=None, coaches=None, coach_assets=None, event_assets=None, institution_assets=None, player_assets=None, stat_game_assets=None, post_assets=None, source_path=None, asset_tag_links=None, tags=None):  # noqa: E501
        """Asset - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._user_key = None
        self.__date = None
        self._height = None
        self._width = None
        self._duration = None
        self._file_system = None
        self.__class = None
        self._original_filename = None
        self._file_type = None
        self._source_key = None
        self._path = None
        self._name = None
        self._text = None
        self._thumbnail = None
        self._coaches = None
        self._coach_assets = None
        self._event_assets = None
        self._institution_assets = None
        self._player_assets = None
        self._stat_game_assets = None
        self._post_assets = None
        self._source_path = None
        self._asset_tag_links = None
        self._tags = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if user_key is not None:
            self.user_key = user_key
        if _date is not None:
            self._date = _date
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if duration is not None:
            self.duration = duration
        if file_system is not None:
            self.file_system = file_system
        if _class is not None:
            self._class = _class
        if original_filename is not None:
            self.original_filename = original_filename
        if file_type is not None:
            self.file_type = file_type
        if source_key is not None:
            self.source_key = source_key
        if path is not None:
            self.path = path
        if name is not None:
            self.name = name
        if text is not None:
            self.text = text
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if coaches is not None:
            self.coaches = coaches
        if coach_assets is not None:
            self.coach_assets = coach_assets
        if event_assets is not None:
            self.event_assets = event_assets
        if institution_assets is not None:
            self.institution_assets = institution_assets
        if player_assets is not None:
            self.player_assets = player_assets
        if stat_game_assets is not None:
            self.stat_game_assets = stat_game_assets
        if post_assets is not None:
            self.post_assets = post_assets
        if source_path is not None:
            self.source_path = source_path
        if asset_tag_links is not None:
            self.asset_tag_links = asset_tag_links
        if tags is not None:
            self.tags = tags

    @property
    def key(self):
        """Gets the key of this Asset.  # noqa: E501


        :return: The key of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Asset.


        :param key: The key of this Asset.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def user_key(self):
        """Gets the user_key of this Asset.  # noqa: E501


        :return: The user_key of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Asset.


        :param user_key: The user_key of this Asset.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def _date(self):
        """Gets the _date of this Asset.  # noqa: E501


        :return: The _date of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Asset.


        :param _date: The _date of this Asset.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def height(self):
        """Gets the height of this Asset.  # noqa: E501


        :return: The height of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Asset.


        :param height: The height of this Asset.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this Asset.  # noqa: E501


        :return: The width of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Asset.


        :param width: The width of this Asset.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def duration(self):
        """Gets the duration of this Asset.  # noqa: E501


        :return: The duration of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Asset.


        :param duration: The duration of this Asset.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def file_system(self):
        """Gets the file_system of this Asset.  # noqa: E501


        :return: The file_system of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """Sets the file_system of this Asset.


        :param file_system: The file_system of this Asset.  # noqa: E501
        :type: str
        """

        self._file_system = file_system

    @property
    def _class(self):
        """Gets the _class of this Asset.  # noqa: E501


        :return: The _class of this Asset.  # noqa: E501
        :rtype: AssetClass
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Asset.


        :param _class: The _class of this Asset.  # noqa: E501
        :type: AssetClass
        """

        self.__class = _class

    @property
    def original_filename(self):
        """Gets the original_filename of this Asset.  # noqa: E501


        :return: The original_filename of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this Asset.


        :param original_filename: The original_filename of this Asset.  # noqa: E501
        :type: str
        """

        self._original_filename = original_filename

    @property
    def file_type(self):
        """Gets the file_type of this Asset.  # noqa: E501


        :return: The file_type of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Asset.


        :param file_type: The file_type of this Asset.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def source_key(self):
        """Gets the source_key of this Asset.  # noqa: E501


        :return: The source_key of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._source_key

    @source_key.setter
    def source_key(self, source_key):
        """Sets the source_key of this Asset.


        :param source_key: The source_key of this Asset.  # noqa: E501
        :type: int
        """

        self._source_key = source_key

    @property
    def path(self):
        """Gets the path of this Asset.  # noqa: E501


        :return: The path of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Asset.


        :param path: The path of this Asset.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def name(self):
        """Gets the name of this Asset.  # noqa: E501


        :return: The name of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.


        :param name: The name of this Asset.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def text(self):
        """Gets the text of this Asset.  # noqa: E501


        :return: The text of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Asset.


        :param text: The text of this Asset.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Asset.  # noqa: E501


        :return: The thumbnail of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Asset.


        :param thumbnail: The thumbnail of this Asset.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def coaches(self):
        """Gets the coaches of this Asset.  # noqa: E501


        :return: The coaches of this Asset.  # noqa: E501
        :rtype: list[Coach]
        """
        return self._coaches

    @coaches.setter
    def coaches(self, coaches):
        """Sets the coaches of this Asset.


        :param coaches: The coaches of this Asset.  # noqa: E501
        :type: list[Coach]
        """

        self._coaches = coaches

    @property
    def coach_assets(self):
        """Gets the coach_assets of this Asset.  # noqa: E501


        :return: The coach_assets of this Asset.  # noqa: E501
        :rtype: list[CoachAsset]
        """
        return self._coach_assets

    @coach_assets.setter
    def coach_assets(self, coach_assets):
        """Sets the coach_assets of this Asset.


        :param coach_assets: The coach_assets of this Asset.  # noqa: E501
        :type: list[CoachAsset]
        """

        self._coach_assets = coach_assets

    @property
    def event_assets(self):
        """Gets the event_assets of this Asset.  # noqa: E501


        :return: The event_assets of this Asset.  # noqa: E501
        :rtype: list[EventAsset]
        """
        return self._event_assets

    @event_assets.setter
    def event_assets(self, event_assets):
        """Sets the event_assets of this Asset.


        :param event_assets: The event_assets of this Asset.  # noqa: E501
        :type: list[EventAsset]
        """

        self._event_assets = event_assets

    @property
    def institution_assets(self):
        """Gets the institution_assets of this Asset.  # noqa: E501


        :return: The institution_assets of this Asset.  # noqa: E501
        :rtype: list[InstitutionAsset]
        """
        return self._institution_assets

    @institution_assets.setter
    def institution_assets(self, institution_assets):
        """Sets the institution_assets of this Asset.


        :param institution_assets: The institution_assets of this Asset.  # noqa: E501
        :type: list[InstitutionAsset]
        """

        self._institution_assets = institution_assets

    @property
    def player_assets(self):
        """Gets the player_assets of this Asset.  # noqa: E501


        :return: The player_assets of this Asset.  # noqa: E501
        :rtype: list[PlayerAsset]
        """
        return self._player_assets

    @player_assets.setter
    def player_assets(self, player_assets):
        """Sets the player_assets of this Asset.


        :param player_assets: The player_assets of this Asset.  # noqa: E501
        :type: list[PlayerAsset]
        """

        self._player_assets = player_assets

    @property
    def stat_game_assets(self):
        """Gets the stat_game_assets of this Asset.  # noqa: E501


        :return: The stat_game_assets of this Asset.  # noqa: E501
        :rtype: list[StatGameAsset]
        """
        return self._stat_game_assets

    @stat_game_assets.setter
    def stat_game_assets(self, stat_game_assets):
        """Sets the stat_game_assets of this Asset.


        :param stat_game_assets: The stat_game_assets of this Asset.  # noqa: E501
        :type: list[StatGameAsset]
        """

        self._stat_game_assets = stat_game_assets

    @property
    def post_assets(self):
        """Gets the post_assets of this Asset.  # noqa: E501


        :return: The post_assets of this Asset.  # noqa: E501
        :rtype: list[PostAsset]
        """
        return self._post_assets

    @post_assets.setter
    def post_assets(self, post_assets):
        """Sets the post_assets of this Asset.


        :param post_assets: The post_assets of this Asset.  # noqa: E501
        :type: list[PostAsset]
        """

        self._post_assets = post_assets

    @property
    def source_path(self):
        """Gets the source_path of this Asset.  # noqa: E501


        :return: The source_path of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this Asset.


        :param source_path: The source_path of this Asset.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def asset_tag_links(self):
        """Gets the asset_tag_links of this Asset.  # noqa: E501


        :return: The asset_tag_links of this Asset.  # noqa: E501
        :rtype: list[IAssetTagLink]
        """
        return self._asset_tag_links

    @asset_tag_links.setter
    def asset_tag_links(self, asset_tag_links):
        """Sets the asset_tag_links of this Asset.


        :param asset_tag_links: The asset_tag_links of this Asset.  # noqa: E501
        :type: list[IAssetTagLink]
        """

        self._asset_tag_links = asset_tag_links

    @property
    def tags(self):
        """Gets the tags of this Asset.  # noqa: E501


        :return: The tags of this Asset.  # noqa: E501
        :rtype: list[ITaggable]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Asset.


        :param tags: The tags of this Asset.  # noqa: E501
        :type: list[ITaggable]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Asset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

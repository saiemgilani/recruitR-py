# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Board(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logo': 'str',
        'user_follow_boards': 'list[UserFollowBoard]',
        'key': 'int',
        'site_key': 'int',
        'site': 'Site',
        'sport_key': 'int',
        'referer_key': 'int',
        'name': 'str',
        'seo': 'str',
        'tagline': 'str',
        'type': 'ChannelTypes',
        'live': 'bool',
        'nav': 'bool',
        'order': 'int',
        'rating': 'int',
        'read': 'AccessLevel',
        'write': 'AccessLevel',
        'vote': 'AccessLevel',
        'recruiting': 'bool',
        'post_count': 'int',
        'parent_key': 'int',
        'default': 'bool',
        'channel_contents': 'list[ChannelContent]',
        'segments': 'list[Segment]'
    }

    attribute_map = {
        'logo': 'logo',
        'user_follow_boards': 'userFollowBoards',
        'key': 'key',
        'site_key': 'siteKey',
        'site': 'site',
        'sport_key': 'sportKey',
        'referer_key': 'refererKey',
        'name': 'name',
        'seo': 'seo',
        'tagline': 'tagline',
        'type': 'type',
        'live': 'live',
        'nav': 'nav',
        'order': 'order',
        'rating': 'rating',
        'read': 'read',
        'write': 'write',
        'vote': 'vote',
        'recruiting': 'recruiting',
        'post_count': 'postCount',
        'parent_key': 'parentKey',
        'default': 'default',
        'channel_contents': 'channelContents',
        'segments': 'segments'
    }

    def __init__(self, logo=None, user_follow_boards=None, key=None, site_key=None, site=None, sport_key=None, referer_key=None, name=None, seo=None, tagline=None, type=None, live=None, nav=None, order=None, rating=None, read=None, write=None, vote=None, recruiting=None, post_count=None, parent_key=None, default=None, channel_contents=None, segments=None):  # noqa: E501
        """Board - a model defined in Swagger"""  # noqa: E501
        self._logo = None
        self._user_follow_boards = None
        self._key = None
        self._site_key = None
        self._site = None
        self._sport_key = None
        self._referer_key = None
        self._name = None
        self._seo = None
        self._tagline = None
        self._type = None
        self._live = None
        self._nav = None
        self._order = None
        self._rating = None
        self._read = None
        self._write = None
        self._vote = None
        self._recruiting = None
        self._post_count = None
        self._parent_key = None
        self._default = None
        self._channel_contents = None
        self._segments = None
        self.discriminator = None
        if logo is not None:
            self.logo = logo
        if user_follow_boards is not None:
            self.user_follow_boards = user_follow_boards
        if key is not None:
            self.key = key
        if site_key is not None:
            self.site_key = site_key
        if site is not None:
            self.site = site
        if sport_key is not None:
            self.sport_key = sport_key
        if referer_key is not None:
            self.referer_key = referer_key
        self.name = name
        if seo is not None:
            self.seo = seo
        if tagline is not None:
            self.tagline = tagline
        self.type = type
        if live is not None:
            self.live = live
        if nav is not None:
            self.nav = nav
        if order is not None:
            self.order = order
        if rating is not None:
            self.rating = rating
        if read is not None:
            self.read = read
        if write is not None:
            self.write = write
        if vote is not None:
            self.vote = vote
        self.recruiting = recruiting
        if post_count is not None:
            self.post_count = post_count
        if parent_key is not None:
            self.parent_key = parent_key
        self.default = default
        if channel_contents is not None:
            self.channel_contents = channel_contents
        if segments is not None:
            self.segments = segments

    @property
    def logo(self):
        """Gets the logo of this Board.  # noqa: E501


        :return: The logo of this Board.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Board.


        :param logo: The logo of this Board.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def user_follow_boards(self):
        """Gets the user_follow_boards of this Board.  # noqa: E501


        :return: The user_follow_boards of this Board.  # noqa: E501
        :rtype: list[UserFollowBoard]
        """
        return self._user_follow_boards

    @user_follow_boards.setter
    def user_follow_boards(self, user_follow_boards):
        """Sets the user_follow_boards of this Board.


        :param user_follow_boards: The user_follow_boards of this Board.  # noqa: E501
        :type: list[UserFollowBoard]
        """

        self._user_follow_boards = user_follow_boards

    @property
    def key(self):
        """Gets the key of this Board.  # noqa: E501


        :return: The key of this Board.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Board.


        :param key: The key of this Board.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def site_key(self):
        """Gets the site_key of this Board.  # noqa: E501


        :return: The site_key of this Board.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this Board.


        :param site_key: The site_key of this Board.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def site(self):
        """Gets the site of this Board.  # noqa: E501


        :return: The site of this Board.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Board.


        :param site: The site of this Board.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def sport_key(self):
        """Gets the sport_key of this Board.  # noqa: E501


        :return: The sport_key of this Board.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this Board.


        :param sport_key: The sport_key of this Board.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def referer_key(self):
        """Gets the referer_key of this Board.  # noqa: E501


        :return: The referer_key of this Board.  # noqa: E501
        :rtype: int
        """
        return self._referer_key

    @referer_key.setter
    def referer_key(self, referer_key):
        """Sets the referer_key of this Board.


        :param referer_key: The referer_key of this Board.  # noqa: E501
        :type: int
        """

        self._referer_key = referer_key

    @property
    def name(self):
        """Gets the name of this Board.  # noqa: E501


        :return: The name of this Board.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Board.


        :param name: The name of this Board.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def seo(self):
        """Gets the seo of this Board.  # noqa: E501


        :return: The seo of this Board.  # noqa: E501
        :rtype: str
        """
        return self._seo

    @seo.setter
    def seo(self, seo):
        """Sets the seo of this Board.


        :param seo: The seo of this Board.  # noqa: E501
        :type: str
        """

        self._seo = seo

    @property
    def tagline(self):
        """Gets the tagline of this Board.  # noqa: E501


        :return: The tagline of this Board.  # noqa: E501
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this Board.


        :param tagline: The tagline of this Board.  # noqa: E501
        :type: str
        """

        self._tagline = tagline

    @property
    def type(self):
        """Gets the type of this Board.  # noqa: E501


        :return: The type of this Board.  # noqa: E501
        :rtype: ChannelTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Board.


        :param type: The type of this Board.  # noqa: E501
        :type: ChannelTypes
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def live(self):
        """Gets the live of this Board.  # noqa: E501


        :return: The live of this Board.  # noqa: E501
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this Board.


        :param live: The live of this Board.  # noqa: E501
        :type: bool
        """

        self._live = live

    @property
    def nav(self):
        """Gets the nav of this Board.  # noqa: E501


        :return: The nav of this Board.  # noqa: E501
        :rtype: bool
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this Board.


        :param nav: The nav of this Board.  # noqa: E501
        :type: bool
        """

        self._nav = nav

    @property
    def order(self):
        """Gets the order of this Board.  # noqa: E501


        :return: The order of this Board.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Board.


        :param order: The order of this Board.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def rating(self):
        """Gets the rating of this Board.  # noqa: E501


        :return: The rating of this Board.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Board.


        :param rating: The rating of this Board.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def read(self):
        """Gets the read of this Board.  # noqa: E501


        :return: The read of this Board.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Board.


        :param read: The read of this Board.  # noqa: E501
        :type: AccessLevel
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this Board.  # noqa: E501


        :return: The write of this Board.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this Board.


        :param write: The write of this Board.  # noqa: E501
        :type: AccessLevel
        """

        self._write = write

    @property
    def vote(self):
        """Gets the vote of this Board.  # noqa: E501


        :return: The vote of this Board.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._vote

    @vote.setter
    def vote(self, vote):
        """Sets the vote of this Board.


        :param vote: The vote of this Board.  # noqa: E501
        :type: AccessLevel
        """

        self._vote = vote

    @property
    def recruiting(self):
        """Gets the recruiting of this Board.  # noqa: E501


        :return: The recruiting of this Board.  # noqa: E501
        :rtype: bool
        """
        return self._recruiting

    @recruiting.setter
    def recruiting(self, recruiting):
        """Sets the recruiting of this Board.


        :param recruiting: The recruiting of this Board.  # noqa: E501
        :type: bool
        """
        if recruiting is None:
            raise ValueError("Invalid value for `recruiting`, must not be `None`")  # noqa: E501

        self._recruiting = recruiting

    @property
    def post_count(self):
        """Gets the post_count of this Board.  # noqa: E501


        :return: The post_count of this Board.  # noqa: E501
        :rtype: int
        """
        return self._post_count

    @post_count.setter
    def post_count(self, post_count):
        """Sets the post_count of this Board.


        :param post_count: The post_count of this Board.  # noqa: E501
        :type: int
        """

        self._post_count = post_count

    @property
    def parent_key(self):
        """Gets the parent_key of this Board.  # noqa: E501


        :return: The parent_key of this Board.  # noqa: E501
        :rtype: int
        """
        return self._parent_key

    @parent_key.setter
    def parent_key(self, parent_key):
        """Sets the parent_key of this Board.


        :param parent_key: The parent_key of this Board.  # noqa: E501
        :type: int
        """

        self._parent_key = parent_key

    @property
    def default(self):
        """Gets the default of this Board.  # noqa: E501


        :return: The default of this Board.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Board.


        :param default: The default of this Board.  # noqa: E501
        :type: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    @property
    def channel_contents(self):
        """Gets the channel_contents of this Board.  # noqa: E501


        :return: The channel_contents of this Board.  # noqa: E501
        :rtype: list[ChannelContent]
        """
        return self._channel_contents

    @channel_contents.setter
    def channel_contents(self, channel_contents):
        """Sets the channel_contents of this Board.


        :param channel_contents: The channel_contents of this Board.  # noqa: E501
        :type: list[ChannelContent]
        """

        self._channel_contents = channel_contents

    @property
    def segments(self):
        """Gets the segments of this Board.  # noqa: E501


        :return: The segments of this Board.  # noqa: E501
        :rtype: list[Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Board.


        :param segments: The segments of this Board.  # noqa: E501
        :type: list[Segment]
        """

        self._segments = segments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Board, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Board):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

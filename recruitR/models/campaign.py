# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Campaign(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'segment_key': 'int',
        '_date': 'datetime',
        'scheduled_date': 'datetime',
        'id': 'str',
        'user_key': 'int',
        'body': 'str',
        'subject': 'str',
        'status': 'CampaignStatus',
        'recipient_list_id': 'str',
        'email_provider_type': 'EmailProviderType',
        'template': 'TemplateType',
        'segment': 'Segment',
        'user': 'User',
        'deleted': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'segment_key': 'segmentKey',
        '_date': 'date',
        'scheduled_date': 'scheduledDate',
        'id': 'id',
        'user_key': 'userKey',
        'body': 'body',
        'subject': 'subject',
        'status': 'status',
        'recipient_list_id': 'recipientListId',
        'email_provider_type': 'emailProviderType',
        'template': 'template',
        'segment': 'segment',
        'user': 'user',
        'deleted': 'deleted'
    }

    def __init__(self, key=None, segment_key=None, _date=None, scheduled_date=None, id=None, user_key=None, body=None, subject=None, status=None, recipient_list_id=None, email_provider_type=None, template=None, segment=None, user=None, deleted=None):  # noqa: E501
        """Campaign - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._segment_key = None
        self.__date = None
        self._scheduled_date = None
        self._id = None
        self._user_key = None
        self._body = None
        self._subject = None
        self._status = None
        self._recipient_list_id = None
        self._email_provider_type = None
        self._template = None
        self._segment = None
        self._user = None
        self._deleted = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if segment_key is not None:
            self.segment_key = segment_key
        if _date is not None:
            self._date = _date
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if id is not None:
            self.id = id
        if user_key is not None:
            self.user_key = user_key
        if body is not None:
            self.body = body
        if subject is not None:
            self.subject = subject
        if status is not None:
            self.status = status
        if recipient_list_id is not None:
            self.recipient_list_id = recipient_list_id
        if email_provider_type is not None:
            self.email_provider_type = email_provider_type
        if template is not None:
            self.template = template
        if segment is not None:
            self.segment = segment
        if user is not None:
            self.user = user
        if deleted is not None:
            self.deleted = deleted

    @property
    def key(self):
        """Gets the key of this Campaign.  # noqa: E501


        :return: The key of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Campaign.


        :param key: The key of this Campaign.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def segment_key(self):
        """Gets the segment_key of this Campaign.  # noqa: E501


        :return: The segment_key of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._segment_key

    @segment_key.setter
    def segment_key(self, segment_key):
        """Sets the segment_key of this Campaign.


        :param segment_key: The segment_key of this Campaign.  # noqa: E501
        :type: int
        """

        self._segment_key = segment_key

    @property
    def _date(self):
        """Gets the _date of this Campaign.  # noqa: E501


        :return: The _date of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Campaign.


        :param _date: The _date of this Campaign.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this Campaign.  # noqa: E501


        :return: The scheduled_date of this Campaign.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this Campaign.


        :param scheduled_date: The scheduled_date of this Campaign.  # noqa: E501
        :type: datetime
        """

        self._scheduled_date = scheduled_date

    @property
    def id(self):
        """Gets the id of this Campaign.  # noqa: E501


        :return: The id of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Campaign.


        :param id: The id of this Campaign.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_key(self):
        """Gets the user_key of this Campaign.  # noqa: E501


        :return: The user_key of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Campaign.


        :param user_key: The user_key of this Campaign.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def body(self):
        """Gets the body of this Campaign.  # noqa: E501


        :return: The body of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Campaign.


        :param body: The body of this Campaign.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def subject(self):
        """Gets the subject of this Campaign.  # noqa: E501


        :return: The subject of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Campaign.


        :param subject: The subject of this Campaign.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def status(self):
        """Gets the status of this Campaign.  # noqa: E501


        :return: The status of this Campaign.  # noqa: E501
        :rtype: CampaignStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Campaign.


        :param status: The status of this Campaign.  # noqa: E501
        :type: CampaignStatus
        """

        self._status = status

    @property
    def recipient_list_id(self):
        """Gets the recipient_list_id of this Campaign.  # noqa: E501


        :return: The recipient_list_id of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._recipient_list_id

    @recipient_list_id.setter
    def recipient_list_id(self, recipient_list_id):
        """Sets the recipient_list_id of this Campaign.


        :param recipient_list_id: The recipient_list_id of this Campaign.  # noqa: E501
        :type: str
        """

        self._recipient_list_id = recipient_list_id

    @property
    def email_provider_type(self):
        """Gets the email_provider_type of this Campaign.  # noqa: E501


        :return: The email_provider_type of this Campaign.  # noqa: E501
        :rtype: EmailProviderType
        """
        return self._email_provider_type

    @email_provider_type.setter
    def email_provider_type(self, email_provider_type):
        """Sets the email_provider_type of this Campaign.


        :param email_provider_type: The email_provider_type of this Campaign.  # noqa: E501
        :type: EmailProviderType
        """

        self._email_provider_type = email_provider_type

    @property
    def template(self):
        """Gets the template of this Campaign.  # noqa: E501


        :return: The template of this Campaign.  # noqa: E501
        :rtype: TemplateType
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Campaign.


        :param template: The template of this Campaign.  # noqa: E501
        :type: TemplateType
        """

        self._template = template

    @property
    def segment(self):
        """Gets the segment of this Campaign.  # noqa: E501


        :return: The segment of this Campaign.  # noqa: E501
        :rtype: Segment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this Campaign.


        :param segment: The segment of this Campaign.  # noqa: E501
        :type: Segment
        """

        self._segment = segment

    @property
    def user(self):
        """Gets the user of this Campaign.  # noqa: E501


        :return: The user of this Campaign.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Campaign.


        :param user: The user of this Campaign.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def deleted(self):
        """Gets the deleted of this Campaign.  # noqa: E501


        :return: The deleted of this Campaign.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Campaign.


        :param deleted: The deleted of this Campaign.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Campaign, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campaign):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

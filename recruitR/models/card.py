# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'user_key': 'int',
        'state_key': 'int',
        'year': 'int',
        'month': 'int',
        'four': 'str',
        'type': 'str',
        'serial': 'str',
        'city': 'str',
        'address1': 'str',
        'address2': 'str',
        'country_key': 'int',
        'zip': 'str',
        'last_trial': 'datetime',
        'default': 'int',
        'country': 'Country',
        'state': 'State',
        'user_subscriptions': 'list[UserSubscription]',
        'user_transactions': 'list[UserTransaction]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'user_key': 'userKey',
        'state_key': 'stateKey',
        'year': 'year',
        'month': 'month',
        'four': 'four',
        'type': 'type',
        'serial': 'serial',
        'city': 'city',
        'address1': 'address1',
        'address2': 'address2',
        'country_key': 'countryKey',
        'zip': 'zip',
        'last_trial': 'lastTrial',
        'default': 'default',
        'country': 'country',
        'state': 'state',
        'user_subscriptions': 'userSubscriptions',
        'user_transactions': 'userTransactions'
    }

    def __init__(self, key=None, name=None, user_key=None, state_key=None, year=None, month=None, four=None, type=None, serial=None, city=None, address1=None, address2=None, country_key=None, zip=None, last_trial=None, default=None, country=None, state=None, user_subscriptions=None, user_transactions=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._user_key = None
        self._state_key = None
        self._year = None
        self._month = None
        self._four = None
        self._type = None
        self._serial = None
        self._city = None
        self._address1 = None
        self._address2 = None
        self._country_key = None
        self._zip = None
        self._last_trial = None
        self._default = None
        self._country = None
        self._state = None
        self._user_subscriptions = None
        self._user_transactions = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if user_key is not None:
            self.user_key = user_key
        if state_key is not None:
            self.state_key = state_key
        if year is not None:
            self.year = year
        if month is not None:
            self.month = month
        if four is not None:
            self.four = four
        if type is not None:
            self.type = type
        if serial is not None:
            self.serial = serial
        if city is not None:
            self.city = city
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if country_key is not None:
            self.country_key = country_key
        if zip is not None:
            self.zip = zip
        if last_trial is not None:
            self.last_trial = last_trial
        if default is not None:
            self.default = default
        if country is not None:
            self.country = country
        if state is not None:
            self.state = state
        if user_subscriptions is not None:
            self.user_subscriptions = user_subscriptions
        if user_transactions is not None:
            self.user_transactions = user_transactions

    @property
    def key(self):
        """Gets the key of this Card.  # noqa: E501


        :return: The key of this Card.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Card.


        :param key: The key of this Card.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Card.  # noqa: E501


        :return: The name of this Card.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Card.


        :param name: The name of this Card.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_key(self):
        """Gets the user_key of this Card.  # noqa: E501


        :return: The user_key of this Card.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Card.


        :param user_key: The user_key of this Card.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def state_key(self):
        """Gets the state_key of this Card.  # noqa: E501


        :return: The state_key of this Card.  # noqa: E501
        :rtype: int
        """
        return self._state_key

    @state_key.setter
    def state_key(self, state_key):
        """Sets the state_key of this Card.


        :param state_key: The state_key of this Card.  # noqa: E501
        :type: int
        """

        self._state_key = state_key

    @property
    def year(self):
        """Gets the year of this Card.  # noqa: E501


        :return: The year of this Card.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Card.


        :param year: The year of this Card.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def month(self):
        """Gets the month of this Card.  # noqa: E501


        :return: The month of this Card.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Card.


        :param month: The month of this Card.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def four(self):
        """Gets the four of this Card.  # noqa: E501


        :return: The four of this Card.  # noqa: E501
        :rtype: str
        """
        return self._four

    @four.setter
    def four(self, four):
        """Sets the four of this Card.


        :param four: The four of this Card.  # noqa: E501
        :type: str
        """

        self._four = four

    @property
    def type(self):
        """Gets the type of this Card.  # noqa: E501


        :return: The type of this Card.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Card.


        :param type: The type of this Card.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def serial(self):
        """Gets the serial of this Card.  # noqa: E501


        :return: The serial of this Card.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Card.


        :param serial: The serial of this Card.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def city(self):
        """Gets the city of this Card.  # noqa: E501


        :return: The city of this Card.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Card.


        :param city: The city of this Card.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def address1(self):
        """Gets the address1 of this Card.  # noqa: E501


        :return: The address1 of this Card.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Card.


        :param address1: The address1 of this Card.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Card.  # noqa: E501


        :return: The address2 of this Card.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Card.


        :param address2: The address2 of this Card.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def country_key(self):
        """Gets the country_key of this Card.  # noqa: E501


        :return: The country_key of this Card.  # noqa: E501
        :rtype: int
        """
        return self._country_key

    @country_key.setter
    def country_key(self, country_key):
        """Sets the country_key of this Card.


        :param country_key: The country_key of this Card.  # noqa: E501
        :type: int
        """

        self._country_key = country_key

    @property
    def zip(self):
        """Gets the zip of this Card.  # noqa: E501


        :return: The zip of this Card.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Card.


        :param zip: The zip of this Card.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def last_trial(self):
        """Gets the last_trial of this Card.  # noqa: E501


        :return: The last_trial of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._last_trial

    @last_trial.setter
    def last_trial(self, last_trial):
        """Sets the last_trial of this Card.


        :param last_trial: The last_trial of this Card.  # noqa: E501
        :type: datetime
        """

        self._last_trial = last_trial

    @property
    def default(self):
        """Gets the default of this Card.  # noqa: E501


        :return: The default of this Card.  # noqa: E501
        :rtype: int
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Card.


        :param default: The default of this Card.  # noqa: E501
        :type: int
        """

        self._default = default

    @property
    def country(self):
        """Gets the country of this Card.  # noqa: E501


        :return: The country of this Card.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Card.


        :param country: The country of this Card.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this Card.  # noqa: E501


        :return: The state of this Card.  # noqa: E501
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Card.


        :param state: The state of this Card.  # noqa: E501
        :type: State
        """

        self._state = state

    @property
    def user_subscriptions(self):
        """Gets the user_subscriptions of this Card.  # noqa: E501


        :return: The user_subscriptions of this Card.  # noqa: E501
        :rtype: list[UserSubscription]
        """
        return self._user_subscriptions

    @user_subscriptions.setter
    def user_subscriptions(self, user_subscriptions):
        """Sets the user_subscriptions of this Card.


        :param user_subscriptions: The user_subscriptions of this Card.  # noqa: E501
        :type: list[UserSubscription]
        """

        self._user_subscriptions = user_subscriptions

    @property
    def user_transactions(self):
        """Gets the user_transactions of this Card.  # noqa: E501


        :return: The user_transactions of this Card.  # noqa: E501
        :rtype: list[UserTransaction]
        """
        return self._user_transactions

    @user_transactions.setter
    def user_transactions(self, user_transactions):
        """Sets the user_transactions of this Card.


        :param user_transactions: The user_transactions of this Card.  # noqa: E501
        :type: list[UserTransaction]
        """

        self._user_transactions = user_transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

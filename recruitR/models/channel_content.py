# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChannelContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'channel_key': 'int',
        'content_key': 'int',
        'title': 'str',
        'summary': 'str',
        'network': 'bool',
        'position': 'int',
        'expiration': 'datetime',
        'asset_key': 'int',
        'shard': 'int',
        'is_pinned': 'bool',
        'channel': 'Channel',
        'content': 'Content',
        'default_asset': 'Asset',
        'extended_channel_content': 'ExtendedChannelContent'
    }

    attribute_map = {
        'key': 'key',
        'channel_key': 'channelKey',
        'content_key': 'contentKey',
        'title': 'title',
        'summary': 'summary',
        'network': 'network',
        'position': 'position',
        'expiration': 'expiration',
        'asset_key': 'assetKey',
        'shard': 'shard',
        'is_pinned': 'isPinned',
        'channel': 'channel',
        'content': 'content',
        'default_asset': 'defaultAsset',
        'extended_channel_content': 'extendedChannelContent'
    }

    def __init__(self, key=None, channel_key=None, content_key=None, title=None, summary=None, network=None, position=None, expiration=None, asset_key=None, shard=None, is_pinned=None, channel=None, content=None, default_asset=None, extended_channel_content=None):  # noqa: E501
        """ChannelContent - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._channel_key = None
        self._content_key = None
        self._title = None
        self._summary = None
        self._network = None
        self._position = None
        self._expiration = None
        self._asset_key = None
        self._shard = None
        self._is_pinned = None
        self._channel = None
        self._content = None
        self._default_asset = None
        self._extended_channel_content = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if channel_key is not None:
            self.channel_key = channel_key
        if content_key is not None:
            self.content_key = content_key
        if title is not None:
            self.title = title
        if summary is not None:
            self.summary = summary
        if network is not None:
            self.network = network
        if position is not None:
            self.position = position
        if expiration is not None:
            self.expiration = expiration
        if asset_key is not None:
            self.asset_key = asset_key
        if shard is not None:
            self.shard = shard
        if is_pinned is not None:
            self.is_pinned = is_pinned
        if channel is not None:
            self.channel = channel
        if content is not None:
            self.content = content
        if default_asset is not None:
            self.default_asset = default_asset
        if extended_channel_content is not None:
            self.extended_channel_content = extended_channel_content

    @property
    def key(self):
        """Gets the key of this ChannelContent.  # noqa: E501


        :return: The key of this ChannelContent.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ChannelContent.


        :param key: The key of this ChannelContent.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def channel_key(self):
        """Gets the channel_key of this ChannelContent.  # noqa: E501


        :return: The channel_key of this ChannelContent.  # noqa: E501
        :rtype: int
        """
        return self._channel_key

    @channel_key.setter
    def channel_key(self, channel_key):
        """Sets the channel_key of this ChannelContent.


        :param channel_key: The channel_key of this ChannelContent.  # noqa: E501
        :type: int
        """

        self._channel_key = channel_key

    @property
    def content_key(self):
        """Gets the content_key of this ChannelContent.  # noqa: E501


        :return: The content_key of this ChannelContent.  # noqa: E501
        :rtype: int
        """
        return self._content_key

    @content_key.setter
    def content_key(self, content_key):
        """Sets the content_key of this ChannelContent.


        :param content_key: The content_key of this ChannelContent.  # noqa: E501
        :type: int
        """

        self._content_key = content_key

    @property
    def title(self):
        """Gets the title of this ChannelContent.  # noqa: E501


        :return: The title of this ChannelContent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChannelContent.


        :param title: The title of this ChannelContent.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this ChannelContent.  # noqa: E501


        :return: The summary of this ChannelContent.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ChannelContent.


        :param summary: The summary of this ChannelContent.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def network(self):
        """Gets the network of this ChannelContent.  # noqa: E501


        :return: The network of this ChannelContent.  # noqa: E501
        :rtype: bool
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ChannelContent.


        :param network: The network of this ChannelContent.  # noqa: E501
        :type: bool
        """

        self._network = network

    @property
    def position(self):
        """Gets the position of this ChannelContent.  # noqa: E501


        :return: The position of this ChannelContent.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ChannelContent.


        :param position: The position of this ChannelContent.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def expiration(self):
        """Gets the expiration of this ChannelContent.  # noqa: E501


        :return: The expiration of this ChannelContent.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ChannelContent.


        :param expiration: The expiration of this ChannelContent.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def asset_key(self):
        """Gets the asset_key of this ChannelContent.  # noqa: E501


        :return: The asset_key of this ChannelContent.  # noqa: E501
        :rtype: int
        """
        return self._asset_key

    @asset_key.setter
    def asset_key(self, asset_key):
        """Sets the asset_key of this ChannelContent.


        :param asset_key: The asset_key of this ChannelContent.  # noqa: E501
        :type: int
        """

        self._asset_key = asset_key

    @property
    def shard(self):
        """Gets the shard of this ChannelContent.  # noqa: E501


        :return: The shard of this ChannelContent.  # noqa: E501
        :rtype: int
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this ChannelContent.


        :param shard: The shard of this ChannelContent.  # noqa: E501
        :type: int
        """

        self._shard = shard

    @property
    def is_pinned(self):
        """Gets the is_pinned of this ChannelContent.  # noqa: E501


        :return: The is_pinned of this ChannelContent.  # noqa: E501
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned):
        """Sets the is_pinned of this ChannelContent.


        :param is_pinned: The is_pinned of this ChannelContent.  # noqa: E501
        :type: bool
        """

        self._is_pinned = is_pinned

    @property
    def channel(self):
        """Gets the channel of this ChannelContent.  # noqa: E501


        :return: The channel of this ChannelContent.  # noqa: E501
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChannelContent.


        :param channel: The channel of this ChannelContent.  # noqa: E501
        :type: Channel
        """

        self._channel = channel

    @property
    def content(self):
        """Gets the content of this ChannelContent.  # noqa: E501


        :return: The content of this ChannelContent.  # noqa: E501
        :rtype: Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ChannelContent.


        :param content: The content of this ChannelContent.  # noqa: E501
        :type: Content
        """

        self._content = content

    @property
    def default_asset(self):
        """Gets the default_asset of this ChannelContent.  # noqa: E501


        :return: The default_asset of this ChannelContent.  # noqa: E501
        :rtype: Asset
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this ChannelContent.


        :param default_asset: The default_asset of this ChannelContent.  # noqa: E501
        :type: Asset
        """

        self._default_asset = default_asset

    @property
    def extended_channel_content(self):
        """Gets the extended_channel_content of this ChannelContent.  # noqa: E501


        :return: The extended_channel_content of this ChannelContent.  # noqa: E501
        :rtype: ExtendedChannelContent
        """
        return self._extended_channel_content

    @extended_channel_content.setter
    def extended_channel_content(self, extended_channel_content):
        """Sets the extended_channel_content of this ChannelContent.


        :param extended_channel_content: The extended_channel_content of this ChannelContent.  # noqa: E501
        :type: ExtendedChannelContent
        """

        self._extended_channel_content = extended_channel_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Coach(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'birthdate': 'datetime',
        'hometown_key': 'int',
        'alma_mater_key': 'int',
        'twitter_contact': 'str',
        'predictions_locked': 'bool',
        'bio': 'str',
        'hero_asset_key': 'int',
        'default_asset_key': 'int',
        'quote_asset_key': 'int',
        'cbs_key': 'int',
        'name': 'str',
        'cbs_annotation': 'str',
        'current_job': 'CoachJob',
        'default_asset': 'Asset',
        'coach_assets': 'list[CoachAsset]',
        'coach_contents': 'list[CoachContent]',
        'coach_jobs': 'list[CoachJob]',
        'coach_rankings': 'list[CoachRanking]'
    }

    attribute_map = {
        'key': 'key',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'birthdate': 'birthdate',
        'hometown_key': 'hometownKey',
        'alma_mater_key': 'almaMaterKey',
        'twitter_contact': 'twitterContact',
        'predictions_locked': 'predictionsLocked',
        'bio': 'bio',
        'hero_asset_key': 'heroAssetKey',
        'default_asset_key': 'defaultAssetKey',
        'quote_asset_key': 'quoteAssetKey',
        'cbs_key': 'cbsKey',
        'name': 'name',
        'cbs_annotation': 'cbsAnnotation',
        'current_job': 'currentJob',
        'default_asset': 'defaultAsset',
        'coach_assets': 'coachAssets',
        'coach_contents': 'coachContents',
        'coach_jobs': 'coachJobs',
        'coach_rankings': 'coachRankings'
    }

    def __init__(self, key=None, first_name=None, last_name=None, birthdate=None, hometown_key=None, alma_mater_key=None, twitter_contact=None, predictions_locked=None, bio=None, hero_asset_key=None, default_asset_key=None, quote_asset_key=None, cbs_key=None, name=None, cbs_annotation=None, current_job=None, default_asset=None, coach_assets=None, coach_contents=None, coach_jobs=None, coach_rankings=None):  # noqa: E501
        """Coach - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._first_name = None
        self._last_name = None
        self._birthdate = None
        self._hometown_key = None
        self._alma_mater_key = None
        self._twitter_contact = None
        self._predictions_locked = None
        self._bio = None
        self._hero_asset_key = None
        self._default_asset_key = None
        self._quote_asset_key = None
        self._cbs_key = None
        self._name = None
        self._cbs_annotation = None
        self._current_job = None
        self._default_asset = None
        self._coach_assets = None
        self._coach_contents = None
        self._coach_jobs = None
        self._coach_rankings = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self.first_name = first_name
        self.last_name = last_name
        if birthdate is not None:
            self.birthdate = birthdate
        if hometown_key is not None:
            self.hometown_key = hometown_key
        if alma_mater_key is not None:
            self.alma_mater_key = alma_mater_key
        if twitter_contact is not None:
            self.twitter_contact = twitter_contact
        if predictions_locked is not None:
            self.predictions_locked = predictions_locked
        if bio is not None:
            self.bio = bio
        if hero_asset_key is not None:
            self.hero_asset_key = hero_asset_key
        if default_asset_key is not None:
            self.default_asset_key = default_asset_key
        if quote_asset_key is not None:
            self.quote_asset_key = quote_asset_key
        if cbs_key is not None:
            self.cbs_key = cbs_key
        if name is not None:
            self.name = name
        if cbs_annotation is not None:
            self.cbs_annotation = cbs_annotation
        if current_job is not None:
            self.current_job = current_job
        if default_asset is not None:
            self.default_asset = default_asset
        if coach_assets is not None:
            self.coach_assets = coach_assets
        if coach_contents is not None:
            self.coach_contents = coach_contents
        if coach_jobs is not None:
            self.coach_jobs = coach_jobs
        if coach_rankings is not None:
            self.coach_rankings = coach_rankings

    @property
    def key(self):
        """Gets the key of this Coach.  # noqa: E501


        :return: The key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Coach.


        :param key: The key of this Coach.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def first_name(self):
        """Gets the first_name of this Coach.  # noqa: E501


        :return: The first_name of this Coach.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Coach.


        :param first_name: The first_name of this Coach.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Coach.  # noqa: E501


        :return: The last_name of this Coach.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Coach.


        :param last_name: The last_name of this Coach.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def birthdate(self):
        """Gets the birthdate of this Coach.  # noqa: E501


        :return: The birthdate of this Coach.  # noqa: E501
        :rtype: datetime
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this Coach.


        :param birthdate: The birthdate of this Coach.  # noqa: E501
        :type: datetime
        """

        self._birthdate = birthdate

    @property
    def hometown_key(self):
        """Gets the hometown_key of this Coach.  # noqa: E501


        :return: The hometown_key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._hometown_key

    @hometown_key.setter
    def hometown_key(self, hometown_key):
        """Sets the hometown_key of this Coach.


        :param hometown_key: The hometown_key of this Coach.  # noqa: E501
        :type: int
        """

        self._hometown_key = hometown_key

    @property
    def alma_mater_key(self):
        """Gets the alma_mater_key of this Coach.  # noqa: E501


        :return: The alma_mater_key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._alma_mater_key

    @alma_mater_key.setter
    def alma_mater_key(self, alma_mater_key):
        """Sets the alma_mater_key of this Coach.


        :param alma_mater_key: The alma_mater_key of this Coach.  # noqa: E501
        :type: int
        """

        self._alma_mater_key = alma_mater_key

    @property
    def twitter_contact(self):
        """Gets the twitter_contact of this Coach.  # noqa: E501


        :return: The twitter_contact of this Coach.  # noqa: E501
        :rtype: str
        """
        return self._twitter_contact

    @twitter_contact.setter
    def twitter_contact(self, twitter_contact):
        """Sets the twitter_contact of this Coach.


        :param twitter_contact: The twitter_contact of this Coach.  # noqa: E501
        :type: str
        """

        self._twitter_contact = twitter_contact

    @property
    def predictions_locked(self):
        """Gets the predictions_locked of this Coach.  # noqa: E501


        :return: The predictions_locked of this Coach.  # noqa: E501
        :rtype: bool
        """
        return self._predictions_locked

    @predictions_locked.setter
    def predictions_locked(self, predictions_locked):
        """Sets the predictions_locked of this Coach.


        :param predictions_locked: The predictions_locked of this Coach.  # noqa: E501
        :type: bool
        """

        self._predictions_locked = predictions_locked

    @property
    def bio(self):
        """Gets the bio of this Coach.  # noqa: E501


        :return: The bio of this Coach.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Coach.


        :param bio: The bio of this Coach.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def hero_asset_key(self):
        """Gets the hero_asset_key of this Coach.  # noqa: E501


        :return: The hero_asset_key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._hero_asset_key

    @hero_asset_key.setter
    def hero_asset_key(self, hero_asset_key):
        """Sets the hero_asset_key of this Coach.


        :param hero_asset_key: The hero_asset_key of this Coach.  # noqa: E501
        :type: int
        """

        self._hero_asset_key = hero_asset_key

    @property
    def default_asset_key(self):
        """Gets the default_asset_key of this Coach.  # noqa: E501


        :return: The default_asset_key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._default_asset_key

    @default_asset_key.setter
    def default_asset_key(self, default_asset_key):
        """Sets the default_asset_key of this Coach.


        :param default_asset_key: The default_asset_key of this Coach.  # noqa: E501
        :type: int
        """

        self._default_asset_key = default_asset_key

    @property
    def quote_asset_key(self):
        """Gets the quote_asset_key of this Coach.  # noqa: E501


        :return: The quote_asset_key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._quote_asset_key

    @quote_asset_key.setter
    def quote_asset_key(self, quote_asset_key):
        """Sets the quote_asset_key of this Coach.


        :param quote_asset_key: The quote_asset_key of this Coach.  # noqa: E501
        :type: int
        """

        self._quote_asset_key = quote_asset_key

    @property
    def cbs_key(self):
        """Gets the cbs_key of this Coach.  # noqa: E501


        :return: The cbs_key of this Coach.  # noqa: E501
        :rtype: int
        """
        return self._cbs_key

    @cbs_key.setter
    def cbs_key(self, cbs_key):
        """Sets the cbs_key of this Coach.


        :param cbs_key: The cbs_key of this Coach.  # noqa: E501
        :type: int
        """

        self._cbs_key = cbs_key

    @property
    def name(self):
        """Gets the name of this Coach.  # noqa: E501


        :return: The name of this Coach.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Coach.


        :param name: The name of this Coach.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cbs_annotation(self):
        """Gets the cbs_annotation of this Coach.  # noqa: E501


        :return: The cbs_annotation of this Coach.  # noqa: E501
        :rtype: str
        """
        return self._cbs_annotation

    @cbs_annotation.setter
    def cbs_annotation(self, cbs_annotation):
        """Sets the cbs_annotation of this Coach.


        :param cbs_annotation: The cbs_annotation of this Coach.  # noqa: E501
        :type: str
        """

        self._cbs_annotation = cbs_annotation

    @property
    def current_job(self):
        """Gets the current_job of this Coach.  # noqa: E501


        :return: The current_job of this Coach.  # noqa: E501
        :rtype: CoachJob
        """
        return self._current_job

    @current_job.setter
    def current_job(self, current_job):
        """Sets the current_job of this Coach.


        :param current_job: The current_job of this Coach.  # noqa: E501
        :type: CoachJob
        """

        self._current_job = current_job

    @property
    def default_asset(self):
        """Gets the default_asset of this Coach.  # noqa: E501


        :return: The default_asset of this Coach.  # noqa: E501
        :rtype: Asset
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this Coach.


        :param default_asset: The default_asset of this Coach.  # noqa: E501
        :type: Asset
        """

        self._default_asset = default_asset

    @property
    def coach_assets(self):
        """Gets the coach_assets of this Coach.  # noqa: E501


        :return: The coach_assets of this Coach.  # noqa: E501
        :rtype: list[CoachAsset]
        """
        return self._coach_assets

    @coach_assets.setter
    def coach_assets(self, coach_assets):
        """Sets the coach_assets of this Coach.


        :param coach_assets: The coach_assets of this Coach.  # noqa: E501
        :type: list[CoachAsset]
        """

        self._coach_assets = coach_assets

    @property
    def coach_contents(self):
        """Gets the coach_contents of this Coach.  # noqa: E501


        :return: The coach_contents of this Coach.  # noqa: E501
        :rtype: list[CoachContent]
        """
        return self._coach_contents

    @coach_contents.setter
    def coach_contents(self, coach_contents):
        """Sets the coach_contents of this Coach.


        :param coach_contents: The coach_contents of this Coach.  # noqa: E501
        :type: list[CoachContent]
        """

        self._coach_contents = coach_contents

    @property
    def coach_jobs(self):
        """Gets the coach_jobs of this Coach.  # noqa: E501


        :return: The coach_jobs of this Coach.  # noqa: E501
        :rtype: list[CoachJob]
        """
        return self._coach_jobs

    @coach_jobs.setter
    def coach_jobs(self, coach_jobs):
        """Sets the coach_jobs of this Coach.


        :param coach_jobs: The coach_jobs of this Coach.  # noqa: E501
        :type: list[CoachJob]
        """

        self._coach_jobs = coach_jobs

    @property
    def coach_rankings(self):
        """Gets the coach_rankings of this Coach.  # noqa: E501


        :return: The coach_rankings of this Coach.  # noqa: E501
        :rtype: list[CoachRanking]
        """
        return self._coach_rankings

    @coach_rankings.setter
    def coach_rankings(self, coach_rankings):
        """Sets the coach_rankings of this Coach.


        :param coach_rankings: The coach_rankings of this Coach.  # noqa: E501
        :type: list[CoachRanking]
        """

        self._coach_rankings = coach_rankings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Coach, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coach):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

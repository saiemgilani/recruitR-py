# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoachContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'coach_key': 'int',
        'content_key': 'int',
        'text': 'str',
        'deleted': 'bool',
        'linked': 'bool',
        'coach': 'Coach',
        'content': 'Content',
        'tag': 'ITaggable',
        'tag_key': 'int'
    }

    attribute_map = {
        'key': 'key',
        'coach_key': 'coachKey',
        'content_key': 'contentKey',
        'text': 'text',
        'deleted': 'deleted',
        'linked': 'linked',
        'coach': 'coach',
        'content': 'content',
        'tag': 'tag',
        'tag_key': 'tagKey'
    }

    def __init__(self, key=None, coach_key=None, content_key=None, text=None, deleted=None, linked=None, coach=None, content=None, tag=None, tag_key=None):  # noqa: E501
        """CoachContent - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._coach_key = None
        self._content_key = None
        self._text = None
        self._deleted = None
        self._linked = None
        self._coach = None
        self._content = None
        self._tag = None
        self._tag_key = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if coach_key is not None:
            self.coach_key = coach_key
        self.content_key = content_key
        if text is not None:
            self.text = text
        if deleted is not None:
            self.deleted = deleted
        if linked is not None:
            self.linked = linked
        if coach is not None:
            self.coach = coach
        if content is not None:
            self.content = content
        if tag is not None:
            self.tag = tag
        if tag_key is not None:
            self.tag_key = tag_key

    @property
    def key(self):
        """Gets the key of this CoachContent.  # noqa: E501


        :return: The key of this CoachContent.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CoachContent.


        :param key: The key of this CoachContent.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def coach_key(self):
        """Gets the coach_key of this CoachContent.  # noqa: E501


        :return: The coach_key of this CoachContent.  # noqa: E501
        :rtype: int
        """
        return self._coach_key

    @coach_key.setter
    def coach_key(self, coach_key):
        """Sets the coach_key of this CoachContent.


        :param coach_key: The coach_key of this CoachContent.  # noqa: E501
        :type: int
        """

        self._coach_key = coach_key

    @property
    def content_key(self):
        """Gets the content_key of this CoachContent.  # noqa: E501


        :return: The content_key of this CoachContent.  # noqa: E501
        :rtype: int
        """
        return self._content_key

    @content_key.setter
    def content_key(self, content_key):
        """Sets the content_key of this CoachContent.


        :param content_key: The content_key of this CoachContent.  # noqa: E501
        :type: int
        """
        if content_key is None:
            raise ValueError("Invalid value for `content_key`, must not be `None`")  # noqa: E501

        self._content_key = content_key

    @property
    def text(self):
        """Gets the text of this CoachContent.  # noqa: E501


        :return: The text of this CoachContent.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CoachContent.


        :param text: The text of this CoachContent.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def deleted(self):
        """Gets the deleted of this CoachContent.  # noqa: E501


        :return: The deleted of this CoachContent.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CoachContent.


        :param deleted: The deleted of this CoachContent.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def linked(self):
        """Gets the linked of this CoachContent.  # noqa: E501


        :return: The linked of this CoachContent.  # noqa: E501
        :rtype: bool
        """
        return self._linked

    @linked.setter
    def linked(self, linked):
        """Sets the linked of this CoachContent.


        :param linked: The linked of this CoachContent.  # noqa: E501
        :type: bool
        """

        self._linked = linked

    @property
    def coach(self):
        """Gets the coach of this CoachContent.  # noqa: E501


        :return: The coach of this CoachContent.  # noqa: E501
        :rtype: Coach
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this CoachContent.


        :param coach: The coach of this CoachContent.  # noqa: E501
        :type: Coach
        """

        self._coach = coach

    @property
    def content(self):
        """Gets the content of this CoachContent.  # noqa: E501


        :return: The content of this CoachContent.  # noqa: E501
        :rtype: Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CoachContent.


        :param content: The content of this CoachContent.  # noqa: E501
        :type: Content
        """

        self._content = content

    @property
    def tag(self):
        """Gets the tag of this CoachContent.  # noqa: E501


        :return: The tag of this CoachContent.  # noqa: E501
        :rtype: ITaggable
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CoachContent.


        :param tag: The tag of this CoachContent.  # noqa: E501
        :type: ITaggable
        """

        self._tag = tag

    @property
    def tag_key(self):
        """Gets the tag_key of this CoachContent.  # noqa: E501


        :return: The tag_key of this CoachContent.  # noqa: E501
        :rtype: int
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this CoachContent.


        :param tag_key: The tag_key of this CoachContent.  # noqa: E501
        :type: int
        """

        self._tag_key = tag_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoachContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoachContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

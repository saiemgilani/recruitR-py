# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoachJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'coach_key': 'int',
        'institution_key': 'int',
        'job_title_key': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'salary': 'float',
        'coach': 'Coach',
        'institution': 'Institution',
        'job_title': 'JobTitle'
    }

    attribute_map = {
        'key': 'key',
        'coach_key': 'coachKey',
        'institution_key': 'institutionKey',
        'job_title_key': 'jobTitleKey',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'salary': 'salary',
        'coach': 'coach',
        'institution': 'institution',
        'job_title': 'jobTitle'
    }

    def __init__(self, key=None, coach_key=None, institution_key=None, job_title_key=None, start_date=None, end_date=None, salary=None, coach=None, institution=None, job_title=None):  # noqa: E501
        """CoachJob - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._coach_key = None
        self._institution_key = None
        self._job_title_key = None
        self._start_date = None
        self._end_date = None
        self._salary = None
        self._coach = None
        self._institution = None
        self._job_title = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if coach_key is not None:
            self.coach_key = coach_key
        if institution_key is not None:
            self.institution_key = institution_key
        if job_title_key is not None:
            self.job_title_key = job_title_key
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if salary is not None:
            self.salary = salary
        if coach is not None:
            self.coach = coach
        if institution is not None:
            self.institution = institution
        if job_title is not None:
            self.job_title = job_title

    @property
    def key(self):
        """Gets the key of this CoachJob.  # noqa: E501


        :return: The key of this CoachJob.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CoachJob.


        :param key: The key of this CoachJob.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def coach_key(self):
        """Gets the coach_key of this CoachJob.  # noqa: E501


        :return: The coach_key of this CoachJob.  # noqa: E501
        :rtype: int
        """
        return self._coach_key

    @coach_key.setter
    def coach_key(self, coach_key):
        """Sets the coach_key of this CoachJob.


        :param coach_key: The coach_key of this CoachJob.  # noqa: E501
        :type: int
        """

        self._coach_key = coach_key

    @property
    def institution_key(self):
        """Gets the institution_key of this CoachJob.  # noqa: E501


        :return: The institution_key of this CoachJob.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this CoachJob.


        :param institution_key: The institution_key of this CoachJob.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def job_title_key(self):
        """Gets the job_title_key of this CoachJob.  # noqa: E501


        :return: The job_title_key of this CoachJob.  # noqa: E501
        :rtype: int
        """
        return self._job_title_key

    @job_title_key.setter
    def job_title_key(self, job_title_key):
        """Sets the job_title_key of this CoachJob.


        :param job_title_key: The job_title_key of this CoachJob.  # noqa: E501
        :type: int
        """

        self._job_title_key = job_title_key

    @property
    def start_date(self):
        """Gets the start_date of this CoachJob.  # noqa: E501


        :return: The start_date of this CoachJob.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CoachJob.


        :param start_date: The start_date of this CoachJob.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CoachJob.  # noqa: E501


        :return: The end_date of this CoachJob.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CoachJob.


        :param end_date: The end_date of this CoachJob.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def salary(self):
        """Gets the salary of this CoachJob.  # noqa: E501


        :return: The salary of this CoachJob.  # noqa: E501
        :rtype: float
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this CoachJob.


        :param salary: The salary of this CoachJob.  # noqa: E501
        :type: float
        """

        self._salary = salary

    @property
    def coach(self):
        """Gets the coach of this CoachJob.  # noqa: E501


        :return: The coach of this CoachJob.  # noqa: E501
        :rtype: Coach
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this CoachJob.


        :param coach: The coach of this CoachJob.  # noqa: E501
        :type: Coach
        """

        self._coach = coach

    @property
    def institution(self):
        """Gets the institution of this CoachJob.  # noqa: E501


        :return: The institution of this CoachJob.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this CoachJob.


        :param institution: The institution of this CoachJob.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def job_title(self):
        """Gets the job_title of this CoachJob.  # noqa: E501


        :return: The job_title of this CoachJob.  # noqa: E501
        :rtype: JobTitle
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CoachJob.


        :param job_title: The job_title of this CoachJob.  # noqa: E501
        :type: JobTitle
        """

        self._job_title = job_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoachJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoachJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoachRanking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'coach_key': 'int',
        'ranking_key': 'int',
        'institution_key': 'int',
        'conference_key': 'int',
        'recruitment_key': 'int',
        'rating': 'int',
        'average_composite_rating': 'float',
        'composite_rating': 'float',
        'overall_rank': 'int',
        'division_rank': 'int',
        'conference_rank': 'int',
        'coach': 'Coach',
        'ranking': 'RankingCoach'
    }

    attribute_map = {
        'key': 'key',
        'coach_key': 'coachKey',
        'ranking_key': 'rankingKey',
        'institution_key': 'institutionKey',
        'conference_key': 'conferenceKey',
        'recruitment_key': 'recruitmentKey',
        'rating': 'rating',
        'average_composite_rating': 'averageCompositeRating',
        'composite_rating': 'compositeRating',
        'overall_rank': 'overallRank',
        'division_rank': 'divisionRank',
        'conference_rank': 'conferenceRank',
        'coach': 'coach',
        'ranking': 'ranking'
    }

    def __init__(self, key=None, coach_key=None, ranking_key=None, institution_key=None, conference_key=None, recruitment_key=None, rating=None, average_composite_rating=None, composite_rating=None, overall_rank=None, division_rank=None, conference_rank=None, coach=None, ranking=None):  # noqa: E501
        """CoachRanking - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._coach_key = None
        self._ranking_key = None
        self._institution_key = None
        self._conference_key = None
        self._recruitment_key = None
        self._rating = None
        self._average_composite_rating = None
        self._composite_rating = None
        self._overall_rank = None
        self._division_rank = None
        self._conference_rank = None
        self._coach = None
        self._ranking = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if coach_key is not None:
            self.coach_key = coach_key
        if ranking_key is not None:
            self.ranking_key = ranking_key
        if institution_key is not None:
            self.institution_key = institution_key
        if conference_key is not None:
            self.conference_key = conference_key
        if recruitment_key is not None:
            self.recruitment_key = recruitment_key
        if rating is not None:
            self.rating = rating
        if average_composite_rating is not None:
            self.average_composite_rating = average_composite_rating
        if composite_rating is not None:
            self.composite_rating = composite_rating
        if overall_rank is not None:
            self.overall_rank = overall_rank
        if division_rank is not None:
            self.division_rank = division_rank
        if conference_rank is not None:
            self.conference_rank = conference_rank
        if coach is not None:
            self.coach = coach
        if ranking is not None:
            self.ranking = ranking

    @property
    def key(self):
        """Gets the key of this CoachRanking.  # noqa: E501


        :return: The key of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CoachRanking.


        :param key: The key of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def coach_key(self):
        """Gets the coach_key of this CoachRanking.  # noqa: E501


        :return: The coach_key of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._coach_key

    @coach_key.setter
    def coach_key(self, coach_key):
        """Sets the coach_key of this CoachRanking.


        :param coach_key: The coach_key of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._coach_key = coach_key

    @property
    def ranking_key(self):
        """Gets the ranking_key of this CoachRanking.  # noqa: E501


        :return: The ranking_key of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._ranking_key

    @ranking_key.setter
    def ranking_key(self, ranking_key):
        """Sets the ranking_key of this CoachRanking.


        :param ranking_key: The ranking_key of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._ranking_key = ranking_key

    @property
    def institution_key(self):
        """Gets the institution_key of this CoachRanking.  # noqa: E501


        :return: The institution_key of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this CoachRanking.


        :param institution_key: The institution_key of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def conference_key(self):
        """Gets the conference_key of this CoachRanking.  # noqa: E501


        :return: The conference_key of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._conference_key

    @conference_key.setter
    def conference_key(self, conference_key):
        """Sets the conference_key of this CoachRanking.


        :param conference_key: The conference_key of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._conference_key = conference_key

    @property
    def recruitment_key(self):
        """Gets the recruitment_key of this CoachRanking.  # noqa: E501


        :return: The recruitment_key of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._recruitment_key

    @recruitment_key.setter
    def recruitment_key(self, recruitment_key):
        """Sets the recruitment_key of this CoachRanking.


        :param recruitment_key: The recruitment_key of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._recruitment_key = recruitment_key

    @property
    def rating(self):
        """Gets the rating of this CoachRanking.  # noqa: E501


        :return: The rating of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CoachRanking.


        :param rating: The rating of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def average_composite_rating(self):
        """Gets the average_composite_rating of this CoachRanking.  # noqa: E501


        :return: The average_composite_rating of this CoachRanking.  # noqa: E501
        :rtype: float
        """
        return self._average_composite_rating

    @average_composite_rating.setter
    def average_composite_rating(self, average_composite_rating):
        """Sets the average_composite_rating of this CoachRanking.


        :param average_composite_rating: The average_composite_rating of this CoachRanking.  # noqa: E501
        :type: float
        """

        self._average_composite_rating = average_composite_rating

    @property
    def composite_rating(self):
        """Gets the composite_rating of this CoachRanking.  # noqa: E501


        :return: The composite_rating of this CoachRanking.  # noqa: E501
        :rtype: float
        """
        return self._composite_rating

    @composite_rating.setter
    def composite_rating(self, composite_rating):
        """Sets the composite_rating of this CoachRanking.


        :param composite_rating: The composite_rating of this CoachRanking.  # noqa: E501
        :type: float
        """

        self._composite_rating = composite_rating

    @property
    def overall_rank(self):
        """Gets the overall_rank of this CoachRanking.  # noqa: E501


        :return: The overall_rank of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._overall_rank

    @overall_rank.setter
    def overall_rank(self, overall_rank):
        """Sets the overall_rank of this CoachRanking.


        :param overall_rank: The overall_rank of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._overall_rank = overall_rank

    @property
    def division_rank(self):
        """Gets the division_rank of this CoachRanking.  # noqa: E501


        :return: The division_rank of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._division_rank

    @division_rank.setter
    def division_rank(self, division_rank):
        """Sets the division_rank of this CoachRanking.


        :param division_rank: The division_rank of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._division_rank = division_rank

    @property
    def conference_rank(self):
        """Gets the conference_rank of this CoachRanking.  # noqa: E501


        :return: The conference_rank of this CoachRanking.  # noqa: E501
        :rtype: int
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this CoachRanking.


        :param conference_rank: The conference_rank of this CoachRanking.  # noqa: E501
        :type: int
        """

        self._conference_rank = conference_rank

    @property
    def coach(self):
        """Gets the coach of this CoachRanking.  # noqa: E501


        :return: The coach of this CoachRanking.  # noqa: E501
        :rtype: Coach
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this CoachRanking.


        :param coach: The coach of this CoachRanking.  # noqa: E501
        :type: Coach
        """

        self._coach = coach

    @property
    def ranking(self):
        """Gets the ranking of this CoachRanking.  # noqa: E501


        :return: The ranking of this CoachRanking.  # noqa: E501
        :rtype: RankingCoach
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this CoachRanking.


        :param ranking: The ranking of this CoachRanking.  # noqa: E501
        :type: RankingCoach
        """

        self._ranking = ranking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoachRanking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoachRanking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

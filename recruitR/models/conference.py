# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Conference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'league_key': 'int',
        'institution_key': 'int',
        'is_fly_outable': 'bool',
        'standings_url': 'str',
        'power_five': 'bool',
        'team_conferences': 'list[TeamConference]',
        'league_conferences': 'list[LeagueConference]',
        'institution_rankings': 'list[InstitutionRanking]',
        'current_league_conference': 'LeagueConference'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'league_key': 'leagueKey',
        'institution_key': 'institutionKey',
        'is_fly_outable': 'isFlyOutable',
        'standings_url': 'standingsUrl',
        'power_five': 'powerFive',
        'team_conferences': 'teamConferences',
        'league_conferences': 'leagueConferences',
        'institution_rankings': 'institutionRankings',
        'current_league_conference': 'currentLeagueConference'
    }

    def __init__(self, key=None, name=None, abbreviation=None, league_key=None, institution_key=None, is_fly_outable=None, standings_url=None, power_five=None, team_conferences=None, league_conferences=None, institution_rankings=None, current_league_conference=None):  # noqa: E501
        """Conference - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._abbreviation = None
        self._league_key = None
        self._institution_key = None
        self._is_fly_outable = None
        self._standings_url = None
        self._power_five = None
        self._team_conferences = None
        self._league_conferences = None
        self._institution_rankings = None
        self._current_league_conference = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if league_key is not None:
            self.league_key = league_key
        if institution_key is not None:
            self.institution_key = institution_key
        if is_fly_outable is not None:
            self.is_fly_outable = is_fly_outable
        if standings_url is not None:
            self.standings_url = standings_url
        if power_five is not None:
            self.power_five = power_five
        if team_conferences is not None:
            self.team_conferences = team_conferences
        if league_conferences is not None:
            self.league_conferences = league_conferences
        if institution_rankings is not None:
            self.institution_rankings = institution_rankings
        if current_league_conference is not None:
            self.current_league_conference = current_league_conference

    @property
    def key(self):
        """Gets the key of this Conference.  # noqa: E501


        :return: The key of this Conference.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Conference.


        :param key: The key of this Conference.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Conference.  # noqa: E501


        :return: The name of this Conference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Conference.


        :param name: The name of this Conference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Conference.  # noqa: E501


        :return: The abbreviation of this Conference.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Conference.


        :param abbreviation: The abbreviation of this Conference.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def league_key(self):
        """Gets the league_key of this Conference.  # noqa: E501


        :return: The league_key of this Conference.  # noqa: E501
        :rtype: int
        """
        return self._league_key

    @league_key.setter
    def league_key(self, league_key):
        """Sets the league_key of this Conference.


        :param league_key: The league_key of this Conference.  # noqa: E501
        :type: int
        """

        self._league_key = league_key

    @property
    def institution_key(self):
        """Gets the institution_key of this Conference.  # noqa: E501


        :return: The institution_key of this Conference.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this Conference.


        :param institution_key: The institution_key of this Conference.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def is_fly_outable(self):
        """Gets the is_fly_outable of this Conference.  # noqa: E501


        :return: The is_fly_outable of this Conference.  # noqa: E501
        :rtype: bool
        """
        return self._is_fly_outable

    @is_fly_outable.setter
    def is_fly_outable(self, is_fly_outable):
        """Sets the is_fly_outable of this Conference.


        :param is_fly_outable: The is_fly_outable of this Conference.  # noqa: E501
        :type: bool
        """

        self._is_fly_outable = is_fly_outable

    @property
    def standings_url(self):
        """Gets the standings_url of this Conference.  # noqa: E501


        :return: The standings_url of this Conference.  # noqa: E501
        :rtype: str
        """
        return self._standings_url

    @standings_url.setter
    def standings_url(self, standings_url):
        """Sets the standings_url of this Conference.


        :param standings_url: The standings_url of this Conference.  # noqa: E501
        :type: str
        """

        self._standings_url = standings_url

    @property
    def power_five(self):
        """Gets the power_five of this Conference.  # noqa: E501


        :return: The power_five of this Conference.  # noqa: E501
        :rtype: bool
        """
        return self._power_five

    @power_five.setter
    def power_five(self, power_five):
        """Sets the power_five of this Conference.


        :param power_five: The power_five of this Conference.  # noqa: E501
        :type: bool
        """

        self._power_five = power_five

    @property
    def team_conferences(self):
        """Gets the team_conferences of this Conference.  # noqa: E501


        :return: The team_conferences of this Conference.  # noqa: E501
        :rtype: list[TeamConference]
        """
        return self._team_conferences

    @team_conferences.setter
    def team_conferences(self, team_conferences):
        """Sets the team_conferences of this Conference.


        :param team_conferences: The team_conferences of this Conference.  # noqa: E501
        :type: list[TeamConference]
        """

        self._team_conferences = team_conferences

    @property
    def league_conferences(self):
        """Gets the league_conferences of this Conference.  # noqa: E501


        :return: The league_conferences of this Conference.  # noqa: E501
        :rtype: list[LeagueConference]
        """
        return self._league_conferences

    @league_conferences.setter
    def league_conferences(self, league_conferences):
        """Sets the league_conferences of this Conference.


        :param league_conferences: The league_conferences of this Conference.  # noqa: E501
        :type: list[LeagueConference]
        """

        self._league_conferences = league_conferences

    @property
    def institution_rankings(self):
        """Gets the institution_rankings of this Conference.  # noqa: E501


        :return: The institution_rankings of this Conference.  # noqa: E501
        :rtype: list[InstitutionRanking]
        """
        return self._institution_rankings

    @institution_rankings.setter
    def institution_rankings(self, institution_rankings):
        """Sets the institution_rankings of this Conference.


        :param institution_rankings: The institution_rankings of this Conference.  # noqa: E501
        :type: list[InstitutionRanking]
        """

        self._institution_rankings = institution_rankings

    @property
    def current_league_conference(self):
        """Gets the current_league_conference of this Conference.  # noqa: E501


        :return: The current_league_conference of this Conference.  # noqa: E501
        :rtype: LeagueConference
        """
        return self._current_league_conference

    @current_league_conference.setter
    def current_league_conference(self, current_league_conference):
        """Sets the current_league_conference of this Conference.


        :param current_league_conference: The current_league_conference of this Conference.  # noqa: E501
        :type: LeagueConference
        """

        self._current_league_conference = current_league_conference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Conference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CouponCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'code': 'str',
        'campaign_key': 'int',
        'user_key': 'int',
        'used_count': 'int',
        'user': 'User'
    }

    attribute_map = {
        'key': 'key',
        'code': 'code',
        'campaign_key': 'campaignKey',
        'user_key': 'userKey',
        'used_count': 'usedCount',
        'user': 'user'
    }

    def __init__(self, key=None, code=None, campaign_key=None, user_key=None, used_count=None, user=None):  # noqa: E501
        """CouponCode - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._code = None
        self._campaign_key = None
        self._user_key = None
        self._used_count = None
        self._user = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if code is not None:
            self.code = code
        if campaign_key is not None:
            self.campaign_key = campaign_key
        if user_key is not None:
            self.user_key = user_key
        if used_count is not None:
            self.used_count = used_count
        if user is not None:
            self.user = user

    @property
    def key(self):
        """Gets the key of this CouponCode.  # noqa: E501


        :return: The key of this CouponCode.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CouponCode.


        :param key: The key of this CouponCode.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def code(self):
        """Gets the code of this CouponCode.  # noqa: E501


        :return: The code of this CouponCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CouponCode.


        :param code: The code of this CouponCode.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def campaign_key(self):
        """Gets the campaign_key of this CouponCode.  # noqa: E501


        :return: The campaign_key of this CouponCode.  # noqa: E501
        :rtype: int
        """
        return self._campaign_key

    @campaign_key.setter
    def campaign_key(self, campaign_key):
        """Sets the campaign_key of this CouponCode.


        :param campaign_key: The campaign_key of this CouponCode.  # noqa: E501
        :type: int
        """

        self._campaign_key = campaign_key

    @property
    def user_key(self):
        """Gets the user_key of this CouponCode.  # noqa: E501


        :return: The user_key of this CouponCode.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this CouponCode.


        :param user_key: The user_key of this CouponCode.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def used_count(self):
        """Gets the used_count of this CouponCode.  # noqa: E501


        :return: The used_count of this CouponCode.  # noqa: E501
        :rtype: int
        """
        return self._used_count

    @used_count.setter
    def used_count(self, used_count):
        """Sets the used_count of this CouponCode.


        :param used_count: The used_count of this CouponCode.  # noqa: E501
        :type: int
        """

        self._used_count = used_count

    @property
    def user(self):
        """Gets the user of this CouponCode.  # noqa: E501


        :return: The user of this CouponCode.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CouponCode.


        :param user: The user of this CouponCode.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CouponCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

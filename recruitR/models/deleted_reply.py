# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeletedReply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'body': 'str',
        '_date': 'datetime',
        'topic_key': 'int',
        'author_key': 'int',
        'author': 'User',
        'topic': 'Content'
    }

    attribute_map = {
        'key': 'key',
        'body': 'body',
        '_date': 'date',
        'topic_key': 'topicKey',
        'author_key': 'authorKey',
        'author': 'author',
        'topic': 'topic'
    }

    def __init__(self, key=None, body=None, _date=None, topic_key=None, author_key=None, author=None, topic=None):  # noqa: E501
        """DeletedReply - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._body = None
        self.__date = None
        self._topic_key = None
        self._author_key = None
        self._author = None
        self._topic = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if body is not None:
            self.body = body
        if _date is not None:
            self._date = _date
        if topic_key is not None:
            self.topic_key = topic_key
        if author_key is not None:
            self.author_key = author_key
        if author is not None:
            self.author = author
        if topic is not None:
            self.topic = topic

    @property
    def key(self):
        """Gets the key of this DeletedReply.  # noqa: E501


        :return: The key of this DeletedReply.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DeletedReply.


        :param key: The key of this DeletedReply.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def body(self):
        """Gets the body of this DeletedReply.  # noqa: E501


        :return: The body of this DeletedReply.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this DeletedReply.


        :param body: The body of this DeletedReply.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def _date(self):
        """Gets the _date of this DeletedReply.  # noqa: E501


        :return: The _date of this DeletedReply.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DeletedReply.


        :param _date: The _date of this DeletedReply.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def topic_key(self):
        """Gets the topic_key of this DeletedReply.  # noqa: E501


        :return: The topic_key of this DeletedReply.  # noqa: E501
        :rtype: int
        """
        return self._topic_key

    @topic_key.setter
    def topic_key(self, topic_key):
        """Sets the topic_key of this DeletedReply.


        :param topic_key: The topic_key of this DeletedReply.  # noqa: E501
        :type: int
        """

        self._topic_key = topic_key

    @property
    def author_key(self):
        """Gets the author_key of this DeletedReply.  # noqa: E501


        :return: The author_key of this DeletedReply.  # noqa: E501
        :rtype: int
        """
        return self._author_key

    @author_key.setter
    def author_key(self, author_key):
        """Sets the author_key of this DeletedReply.


        :param author_key: The author_key of this DeletedReply.  # noqa: E501
        :type: int
        """

        self._author_key = author_key

    @property
    def author(self):
        """Gets the author of this DeletedReply.  # noqa: E501


        :return: The author of this DeletedReply.  # noqa: E501
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this DeletedReply.


        :param author: The author of this DeletedReply.  # noqa: E501
        :type: User
        """

        self._author = author

    @property
    def topic(self):
        """Gets the topic of this DeletedReply.  # noqa: E501


        :return: The topic of this DeletedReply.  # noqa: E501
        :rtype: Content
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this DeletedReply.


        :param topic: The topic of this DeletedReply.  # noqa: E501
        :type: Content
        """

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeletedReply, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeletedReply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

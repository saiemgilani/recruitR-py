# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Episode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'id': 'str',
        'create_date': 'datetime',
        'update_date': 'datetime',
        'publish_date': 'datetime',
        'podcast_key': 'int',
        'title': 'str',
        'image': 'str',
        'summary': 'str',
        'uid': 'str',
        'original_url': 'str',
        'bitrate': 'int',
        'sample_rate': 'int',
        'vbr': 'bool',
        'audio_file_processing': 'bool',
        'podcast_id': 'str',
        'guid': 'str',
        'soundcloud_identifier': 'str',
        'publish_date_timezone': 'str',
        'spotify_identifier': 'str',
        'draft': 'bool',
        'external_id': 'str',
        'published': 'bool',
        'duration': 'float',
        'podcast': 'Podcast'
    }

    attribute_map = {
        'key': 'key',
        'id': 'id',
        'create_date': 'createDate',
        'update_date': 'updateDate',
        'publish_date': 'publishDate',
        'podcast_key': 'podcastKey',
        'title': 'title',
        'image': 'image',
        'summary': 'summary',
        'uid': 'uid',
        'original_url': 'originalUrl',
        'bitrate': 'bitrate',
        'sample_rate': 'sampleRate',
        'vbr': 'vbr',
        'audio_file_processing': 'audioFileProcessing',
        'podcast_id': 'podcastId',
        'guid': 'guid',
        'soundcloud_identifier': 'soundcloudIdentifier',
        'publish_date_timezone': 'publishDateTimezone',
        'spotify_identifier': 'spotifyIdentifier',
        'draft': 'draft',
        'external_id': 'externalId',
        'published': 'published',
        'duration': 'duration',
        'podcast': 'podcast'
    }

    def __init__(self, key=None, id=None, create_date=None, update_date=None, publish_date=None, podcast_key=None, title=None, image=None, summary=None, uid=None, original_url=None, bitrate=None, sample_rate=None, vbr=None, audio_file_processing=None, podcast_id=None, guid=None, soundcloud_identifier=None, publish_date_timezone=None, spotify_identifier=None, draft=None, external_id=None, published=None, duration=None, podcast=None):  # noqa: E501
        """Episode - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._id = None
        self._create_date = None
        self._update_date = None
        self._publish_date = None
        self._podcast_key = None
        self._title = None
        self._image = None
        self._summary = None
        self._uid = None
        self._original_url = None
        self._bitrate = None
        self._sample_rate = None
        self._vbr = None
        self._audio_file_processing = None
        self._podcast_id = None
        self._guid = None
        self._soundcloud_identifier = None
        self._publish_date_timezone = None
        self._spotify_identifier = None
        self._draft = None
        self._external_id = None
        self._published = None
        self._duration = None
        self._podcast = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date
        if publish_date is not None:
            self.publish_date = publish_date
        if podcast_key is not None:
            self.podcast_key = podcast_key
        if title is not None:
            self.title = title
        if image is not None:
            self.image = image
        if summary is not None:
            self.summary = summary
        if uid is not None:
            self.uid = uid
        if original_url is not None:
            self.original_url = original_url
        if bitrate is not None:
            self.bitrate = bitrate
        if sample_rate is not None:
            self.sample_rate = sample_rate
        if vbr is not None:
            self.vbr = vbr
        if audio_file_processing is not None:
            self.audio_file_processing = audio_file_processing
        if podcast_id is not None:
            self.podcast_id = podcast_id
        if guid is not None:
            self.guid = guid
        if soundcloud_identifier is not None:
            self.soundcloud_identifier = soundcloud_identifier
        if publish_date_timezone is not None:
            self.publish_date_timezone = publish_date_timezone
        if spotify_identifier is not None:
            self.spotify_identifier = spotify_identifier
        if draft is not None:
            self.draft = draft
        if external_id is not None:
            self.external_id = external_id
        if published is not None:
            self.published = published
        if duration is not None:
            self.duration = duration
        if podcast is not None:
            self.podcast = podcast

    @property
    def key(self):
        """Gets the key of this Episode.  # noqa: E501


        :return: The key of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Episode.


        :param key: The key of this Episode.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this Episode.  # noqa: E501


        :return: The id of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Episode.


        :param id: The id of this Episode.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this Episode.  # noqa: E501


        :return: The create_date of this Episode.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Episode.


        :param create_date: The create_date of this Episode.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this Episode.  # noqa: E501


        :return: The update_date of this Episode.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Episode.


        :param update_date: The update_date of this Episode.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def publish_date(self):
        """Gets the publish_date of this Episode.  # noqa: E501


        :return: The publish_date of this Episode.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this Episode.


        :param publish_date: The publish_date of this Episode.  # noqa: E501
        :type: datetime
        """

        self._publish_date = publish_date

    @property
    def podcast_key(self):
        """Gets the podcast_key of this Episode.  # noqa: E501


        :return: The podcast_key of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._podcast_key

    @podcast_key.setter
    def podcast_key(self, podcast_key):
        """Sets the podcast_key of this Episode.


        :param podcast_key: The podcast_key of this Episode.  # noqa: E501
        :type: int
        """

        self._podcast_key = podcast_key

    @property
    def title(self):
        """Gets the title of this Episode.  # noqa: E501


        :return: The title of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Episode.


        :param title: The title of this Episode.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def image(self):
        """Gets the image of this Episode.  # noqa: E501


        :return: The image of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Episode.


        :param image: The image of this Episode.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def summary(self):
        """Gets the summary of this Episode.  # noqa: E501


        :return: The summary of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Episode.


        :param summary: The summary of this Episode.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def uid(self):
        """Gets the uid of this Episode.  # noqa: E501


        :return: The uid of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Episode.


        :param uid: The uid of this Episode.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def original_url(self):
        """Gets the original_url of this Episode.  # noqa: E501


        :return: The original_url of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this Episode.


        :param original_url: The original_url of this Episode.  # noqa: E501
        :type: str
        """

        self._original_url = original_url

    @property
    def bitrate(self):
        """Gets the bitrate of this Episode.  # noqa: E501


        :return: The bitrate of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this Episode.


        :param bitrate: The bitrate of this Episode.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def sample_rate(self):
        """Gets the sample_rate of this Episode.  # noqa: E501


        :return: The sample_rate of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this Episode.


        :param sample_rate: The sample_rate of this Episode.  # noqa: E501
        :type: int
        """

        self._sample_rate = sample_rate

    @property
    def vbr(self):
        """Gets the vbr of this Episode.  # noqa: E501


        :return: The vbr of this Episode.  # noqa: E501
        :rtype: bool
        """
        return self._vbr

    @vbr.setter
    def vbr(self, vbr):
        """Sets the vbr of this Episode.


        :param vbr: The vbr of this Episode.  # noqa: E501
        :type: bool
        """

        self._vbr = vbr

    @property
    def audio_file_processing(self):
        """Gets the audio_file_processing of this Episode.  # noqa: E501


        :return: The audio_file_processing of this Episode.  # noqa: E501
        :rtype: bool
        """
        return self._audio_file_processing

    @audio_file_processing.setter
    def audio_file_processing(self, audio_file_processing):
        """Sets the audio_file_processing of this Episode.


        :param audio_file_processing: The audio_file_processing of this Episode.  # noqa: E501
        :type: bool
        """

        self._audio_file_processing = audio_file_processing

    @property
    def podcast_id(self):
        """Gets the podcast_id of this Episode.  # noqa: E501


        :return: The podcast_id of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._podcast_id

    @podcast_id.setter
    def podcast_id(self, podcast_id):
        """Sets the podcast_id of this Episode.


        :param podcast_id: The podcast_id of this Episode.  # noqa: E501
        :type: str
        """

        self._podcast_id = podcast_id

    @property
    def guid(self):
        """Gets the guid of this Episode.  # noqa: E501


        :return: The guid of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Episode.


        :param guid: The guid of this Episode.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def soundcloud_identifier(self):
        """Gets the soundcloud_identifier of this Episode.  # noqa: E501


        :return: The soundcloud_identifier of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._soundcloud_identifier

    @soundcloud_identifier.setter
    def soundcloud_identifier(self, soundcloud_identifier):
        """Sets the soundcloud_identifier of this Episode.


        :param soundcloud_identifier: The soundcloud_identifier of this Episode.  # noqa: E501
        :type: str
        """

        self._soundcloud_identifier = soundcloud_identifier

    @property
    def publish_date_timezone(self):
        """Gets the publish_date_timezone of this Episode.  # noqa: E501


        :return: The publish_date_timezone of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._publish_date_timezone

    @publish_date_timezone.setter
    def publish_date_timezone(self, publish_date_timezone):
        """Sets the publish_date_timezone of this Episode.


        :param publish_date_timezone: The publish_date_timezone of this Episode.  # noqa: E501
        :type: str
        """

        self._publish_date_timezone = publish_date_timezone

    @property
    def spotify_identifier(self):
        """Gets the spotify_identifier of this Episode.  # noqa: E501


        :return: The spotify_identifier of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._spotify_identifier

    @spotify_identifier.setter
    def spotify_identifier(self, spotify_identifier):
        """Sets the spotify_identifier of this Episode.


        :param spotify_identifier: The spotify_identifier of this Episode.  # noqa: E501
        :type: str
        """

        self._spotify_identifier = spotify_identifier

    @property
    def draft(self):
        """Gets the draft of this Episode.  # noqa: E501


        :return: The draft of this Episode.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Episode.


        :param draft: The draft of this Episode.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def external_id(self):
        """Gets the external_id of this Episode.  # noqa: E501


        :return: The external_id of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Episode.


        :param external_id: The external_id of this Episode.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def published(self):
        """Gets the published of this Episode.  # noqa: E501


        :return: The published of this Episode.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Episode.


        :param published: The published of this Episode.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def duration(self):
        """Gets the duration of this Episode.  # noqa: E501


        :return: The duration of this Episode.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Episode.


        :param duration: The duration of this Episode.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def podcast(self):
        """Gets the podcast of this Episode.  # noqa: E501


        :return: The podcast of this Episode.  # noqa: E501
        :rtype: Podcast
        """
        return self._podcast

    @podcast.setter
    def podcast(self, podcast):
        """Sets the podcast of this Episode.


        :param podcast: The podcast of this Episode.  # noqa: E501
        :type: Podcast
        """

        self._podcast = podcast

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Episode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Episode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

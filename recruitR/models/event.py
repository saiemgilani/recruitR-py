# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'location': 'str',
        'channel': 'str',
        'event_group_key': 'int',
        'event_type_key': 'int',
        '_date': 'datetime',
        'asset_key': 'int',
        'primary_color': 'str',
        'cbs_annotation': 'str',
        'default_asset': 'Asset',
        'event_assets': 'list[EventAsset]',
        'event_contents': 'list[EventContent]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'location': 'location',
        'channel': 'channel',
        'event_group_key': 'eventGroupKey',
        'event_type_key': 'eventTypeKey',
        '_date': 'date',
        'asset_key': 'assetKey',
        'primary_color': 'primaryColor',
        'cbs_annotation': 'cbsAnnotation',
        'default_asset': 'defaultAsset',
        'event_assets': 'eventAssets',
        'event_contents': 'eventContents'
    }

    def __init__(self, key=None, name=None, location=None, channel=None, event_group_key=None, event_type_key=None, _date=None, asset_key=None, primary_color=None, cbs_annotation=None, default_asset=None, event_assets=None, event_contents=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._location = None
        self._channel = None
        self._event_group_key = None
        self._event_type_key = None
        self.__date = None
        self._asset_key = None
        self._primary_color = None
        self._cbs_annotation = None
        self._default_asset = None
        self._event_assets = None
        self._event_contents = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self.name = name
        if location is not None:
            self.location = location
        if channel is not None:
            self.channel = channel
        if event_group_key is not None:
            self.event_group_key = event_group_key
        if event_type_key is not None:
            self.event_type_key = event_type_key
        if _date is not None:
            self._date = _date
        if asset_key is not None:
            self.asset_key = asset_key
        if primary_color is not None:
            self.primary_color = primary_color
        if cbs_annotation is not None:
            self.cbs_annotation = cbs_annotation
        if default_asset is not None:
            self.default_asset = default_asset
        if event_assets is not None:
            self.event_assets = event_assets
        if event_contents is not None:
            self.event_contents = event_contents

    @property
    def key(self):
        """Gets the key of this Event.  # noqa: E501


        :return: The key of this Event.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Event.


        :param key: The key of this Event.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501


        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this Event.  # noqa: E501


        :return: The location of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.


        :param location: The location of this Event.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def channel(self):
        """Gets the channel of this Event.  # noqa: E501


        :return: The channel of this Event.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Event.


        :param channel: The channel of this Event.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def event_group_key(self):
        """Gets the event_group_key of this Event.  # noqa: E501


        :return: The event_group_key of this Event.  # noqa: E501
        :rtype: int
        """
        return self._event_group_key

    @event_group_key.setter
    def event_group_key(self, event_group_key):
        """Sets the event_group_key of this Event.


        :param event_group_key: The event_group_key of this Event.  # noqa: E501
        :type: int
        """

        self._event_group_key = event_group_key

    @property
    def event_type_key(self):
        """Gets the event_type_key of this Event.  # noqa: E501


        :return: The event_type_key of this Event.  # noqa: E501
        :rtype: int
        """
        return self._event_type_key

    @event_type_key.setter
    def event_type_key(self, event_type_key):
        """Sets the event_type_key of this Event.


        :param event_type_key: The event_type_key of this Event.  # noqa: E501
        :type: int
        """

        self._event_type_key = event_type_key

    @property
    def _date(self):
        """Gets the _date of this Event.  # noqa: E501


        :return: The _date of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Event.


        :param _date: The _date of this Event.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def asset_key(self):
        """Gets the asset_key of this Event.  # noqa: E501


        :return: The asset_key of this Event.  # noqa: E501
        :rtype: int
        """
        return self._asset_key

    @asset_key.setter
    def asset_key(self, asset_key):
        """Sets the asset_key of this Event.


        :param asset_key: The asset_key of this Event.  # noqa: E501
        :type: int
        """

        self._asset_key = asset_key

    @property
    def primary_color(self):
        """Gets the primary_color of this Event.  # noqa: E501


        :return: The primary_color of this Event.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this Event.


        :param primary_color: The primary_color of this Event.  # noqa: E501
        :type: str
        """

        self._primary_color = primary_color

    @property
    def cbs_annotation(self):
        """Gets the cbs_annotation of this Event.  # noqa: E501


        :return: The cbs_annotation of this Event.  # noqa: E501
        :rtype: str
        """
        return self._cbs_annotation

    @cbs_annotation.setter
    def cbs_annotation(self, cbs_annotation):
        """Sets the cbs_annotation of this Event.


        :param cbs_annotation: The cbs_annotation of this Event.  # noqa: E501
        :type: str
        """

        self._cbs_annotation = cbs_annotation

    @property
    def default_asset(self):
        """Gets the default_asset of this Event.  # noqa: E501


        :return: The default_asset of this Event.  # noqa: E501
        :rtype: Asset
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this Event.


        :param default_asset: The default_asset of this Event.  # noqa: E501
        :type: Asset
        """

        self._default_asset = default_asset

    @property
    def event_assets(self):
        """Gets the event_assets of this Event.  # noqa: E501


        :return: The event_assets of this Event.  # noqa: E501
        :rtype: list[EventAsset]
        """
        return self._event_assets

    @event_assets.setter
    def event_assets(self, event_assets):
        """Sets the event_assets of this Event.


        :param event_assets: The event_assets of this Event.  # noqa: E501
        :type: list[EventAsset]
        """

        self._event_assets = event_assets

    @property
    def event_contents(self):
        """Gets the event_contents of this Event.  # noqa: E501


        :return: The event_contents of this Event.  # noqa: E501
        :rtype: list[EventContent]
        """
        return self._event_contents

    @event_contents.setter
    def event_contents(self, event_contents):
        """Sets the event_contents of this Event.


        :param event_contents: The event_contents of this Event.  # noqa: E501
        :type: list[EventContent]
        """

        self._event_contents = event_contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

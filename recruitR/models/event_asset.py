# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventAsset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'event_key': 'int',
        'event': 'Event',
        'asset_key': 'int',
        'asset': 'Asset',
        'tag': 'ITaggable',
        'tag_key': 'int'
    }

    attribute_map = {
        'key': 'key',
        'event_key': 'eventKey',
        'event': 'event',
        'asset_key': 'assetKey',
        'asset': 'asset',
        'tag': 'tag',
        'tag_key': 'tagKey'
    }

    def __init__(self, key=None, event_key=None, event=None, asset_key=None, asset=None, tag=None, tag_key=None):  # noqa: E501
        """EventAsset - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._event_key = None
        self._event = None
        self._asset_key = None
        self._asset = None
        self._tag = None
        self._tag_key = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self.event_key = event_key
        if event is not None:
            self.event = event
        self.asset_key = asset_key
        if asset is not None:
            self.asset = asset
        if tag is not None:
            self.tag = tag
        if tag_key is not None:
            self.tag_key = tag_key

    @property
    def key(self):
        """Gets the key of this EventAsset.  # noqa: E501


        :return: The key of this EventAsset.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EventAsset.


        :param key: The key of this EventAsset.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def event_key(self):
        """Gets the event_key of this EventAsset.  # noqa: E501


        :return: The event_key of this EventAsset.  # noqa: E501
        :rtype: int
        """
        return self._event_key

    @event_key.setter
    def event_key(self, event_key):
        """Sets the event_key of this EventAsset.


        :param event_key: The event_key of this EventAsset.  # noqa: E501
        :type: int
        """
        if event_key is None:
            raise ValueError("Invalid value for `event_key`, must not be `None`")  # noqa: E501

        self._event_key = event_key

    @property
    def event(self):
        """Gets the event of this EventAsset.  # noqa: E501


        :return: The event of this EventAsset.  # noqa: E501
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventAsset.


        :param event: The event of this EventAsset.  # noqa: E501
        :type: Event
        """

        self._event = event

    @property
    def asset_key(self):
        """Gets the asset_key of this EventAsset.  # noqa: E501


        :return: The asset_key of this EventAsset.  # noqa: E501
        :rtype: int
        """
        return self._asset_key

    @asset_key.setter
    def asset_key(self, asset_key):
        """Sets the asset_key of this EventAsset.


        :param asset_key: The asset_key of this EventAsset.  # noqa: E501
        :type: int
        """
        if asset_key is None:
            raise ValueError("Invalid value for `asset_key`, must not be `None`")  # noqa: E501

        self._asset_key = asset_key

    @property
    def asset(self):
        """Gets the asset of this EventAsset.  # noqa: E501


        :return: The asset of this EventAsset.  # noqa: E501
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this EventAsset.


        :param asset: The asset of this EventAsset.  # noqa: E501
        :type: Asset
        """

        self._asset = asset

    @property
    def tag(self):
        """Gets the tag of this EventAsset.  # noqa: E501


        :return: The tag of this EventAsset.  # noqa: E501
        :rtype: ITaggable
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this EventAsset.


        :param tag: The tag of this EventAsset.  # noqa: E501
        :type: ITaggable
        """

        self._tag = tag

    @property
    def tag_key(self):
        """Gets the tag_key of this EventAsset.  # noqa: E501


        :return: The tag_key of this EventAsset.  # noqa: E501
        :rtype: int
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this EventAsset.


        :param tag_key: The tag_key of this EventAsset.  # noqa: E501
        :type: int
        """

        self._tag_key = tag_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventAsset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventAsset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

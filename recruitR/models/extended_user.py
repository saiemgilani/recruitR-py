# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'upvotes_received': 'int',
        'downvotes_received': 'int',
        'started_tracking': 'datetime',
        'unread_notifications': 'int',
        'settings': 'int',
        'reg_id': 'str',
        'initial_source': 'str',
        'initial_site_key': 'int',
        'initial_promotion_key': 'int',
        'user': 'User'
    }

    attribute_map = {
        'key': 'key',
        'upvotes_received': 'upvotesReceived',
        'downvotes_received': 'downvotesReceived',
        'started_tracking': 'startedTracking',
        'unread_notifications': 'unreadNotifications',
        'settings': 'settings',
        'reg_id': 'regId',
        'initial_source': 'initialSource',
        'initial_site_key': 'initialSiteKey',
        'initial_promotion_key': 'initialPromotionKey',
        'user': 'user'
    }

    def __init__(self, key=None, upvotes_received=None, downvotes_received=None, started_tracking=None, unread_notifications=None, settings=None, reg_id=None, initial_source=None, initial_site_key=None, initial_promotion_key=None, user=None):  # noqa: E501
        """ExtendedUser - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._upvotes_received = None
        self._downvotes_received = None
        self._started_tracking = None
        self._unread_notifications = None
        self._settings = None
        self._reg_id = None
        self._initial_source = None
        self._initial_site_key = None
        self._initial_promotion_key = None
        self._user = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if upvotes_received is not None:
            self.upvotes_received = upvotes_received
        if downvotes_received is not None:
            self.downvotes_received = downvotes_received
        if started_tracking is not None:
            self.started_tracking = started_tracking
        if unread_notifications is not None:
            self.unread_notifications = unread_notifications
        if settings is not None:
            self.settings = settings
        if reg_id is not None:
            self.reg_id = reg_id
        if initial_source is not None:
            self.initial_source = initial_source
        if initial_site_key is not None:
            self.initial_site_key = initial_site_key
        if initial_promotion_key is not None:
            self.initial_promotion_key = initial_promotion_key
        if user is not None:
            self.user = user

    @property
    def key(self):
        """Gets the key of this ExtendedUser.  # noqa: E501


        :return: The key of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ExtendedUser.


        :param key: The key of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def upvotes_received(self):
        """Gets the upvotes_received of this ExtendedUser.  # noqa: E501


        :return: The upvotes_received of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._upvotes_received

    @upvotes_received.setter
    def upvotes_received(self, upvotes_received):
        """Sets the upvotes_received of this ExtendedUser.


        :param upvotes_received: The upvotes_received of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._upvotes_received = upvotes_received

    @property
    def downvotes_received(self):
        """Gets the downvotes_received of this ExtendedUser.  # noqa: E501


        :return: The downvotes_received of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._downvotes_received

    @downvotes_received.setter
    def downvotes_received(self, downvotes_received):
        """Sets the downvotes_received of this ExtendedUser.


        :param downvotes_received: The downvotes_received of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._downvotes_received = downvotes_received

    @property
    def started_tracking(self):
        """Gets the started_tracking of this ExtendedUser.  # noqa: E501


        :return: The started_tracking of this ExtendedUser.  # noqa: E501
        :rtype: datetime
        """
        return self._started_tracking

    @started_tracking.setter
    def started_tracking(self, started_tracking):
        """Sets the started_tracking of this ExtendedUser.


        :param started_tracking: The started_tracking of this ExtendedUser.  # noqa: E501
        :type: datetime
        """

        self._started_tracking = started_tracking

    @property
    def unread_notifications(self):
        """Gets the unread_notifications of this ExtendedUser.  # noqa: E501


        :return: The unread_notifications of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._unread_notifications

    @unread_notifications.setter
    def unread_notifications(self, unread_notifications):
        """Sets the unread_notifications of this ExtendedUser.


        :param unread_notifications: The unread_notifications of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._unread_notifications = unread_notifications

    @property
    def settings(self):
        """Gets the settings of this ExtendedUser.  # noqa: E501


        :return: The settings of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ExtendedUser.


        :param settings: The settings of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._settings = settings

    @property
    def reg_id(self):
        """Gets the reg_id of this ExtendedUser.  # noqa: E501


        :return: The reg_id of this ExtendedUser.  # noqa: E501
        :rtype: str
        """
        return self._reg_id

    @reg_id.setter
    def reg_id(self, reg_id):
        """Sets the reg_id of this ExtendedUser.


        :param reg_id: The reg_id of this ExtendedUser.  # noqa: E501
        :type: str
        """

        self._reg_id = reg_id

    @property
    def initial_source(self):
        """Gets the initial_source of this ExtendedUser.  # noqa: E501


        :return: The initial_source of this ExtendedUser.  # noqa: E501
        :rtype: str
        """
        return self._initial_source

    @initial_source.setter
    def initial_source(self, initial_source):
        """Sets the initial_source of this ExtendedUser.


        :param initial_source: The initial_source of this ExtendedUser.  # noqa: E501
        :type: str
        """

        self._initial_source = initial_source

    @property
    def initial_site_key(self):
        """Gets the initial_site_key of this ExtendedUser.  # noqa: E501


        :return: The initial_site_key of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._initial_site_key

    @initial_site_key.setter
    def initial_site_key(self, initial_site_key):
        """Sets the initial_site_key of this ExtendedUser.


        :param initial_site_key: The initial_site_key of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._initial_site_key = initial_site_key

    @property
    def initial_promotion_key(self):
        """Gets the initial_promotion_key of this ExtendedUser.  # noqa: E501


        :return: The initial_promotion_key of this ExtendedUser.  # noqa: E501
        :rtype: int
        """
        return self._initial_promotion_key

    @initial_promotion_key.setter
    def initial_promotion_key(self, initial_promotion_key):
        """Sets the initial_promotion_key of this ExtendedUser.


        :param initial_promotion_key: The initial_promotion_key of this ExtendedUser.  # noqa: E501
        :type: int
        """

        self._initial_promotion_key = initial_promotion_key

    @property
    def user(self):
        """Gets the user of this ExtendedUser.  # noqa: E501


        :return: The user of this ExtendedUser.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ExtendedUser.


        :param user: The user of this ExtendedUser.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

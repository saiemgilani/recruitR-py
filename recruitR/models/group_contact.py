# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'contact_key': 'int',
        'contact_group_key': 'int',
        'contact': 'Contact',
        'contact_group': 'ContactGroup'
    }

    attribute_map = {
        'key': 'key',
        'contact_key': 'contactKey',
        'contact_group_key': 'contactGroupKey',
        'contact': 'contact',
        'contact_group': 'contactGroup'
    }

    def __init__(self, key=None, contact_key=None, contact_group_key=None, contact=None, contact_group=None):  # noqa: E501
        """GroupContact - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._contact_key = None
        self._contact_group_key = None
        self._contact = None
        self._contact_group = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if contact_key is not None:
            self.contact_key = contact_key
        if contact_group_key is not None:
            self.contact_group_key = contact_group_key
        if contact is not None:
            self.contact = contact
        if contact_group is not None:
            self.contact_group = contact_group

    @property
    def key(self):
        """Gets the key of this GroupContact.  # noqa: E501


        :return: The key of this GroupContact.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GroupContact.


        :param key: The key of this GroupContact.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def contact_key(self):
        """Gets the contact_key of this GroupContact.  # noqa: E501


        :return: The contact_key of this GroupContact.  # noqa: E501
        :rtype: int
        """
        return self._contact_key

    @contact_key.setter
    def contact_key(self, contact_key):
        """Sets the contact_key of this GroupContact.


        :param contact_key: The contact_key of this GroupContact.  # noqa: E501
        :type: int
        """

        self._contact_key = contact_key

    @property
    def contact_group_key(self):
        """Gets the contact_group_key of this GroupContact.  # noqa: E501


        :return: The contact_group_key of this GroupContact.  # noqa: E501
        :rtype: int
        """
        return self._contact_group_key

    @contact_group_key.setter
    def contact_group_key(self, contact_group_key):
        """Sets the contact_group_key of this GroupContact.


        :param contact_group_key: The contact_group_key of this GroupContact.  # noqa: E501
        :type: int
        """

        self._contact_group_key = contact_group_key

    @property
    def contact(self):
        """Gets the contact of this GroupContact.  # noqa: E501


        :return: The contact of this GroupContact.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this GroupContact.


        :param contact: The contact of this GroupContact.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def contact_group(self):
        """Gets the contact_group of this GroupContact.  # noqa: E501


        :return: The contact_group of this GroupContact.  # noqa: E501
        :rtype: ContactGroup
        """
        return self._contact_group

    @contact_group.setter
    def contact_group(self, contact_group):
        """Sets the contact_group of this GroupContact.


        :param contact_group: The contact_group of this GroupContact.  # noqa: E501
        :type: ContactGroup
        """

        self._contact_group = contact_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

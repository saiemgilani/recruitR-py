# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Institution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'default_asset_key': 'int',
        'alternate_asset_key': 'int',
        'light_asset_key': 'int',
        'name': 'str',
        'mascot': 'str',
        'abbreviation': 'str',
        'address': 'str',
        'rankable': 'bool',
        'type': 'InstitutionType',
        'zip_code_key': 'int',
        'group': 'InstitutionGroup',
        'full_name': 'str',
        'cbs_annotation': 'str',
        'sites': 'list[Site]',
        'recruit_interests': 'list[RecruitInterest]',
        'teams': 'list[Team]',
        'zip_code': 'ZipCode',
        'default_asset': 'Asset',
        'alternate_asset': 'Asset',
        'institution_assets': 'list[InstitutionAsset]',
        'institution_contents': 'list[InstitutionContent]',
        'institution_rankings': 'list[InstitutionRanking]',
        'coach_jobs': 'list[CoachJob]',
        'league_vertical': 'League',
        'light_asset': 'Asset'
    }

    attribute_map = {
        'key': 'key',
        'default_asset_key': 'defaultAssetKey',
        'alternate_asset_key': 'alternateAssetKey',
        'light_asset_key': 'lightAssetKey',
        'name': 'name',
        'mascot': 'mascot',
        'abbreviation': 'abbreviation',
        'address': 'address',
        'rankable': 'rankable',
        'type': 'type',
        'zip_code_key': 'zipCodeKey',
        'group': 'group',
        'full_name': 'fullName',
        'cbs_annotation': 'cbsAnnotation',
        'sites': 'sites',
        'recruit_interests': 'recruitInterests',
        'teams': 'teams',
        'zip_code': 'zipCode',
        'default_asset': 'defaultAsset',
        'alternate_asset': 'alternateAsset',
        'institution_assets': 'institutionAssets',
        'institution_contents': 'institutionContents',
        'institution_rankings': 'institutionRankings',
        'coach_jobs': 'coachJobs',
        'league_vertical': 'leagueVertical',
        'light_asset': 'lightAsset'
    }

    def __init__(self, key=None, default_asset_key=None, alternate_asset_key=None, light_asset_key=None, name=None, mascot=None, abbreviation=None, address=None, rankable=None, type=None, zip_code_key=None, group=None, full_name=None, cbs_annotation=None, sites=None, recruit_interests=None, teams=None, zip_code=None, default_asset=None, alternate_asset=None, institution_assets=None, institution_contents=None, institution_rankings=None, coach_jobs=None, league_vertical=None, light_asset=None):  # noqa: E501
        """Institution - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._default_asset_key = None
        self._alternate_asset_key = None
        self._light_asset_key = None
        self._name = None
        self._mascot = None
        self._abbreviation = None
        self._address = None
        self._rankable = None
        self._type = None
        self._zip_code_key = None
        self._group = None
        self._full_name = None
        self._cbs_annotation = None
        self._sites = None
        self._recruit_interests = None
        self._teams = None
        self._zip_code = None
        self._default_asset = None
        self._alternate_asset = None
        self._institution_assets = None
        self._institution_contents = None
        self._institution_rankings = None
        self._coach_jobs = None
        self._league_vertical = None
        self._light_asset = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if default_asset_key is not None:
            self.default_asset_key = default_asset_key
        if alternate_asset_key is not None:
            self.alternate_asset_key = alternate_asset_key
        if light_asset_key is not None:
            self.light_asset_key = light_asset_key
        if name is not None:
            self.name = name
        if mascot is not None:
            self.mascot = mascot
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if address is not None:
            self.address = address
        if rankable is not None:
            self.rankable = rankable
        if type is not None:
            self.type = type
        if zip_code_key is not None:
            self.zip_code_key = zip_code_key
        if group is not None:
            self.group = group
        if full_name is not None:
            self.full_name = full_name
        if cbs_annotation is not None:
            self.cbs_annotation = cbs_annotation
        if sites is not None:
            self.sites = sites
        if recruit_interests is not None:
            self.recruit_interests = recruit_interests
        if teams is not None:
            self.teams = teams
        if zip_code is not None:
            self.zip_code = zip_code
        if default_asset is not None:
            self.default_asset = default_asset
        if alternate_asset is not None:
            self.alternate_asset = alternate_asset
        if institution_assets is not None:
            self.institution_assets = institution_assets
        if institution_contents is not None:
            self.institution_contents = institution_contents
        if institution_rankings is not None:
            self.institution_rankings = institution_rankings
        if coach_jobs is not None:
            self.coach_jobs = coach_jobs
        if league_vertical is not None:
            self.league_vertical = league_vertical
        if light_asset is not None:
            self.light_asset = light_asset

    @property
    def key(self):
        """Gets the key of this Institution.  # noqa: E501


        :return: The key of this Institution.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Institution.


        :param key: The key of this Institution.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def default_asset_key(self):
        """Gets the default_asset_key of this Institution.  # noqa: E501


        :return: The default_asset_key of this Institution.  # noqa: E501
        :rtype: int
        """
        return self._default_asset_key

    @default_asset_key.setter
    def default_asset_key(self, default_asset_key):
        """Sets the default_asset_key of this Institution.


        :param default_asset_key: The default_asset_key of this Institution.  # noqa: E501
        :type: int
        """

        self._default_asset_key = default_asset_key

    @property
    def alternate_asset_key(self):
        """Gets the alternate_asset_key of this Institution.  # noqa: E501


        :return: The alternate_asset_key of this Institution.  # noqa: E501
        :rtype: int
        """
        return self._alternate_asset_key

    @alternate_asset_key.setter
    def alternate_asset_key(self, alternate_asset_key):
        """Sets the alternate_asset_key of this Institution.


        :param alternate_asset_key: The alternate_asset_key of this Institution.  # noqa: E501
        :type: int
        """

        self._alternate_asset_key = alternate_asset_key

    @property
    def light_asset_key(self):
        """Gets the light_asset_key of this Institution.  # noqa: E501


        :return: The light_asset_key of this Institution.  # noqa: E501
        :rtype: int
        """
        return self._light_asset_key

    @light_asset_key.setter
    def light_asset_key(self, light_asset_key):
        """Sets the light_asset_key of this Institution.


        :param light_asset_key: The light_asset_key of this Institution.  # noqa: E501
        :type: int
        """

        self._light_asset_key = light_asset_key

    @property
    def name(self):
        """Gets the name of this Institution.  # noqa: E501


        :return: The name of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Institution.


        :param name: The name of this Institution.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mascot(self):
        """Gets the mascot of this Institution.  # noqa: E501


        :return: The mascot of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._mascot

    @mascot.setter
    def mascot(self, mascot):
        """Sets the mascot of this Institution.


        :param mascot: The mascot of this Institution.  # noqa: E501
        :type: str
        """

        self._mascot = mascot

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Institution.  # noqa: E501


        :return: The abbreviation of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Institution.


        :param abbreviation: The abbreviation of this Institution.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def address(self):
        """Gets the address of this Institution.  # noqa: E501


        :return: The address of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Institution.


        :param address: The address of this Institution.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def rankable(self):
        """Gets the rankable of this Institution.  # noqa: E501


        :return: The rankable of this Institution.  # noqa: E501
        :rtype: bool
        """
        return self._rankable

    @rankable.setter
    def rankable(self, rankable):
        """Sets the rankable of this Institution.


        :param rankable: The rankable of this Institution.  # noqa: E501
        :type: bool
        """

        self._rankable = rankable

    @property
    def type(self):
        """Gets the type of this Institution.  # noqa: E501


        :return: The type of this Institution.  # noqa: E501
        :rtype: InstitutionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Institution.


        :param type: The type of this Institution.  # noqa: E501
        :type: InstitutionType
        """

        self._type = type

    @property
    def zip_code_key(self):
        """Gets the zip_code_key of this Institution.  # noqa: E501


        :return: The zip_code_key of this Institution.  # noqa: E501
        :rtype: int
        """
        return self._zip_code_key

    @zip_code_key.setter
    def zip_code_key(self, zip_code_key):
        """Sets the zip_code_key of this Institution.


        :param zip_code_key: The zip_code_key of this Institution.  # noqa: E501
        :type: int
        """

        self._zip_code_key = zip_code_key

    @property
    def group(self):
        """Gets the group of this Institution.  # noqa: E501


        :return: The group of this Institution.  # noqa: E501
        :rtype: InstitutionGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Institution.


        :param group: The group of this Institution.  # noqa: E501
        :type: InstitutionGroup
        """

        self._group = group

    @property
    def full_name(self):
        """Gets the full_name of this Institution.  # noqa: E501


        :return: The full_name of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Institution.


        :param full_name: The full_name of this Institution.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def cbs_annotation(self):
        """Gets the cbs_annotation of this Institution.  # noqa: E501


        :return: The cbs_annotation of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._cbs_annotation

    @cbs_annotation.setter
    def cbs_annotation(self, cbs_annotation):
        """Sets the cbs_annotation of this Institution.


        :param cbs_annotation: The cbs_annotation of this Institution.  # noqa: E501
        :type: str
        """

        self._cbs_annotation = cbs_annotation

    @property
    def sites(self):
        """Gets the sites of this Institution.  # noqa: E501


        :return: The sites of this Institution.  # noqa: E501
        :rtype: list[Site]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this Institution.


        :param sites: The sites of this Institution.  # noqa: E501
        :type: list[Site]
        """

        self._sites = sites

    @property
    def recruit_interests(self):
        """Gets the recruit_interests of this Institution.  # noqa: E501


        :return: The recruit_interests of this Institution.  # noqa: E501
        :rtype: list[RecruitInterest]
        """
        return self._recruit_interests

    @recruit_interests.setter
    def recruit_interests(self, recruit_interests):
        """Sets the recruit_interests of this Institution.


        :param recruit_interests: The recruit_interests of this Institution.  # noqa: E501
        :type: list[RecruitInterest]
        """

        self._recruit_interests = recruit_interests

    @property
    def teams(self):
        """Gets the teams of this Institution.  # noqa: E501


        :return: The teams of this Institution.  # noqa: E501
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this Institution.


        :param teams: The teams of this Institution.  # noqa: E501
        :type: list[Team]
        """

        self._teams = teams

    @property
    def zip_code(self):
        """Gets the zip_code of this Institution.  # noqa: E501


        :return: The zip_code of this Institution.  # noqa: E501
        :rtype: ZipCode
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Institution.


        :param zip_code: The zip_code of this Institution.  # noqa: E501
        :type: ZipCode
        """

        self._zip_code = zip_code

    @property
    def default_asset(self):
        """Gets the default_asset of this Institution.  # noqa: E501


        :return: The default_asset of this Institution.  # noqa: E501
        :rtype: Asset
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this Institution.


        :param default_asset: The default_asset of this Institution.  # noqa: E501
        :type: Asset
        """

        self._default_asset = default_asset

    @property
    def alternate_asset(self):
        """Gets the alternate_asset of this Institution.  # noqa: E501


        :return: The alternate_asset of this Institution.  # noqa: E501
        :rtype: Asset
        """
        return self._alternate_asset

    @alternate_asset.setter
    def alternate_asset(self, alternate_asset):
        """Sets the alternate_asset of this Institution.


        :param alternate_asset: The alternate_asset of this Institution.  # noqa: E501
        :type: Asset
        """

        self._alternate_asset = alternate_asset

    @property
    def institution_assets(self):
        """Gets the institution_assets of this Institution.  # noqa: E501


        :return: The institution_assets of this Institution.  # noqa: E501
        :rtype: list[InstitutionAsset]
        """
        return self._institution_assets

    @institution_assets.setter
    def institution_assets(self, institution_assets):
        """Sets the institution_assets of this Institution.


        :param institution_assets: The institution_assets of this Institution.  # noqa: E501
        :type: list[InstitutionAsset]
        """

        self._institution_assets = institution_assets

    @property
    def institution_contents(self):
        """Gets the institution_contents of this Institution.  # noqa: E501


        :return: The institution_contents of this Institution.  # noqa: E501
        :rtype: list[InstitutionContent]
        """
        return self._institution_contents

    @institution_contents.setter
    def institution_contents(self, institution_contents):
        """Sets the institution_contents of this Institution.


        :param institution_contents: The institution_contents of this Institution.  # noqa: E501
        :type: list[InstitutionContent]
        """

        self._institution_contents = institution_contents

    @property
    def institution_rankings(self):
        """Gets the institution_rankings of this Institution.  # noqa: E501


        :return: The institution_rankings of this Institution.  # noqa: E501
        :rtype: list[InstitutionRanking]
        """
        return self._institution_rankings

    @institution_rankings.setter
    def institution_rankings(self, institution_rankings):
        """Sets the institution_rankings of this Institution.


        :param institution_rankings: The institution_rankings of this Institution.  # noqa: E501
        :type: list[InstitutionRanking]
        """

        self._institution_rankings = institution_rankings

    @property
    def coach_jobs(self):
        """Gets the coach_jobs of this Institution.  # noqa: E501


        :return: The coach_jobs of this Institution.  # noqa: E501
        :rtype: list[CoachJob]
        """
        return self._coach_jobs

    @coach_jobs.setter
    def coach_jobs(self, coach_jobs):
        """Sets the coach_jobs of this Institution.


        :param coach_jobs: The coach_jobs of this Institution.  # noqa: E501
        :type: list[CoachJob]
        """

        self._coach_jobs = coach_jobs

    @property
    def league_vertical(self):
        """Gets the league_vertical of this Institution.  # noqa: E501


        :return: The league_vertical of this Institution.  # noqa: E501
        :rtype: League
        """
        return self._league_vertical

    @league_vertical.setter
    def league_vertical(self, league_vertical):
        """Sets the league_vertical of this Institution.


        :param league_vertical: The league_vertical of this Institution.  # noqa: E501
        :type: League
        """

        self._league_vertical = league_vertical

    @property
    def light_asset(self):
        """Gets the light_asset of this Institution.  # noqa: E501


        :return: The light_asset of this Institution.  # noqa: E501
        :rtype: Asset
        """
        return self._light_asset

    @light_asset.setter
    def light_asset(self, light_asset):
        """Sets the light_asset of this Institution.


        :param light_asset: The light_asset of this Institution.  # noqa: E501
        :type: Asset
        """

        self._light_asset = light_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Institution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Institution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

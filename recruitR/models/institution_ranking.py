# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstitutionRanking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'institution_key': 'int',
        'ranking_key': 'int',
        'conference_key': 'int',
        'recruitment_key': 'int',
        'description': 'str',
        'rating': 'float',
        'scout_rating': 'float',
        'composite_rating': 'float',
        'commits': 'int',
        'five_stars': 'int',
        'composite_five_stars': 'int',
        'four_stars': 'int',
        'composite_four_stars': 'int',
        'three_stars': 'int',
        'composite_three_stars': 'int',
        'two_stars': 'int',
        'composite_two_stars': 'int',
        'average_rating': 'float',
        'composite_average_rating': 'float',
        'overall_rank': 'int',
        'composite_overall_rank': 'int',
        'division_rank': 'int',
        'composite_division_rank': 'int',
        'conference_rank': 'int',
        'composite_conference_rank': 'int',
        'conference': 'Conference',
        'ranking': 'Ranking',
        'institution': 'Institution'
    }

    attribute_map = {
        'key': 'key',
        'institution_key': 'institutionKey',
        'ranking_key': 'rankingKey',
        'conference_key': 'conferenceKey',
        'recruitment_key': 'recruitmentKey',
        'description': 'description',
        'rating': 'rating',
        'scout_rating': 'scoutRating',
        'composite_rating': 'compositeRating',
        'commits': 'commits',
        'five_stars': 'fiveStars',
        'composite_five_stars': 'compositeFiveStars',
        'four_stars': 'fourStars',
        'composite_four_stars': 'compositeFourStars',
        'three_stars': 'threeStars',
        'composite_three_stars': 'compositeThreeStars',
        'two_stars': 'twoStars',
        'composite_two_stars': 'compositeTwoStars',
        'average_rating': 'averageRating',
        'composite_average_rating': 'compositeAverageRating',
        'overall_rank': 'overallRank',
        'composite_overall_rank': 'compositeOverallRank',
        'division_rank': 'divisionRank',
        'composite_division_rank': 'compositeDivisionRank',
        'conference_rank': 'conferenceRank',
        'composite_conference_rank': 'compositeConferenceRank',
        'conference': 'conference',
        'ranking': 'ranking',
        'institution': 'institution'
    }

    def __init__(self, key=None, institution_key=None, ranking_key=None, conference_key=None, recruitment_key=None, description=None, rating=None, scout_rating=None, composite_rating=None, commits=None, five_stars=None, composite_five_stars=None, four_stars=None, composite_four_stars=None, three_stars=None, composite_three_stars=None, two_stars=None, composite_two_stars=None, average_rating=None, composite_average_rating=None, overall_rank=None, composite_overall_rank=None, division_rank=None, composite_division_rank=None, conference_rank=None, composite_conference_rank=None, conference=None, ranking=None, institution=None):  # noqa: E501
        """InstitutionRanking - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._institution_key = None
        self._ranking_key = None
        self._conference_key = None
        self._recruitment_key = None
        self._description = None
        self._rating = None
        self._scout_rating = None
        self._composite_rating = None
        self._commits = None
        self._five_stars = None
        self._composite_five_stars = None
        self._four_stars = None
        self._composite_four_stars = None
        self._three_stars = None
        self._composite_three_stars = None
        self._two_stars = None
        self._composite_two_stars = None
        self._average_rating = None
        self._composite_average_rating = None
        self._overall_rank = None
        self._composite_overall_rank = None
        self._division_rank = None
        self._composite_division_rank = None
        self._conference_rank = None
        self._composite_conference_rank = None
        self._conference = None
        self._ranking = None
        self._institution = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if institution_key is not None:
            self.institution_key = institution_key
        if ranking_key is not None:
            self.ranking_key = ranking_key
        if conference_key is not None:
            self.conference_key = conference_key
        if recruitment_key is not None:
            self.recruitment_key = recruitment_key
        if description is not None:
            self.description = description
        if rating is not None:
            self.rating = rating
        if scout_rating is not None:
            self.scout_rating = scout_rating
        if composite_rating is not None:
            self.composite_rating = composite_rating
        if commits is not None:
            self.commits = commits
        if five_stars is not None:
            self.five_stars = five_stars
        if composite_five_stars is not None:
            self.composite_five_stars = composite_five_stars
        if four_stars is not None:
            self.four_stars = four_stars
        if composite_four_stars is not None:
            self.composite_four_stars = composite_four_stars
        if three_stars is not None:
            self.three_stars = three_stars
        if composite_three_stars is not None:
            self.composite_three_stars = composite_three_stars
        if two_stars is not None:
            self.two_stars = two_stars
        if composite_two_stars is not None:
            self.composite_two_stars = composite_two_stars
        if average_rating is not None:
            self.average_rating = average_rating
        if composite_average_rating is not None:
            self.composite_average_rating = composite_average_rating
        if overall_rank is not None:
            self.overall_rank = overall_rank
        if composite_overall_rank is not None:
            self.composite_overall_rank = composite_overall_rank
        if division_rank is not None:
            self.division_rank = division_rank
        if composite_division_rank is not None:
            self.composite_division_rank = composite_division_rank
        if conference_rank is not None:
            self.conference_rank = conference_rank
        if composite_conference_rank is not None:
            self.composite_conference_rank = composite_conference_rank
        if conference is not None:
            self.conference = conference
        if ranking is not None:
            self.ranking = ranking
        if institution is not None:
            self.institution = institution

    @property
    def key(self):
        """Gets the key of this InstitutionRanking.  # noqa: E501


        :return: The key of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InstitutionRanking.


        :param key: The key of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def institution_key(self):
        """Gets the institution_key of this InstitutionRanking.  # noqa: E501


        :return: The institution_key of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this InstitutionRanking.


        :param institution_key: The institution_key of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def ranking_key(self):
        """Gets the ranking_key of this InstitutionRanking.  # noqa: E501


        :return: The ranking_key of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._ranking_key

    @ranking_key.setter
    def ranking_key(self, ranking_key):
        """Sets the ranking_key of this InstitutionRanking.


        :param ranking_key: The ranking_key of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._ranking_key = ranking_key

    @property
    def conference_key(self):
        """Gets the conference_key of this InstitutionRanking.  # noqa: E501


        :return: The conference_key of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._conference_key

    @conference_key.setter
    def conference_key(self, conference_key):
        """Sets the conference_key of this InstitutionRanking.


        :param conference_key: The conference_key of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._conference_key = conference_key

    @property
    def recruitment_key(self):
        """Gets the recruitment_key of this InstitutionRanking.  # noqa: E501


        :return: The recruitment_key of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._recruitment_key

    @recruitment_key.setter
    def recruitment_key(self, recruitment_key):
        """Sets the recruitment_key of this InstitutionRanking.


        :param recruitment_key: The recruitment_key of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._recruitment_key = recruitment_key

    @property
    def description(self):
        """Gets the description of this InstitutionRanking.  # noqa: E501


        :return: The description of this InstitutionRanking.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InstitutionRanking.


        :param description: The description of this InstitutionRanking.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def rating(self):
        """Gets the rating of this InstitutionRanking.  # noqa: E501


        :return: The rating of this InstitutionRanking.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this InstitutionRanking.


        :param rating: The rating of this InstitutionRanking.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def scout_rating(self):
        """Gets the scout_rating of this InstitutionRanking.  # noqa: E501


        :return: The scout_rating of this InstitutionRanking.  # noqa: E501
        :rtype: float
        """
        return self._scout_rating

    @scout_rating.setter
    def scout_rating(self, scout_rating):
        """Sets the scout_rating of this InstitutionRanking.


        :param scout_rating: The scout_rating of this InstitutionRanking.  # noqa: E501
        :type: float
        """

        self._scout_rating = scout_rating

    @property
    def composite_rating(self):
        """Gets the composite_rating of this InstitutionRanking.  # noqa: E501


        :return: The composite_rating of this InstitutionRanking.  # noqa: E501
        :rtype: float
        """
        return self._composite_rating

    @composite_rating.setter
    def composite_rating(self, composite_rating):
        """Sets the composite_rating of this InstitutionRanking.


        :param composite_rating: The composite_rating of this InstitutionRanking.  # noqa: E501
        :type: float
        """

        self._composite_rating = composite_rating

    @property
    def commits(self):
        """Gets the commits of this InstitutionRanking.  # noqa: E501


        :return: The commits of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this InstitutionRanking.


        :param commits: The commits of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._commits = commits

    @property
    def five_stars(self):
        """Gets the five_stars of this InstitutionRanking.  # noqa: E501


        :return: The five_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._five_stars

    @five_stars.setter
    def five_stars(self, five_stars):
        """Sets the five_stars of this InstitutionRanking.


        :param five_stars: The five_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._five_stars = five_stars

    @property
    def composite_five_stars(self):
        """Gets the composite_five_stars of this InstitutionRanking.  # noqa: E501


        :return: The composite_five_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_five_stars

    @composite_five_stars.setter
    def composite_five_stars(self, composite_five_stars):
        """Sets the composite_five_stars of this InstitutionRanking.


        :param composite_five_stars: The composite_five_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_five_stars = composite_five_stars

    @property
    def four_stars(self):
        """Gets the four_stars of this InstitutionRanking.  # noqa: E501


        :return: The four_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._four_stars

    @four_stars.setter
    def four_stars(self, four_stars):
        """Sets the four_stars of this InstitutionRanking.


        :param four_stars: The four_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._four_stars = four_stars

    @property
    def composite_four_stars(self):
        """Gets the composite_four_stars of this InstitutionRanking.  # noqa: E501


        :return: The composite_four_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_four_stars

    @composite_four_stars.setter
    def composite_four_stars(self, composite_four_stars):
        """Sets the composite_four_stars of this InstitutionRanking.


        :param composite_four_stars: The composite_four_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_four_stars = composite_four_stars

    @property
    def three_stars(self):
        """Gets the three_stars of this InstitutionRanking.  # noqa: E501


        :return: The three_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._three_stars

    @three_stars.setter
    def three_stars(self, three_stars):
        """Sets the three_stars of this InstitutionRanking.


        :param three_stars: The three_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._three_stars = three_stars

    @property
    def composite_three_stars(self):
        """Gets the composite_three_stars of this InstitutionRanking.  # noqa: E501


        :return: The composite_three_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_three_stars

    @composite_three_stars.setter
    def composite_three_stars(self, composite_three_stars):
        """Sets the composite_three_stars of this InstitutionRanking.


        :param composite_three_stars: The composite_three_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_three_stars = composite_three_stars

    @property
    def two_stars(self):
        """Gets the two_stars of this InstitutionRanking.  # noqa: E501


        :return: The two_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._two_stars

    @two_stars.setter
    def two_stars(self, two_stars):
        """Sets the two_stars of this InstitutionRanking.


        :param two_stars: The two_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._two_stars = two_stars

    @property
    def composite_two_stars(self):
        """Gets the composite_two_stars of this InstitutionRanking.  # noqa: E501


        :return: The composite_two_stars of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_two_stars

    @composite_two_stars.setter
    def composite_two_stars(self, composite_two_stars):
        """Sets the composite_two_stars of this InstitutionRanking.


        :param composite_two_stars: The composite_two_stars of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_two_stars = composite_two_stars

    @property
    def average_rating(self):
        """Gets the average_rating of this InstitutionRanking.  # noqa: E501


        :return: The average_rating of this InstitutionRanking.  # noqa: E501
        :rtype: float
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this InstitutionRanking.


        :param average_rating: The average_rating of this InstitutionRanking.  # noqa: E501
        :type: float
        """

        self._average_rating = average_rating

    @property
    def composite_average_rating(self):
        """Gets the composite_average_rating of this InstitutionRanking.  # noqa: E501


        :return: The composite_average_rating of this InstitutionRanking.  # noqa: E501
        :rtype: float
        """
        return self._composite_average_rating

    @composite_average_rating.setter
    def composite_average_rating(self, composite_average_rating):
        """Sets the composite_average_rating of this InstitutionRanking.


        :param composite_average_rating: The composite_average_rating of this InstitutionRanking.  # noqa: E501
        :type: float
        """

        self._composite_average_rating = composite_average_rating

    @property
    def overall_rank(self):
        """Gets the overall_rank of this InstitutionRanking.  # noqa: E501


        :return: The overall_rank of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._overall_rank

    @overall_rank.setter
    def overall_rank(self, overall_rank):
        """Sets the overall_rank of this InstitutionRanking.


        :param overall_rank: The overall_rank of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._overall_rank = overall_rank

    @property
    def composite_overall_rank(self):
        """Gets the composite_overall_rank of this InstitutionRanking.  # noqa: E501


        :return: The composite_overall_rank of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_overall_rank

    @composite_overall_rank.setter
    def composite_overall_rank(self, composite_overall_rank):
        """Sets the composite_overall_rank of this InstitutionRanking.


        :param composite_overall_rank: The composite_overall_rank of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_overall_rank = composite_overall_rank

    @property
    def division_rank(self):
        """Gets the division_rank of this InstitutionRanking.  # noqa: E501


        :return: The division_rank of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._division_rank

    @division_rank.setter
    def division_rank(self, division_rank):
        """Sets the division_rank of this InstitutionRanking.


        :param division_rank: The division_rank of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._division_rank = division_rank

    @property
    def composite_division_rank(self):
        """Gets the composite_division_rank of this InstitutionRanking.  # noqa: E501


        :return: The composite_division_rank of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_division_rank

    @composite_division_rank.setter
    def composite_division_rank(self, composite_division_rank):
        """Sets the composite_division_rank of this InstitutionRanking.


        :param composite_division_rank: The composite_division_rank of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_division_rank = composite_division_rank

    @property
    def conference_rank(self):
        """Gets the conference_rank of this InstitutionRanking.  # noqa: E501


        :return: The conference_rank of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this InstitutionRanking.


        :param conference_rank: The conference_rank of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._conference_rank = conference_rank

    @property
    def composite_conference_rank(self):
        """Gets the composite_conference_rank of this InstitutionRanking.  # noqa: E501


        :return: The composite_conference_rank of this InstitutionRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_conference_rank

    @composite_conference_rank.setter
    def composite_conference_rank(self, composite_conference_rank):
        """Sets the composite_conference_rank of this InstitutionRanking.


        :param composite_conference_rank: The composite_conference_rank of this InstitutionRanking.  # noqa: E501
        :type: int
        """

        self._composite_conference_rank = composite_conference_rank

    @property
    def conference(self):
        """Gets the conference of this InstitutionRanking.  # noqa: E501


        :return: The conference of this InstitutionRanking.  # noqa: E501
        :rtype: Conference
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this InstitutionRanking.


        :param conference: The conference of this InstitutionRanking.  # noqa: E501
        :type: Conference
        """

        self._conference = conference

    @property
    def ranking(self):
        """Gets the ranking of this InstitutionRanking.  # noqa: E501


        :return: The ranking of this InstitutionRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this InstitutionRanking.


        :param ranking: The ranking of this InstitutionRanking.  # noqa: E501
        :type: Ranking
        """

        self._ranking = ranking

    @property
    def institution(self):
        """Gets the institution of this InstitutionRanking.  # noqa: E501


        :return: The institution of this InstitutionRanking.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this InstitutionRanking.


        :param institution: The institution of this InstitutionRanking.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstitutionRanking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstitutionRanking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstitutionRankingDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'conference_rank': 'int',
        'conference_composite_rank': 'int',
        'rank': 'int',
        'composite_rank': 'int',
        'institution_key': 'int',
        'team_key': 'int',
        'average_rating': 'float',
        'rating': 'float',
        'composite_rating': 'float',
        'average_composite_rating': 'float',
        'default_asset': 'str',
        'alternate_asset': 'str',
        'high_school_ranking_position': 'int',
        'transfer_points': 'float',
        'transfer_number': 'int',
        'five_stars': 'int',
        'composite_five_stars': 'int',
        'four_stars': 'int',
        'composite_four_stars': 'int',
        'three_stars': 'int',
        'composite_three_stars': 'int',
        'commits': 'int',
        'site_key': 'int',
        'institution_root_path': 'str',
        'ranking_date': 'datetime',
        'city': 'str',
        'state': 'str',
        'institution_ranking_url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'conference_rank': 'conferenceRank',
        'conference_composite_rank': 'conferenceCompositeRank',
        'rank': 'rank',
        'composite_rank': 'compositeRank',
        'institution_key': 'institutionKey',
        'team_key': 'teamKey',
        'average_rating': 'averageRating',
        'rating': 'rating',
        'composite_rating': 'compositeRating',
        'average_composite_rating': 'averageCompositeRating',
        'default_asset': 'defaultAsset',
        'alternate_asset': 'alternateAsset',
        'high_school_ranking_position': 'highSchoolRankingPosition',
        'transfer_points': 'transferPoints',
        'transfer_number': 'transferNumber',
        'five_stars': 'fiveStars',
        'composite_five_stars': 'compositeFiveStars',
        'four_stars': 'fourStars',
        'composite_four_stars': 'compositeFourStars',
        'three_stars': 'threeStars',
        'composite_three_stars': 'compositeThreeStars',
        'commits': 'commits',
        'site_key': 'siteKey',
        'institution_root_path': 'institutionRootPath',
        'ranking_date': 'rankingDate',
        'city': 'city',
        'state': 'state',
        'institution_ranking_url': 'institutionRankingUrl'
    }

    def __init__(self, name=None, conference_rank=None, conference_composite_rank=None, rank=None, composite_rank=None, institution_key=None, team_key=None, average_rating=None, rating=None, composite_rating=None, average_composite_rating=None, default_asset=None, alternate_asset=None, high_school_ranking_position=None, transfer_points=None, transfer_number=None, five_stars=None, composite_five_stars=None, four_stars=None, composite_four_stars=None, three_stars=None, composite_three_stars=None, commits=None, site_key=None, institution_root_path=None, ranking_date=None, city=None, state=None, institution_ranking_url=None):  # noqa: E501
        """InstitutionRankingDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._conference_rank = None
        self._conference_composite_rank = None
        self._rank = None
        self._composite_rank = None
        self._institution_key = None
        self._team_key = None
        self._average_rating = None
        self._rating = None
        self._composite_rating = None
        self._average_composite_rating = None
        self._default_asset = None
        self._alternate_asset = None
        self._high_school_ranking_position = None
        self._transfer_points = None
        self._transfer_number = None
        self._five_stars = None
        self._composite_five_stars = None
        self._four_stars = None
        self._composite_four_stars = None
        self._three_stars = None
        self._composite_three_stars = None
        self._commits = None
        self._site_key = None
        self._institution_root_path = None
        self._ranking_date = None
        self._city = None
        self._state = None
        self._institution_ranking_url = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if conference_rank is not None:
            self.conference_rank = conference_rank
        if conference_composite_rank is not None:
            self.conference_composite_rank = conference_composite_rank
        if rank is not None:
            self.rank = rank
        if composite_rank is not None:
            self.composite_rank = composite_rank
        if institution_key is not None:
            self.institution_key = institution_key
        if team_key is not None:
            self.team_key = team_key
        if average_rating is not None:
            self.average_rating = average_rating
        if rating is not None:
            self.rating = rating
        if composite_rating is not None:
            self.composite_rating = composite_rating
        if average_composite_rating is not None:
            self.average_composite_rating = average_composite_rating
        if default_asset is not None:
            self.default_asset = default_asset
        if alternate_asset is not None:
            self.alternate_asset = alternate_asset
        if high_school_ranking_position is not None:
            self.high_school_ranking_position = high_school_ranking_position
        if transfer_points is not None:
            self.transfer_points = transfer_points
        if transfer_number is not None:
            self.transfer_number = transfer_number
        if five_stars is not None:
            self.five_stars = five_stars
        if composite_five_stars is not None:
            self.composite_five_stars = composite_five_stars
        if four_stars is not None:
            self.four_stars = four_stars
        if composite_four_stars is not None:
            self.composite_four_stars = composite_four_stars
        if three_stars is not None:
            self.three_stars = three_stars
        if composite_three_stars is not None:
            self.composite_three_stars = composite_three_stars
        if commits is not None:
            self.commits = commits
        if site_key is not None:
            self.site_key = site_key
        if institution_root_path is not None:
            self.institution_root_path = institution_root_path
        if ranking_date is not None:
            self.ranking_date = ranking_date
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if institution_ranking_url is not None:
            self.institution_ranking_url = institution_ranking_url

    @property
    def name(self):
        """Gets the name of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the name of the institution  # noqa: E501

        :return: The name of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstitutionRankingDto.

        Gets or sets the name of the institution  # noqa: E501

        :param name: The name of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def conference_rank(self):
        """Gets the conference_rank of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the conference Transfer Rank  # noqa: E501

        :return: The conference_rank of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this InstitutionRankingDto.

        Gets or sets the conference Transfer Rank  # noqa: E501

        :param conference_rank: The conference_rank of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._conference_rank = conference_rank

    @property
    def conference_composite_rank(self):
        """Gets the conference_composite_rank of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the conference Transfer Ranking Composite Rank  # noqa: E501

        :return: The conference_composite_rank of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._conference_composite_rank

    @conference_composite_rank.setter
    def conference_composite_rank(self, conference_composite_rank):
        """Sets the conference_composite_rank of this InstitutionRankingDto.

        Gets or sets the conference Transfer Ranking Composite Rank  # noqa: E501

        :param conference_composite_rank: The conference_composite_rank of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._conference_composite_rank = conference_composite_rank

    @property
    def rank(self):
        """Gets the rank of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the Transfer Rank  # noqa: E501

        :return: The rank of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this InstitutionRankingDto.

        Gets or sets the Transfer Rank  # noqa: E501

        :param rank: The rank of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def composite_rank(self):
        """Gets the composite_rank of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the Transfer Ranking Composite Rank  # noqa: E501

        :return: The composite_rank of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._composite_rank

    @composite_rank.setter
    def composite_rank(self, composite_rank):
        """Sets the composite_rank of this InstitutionRankingDto.

        Gets or sets the Transfer Ranking Composite Rank  # noqa: E501

        :param composite_rank: The composite_rank of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._composite_rank = composite_rank

    @property
    def institution_key(self):
        """Gets the institution_key of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the unique identifier of the institution  # noqa: E501

        :return: The institution_key of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this InstitutionRankingDto.

        Gets or sets the unique identifier of the institution  # noqa: E501

        :param institution_key: The institution_key of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def team_key(self):
        """Gets the team_key of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the unique identifier of the team  # noqa: E501

        :return: The team_key of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._team_key

    @team_key.setter
    def team_key(self, team_key):
        """Sets the team_key of this InstitutionRankingDto.

        Gets or sets the unique identifier of the team  # noqa: E501

        :param team_key: The team_key of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._team_key = team_key

    @property
    def average_rating(self):
        """Gets the average_rating of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the average rating  # noqa: E501

        :return: The average_rating of this InstitutionRankingDto.  # noqa: E501
        :rtype: float
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this InstitutionRankingDto.

        Gets or sets the average rating  # noqa: E501

        :param average_rating: The average_rating of this InstitutionRankingDto.  # noqa: E501
        :type: float
        """

        self._average_rating = average_rating

    @property
    def rating(self):
        """Gets the rating of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the team rating  # noqa: E501

        :return: The rating of this InstitutionRankingDto.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this InstitutionRankingDto.

        Gets or sets the team rating  # noqa: E501

        :param rating: The rating of this InstitutionRankingDto.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def composite_rating(self):
        """Gets the composite_rating of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the team composite rating  # noqa: E501

        :return: The composite_rating of this InstitutionRankingDto.  # noqa: E501
        :rtype: float
        """
        return self._composite_rating

    @composite_rating.setter
    def composite_rating(self, composite_rating):
        """Sets the composite_rating of this InstitutionRankingDto.

        Gets or sets the team composite rating  # noqa: E501

        :param composite_rating: The composite_rating of this InstitutionRankingDto.  # noqa: E501
        :type: float
        """

        self._composite_rating = composite_rating

    @property
    def average_composite_rating(self):
        """Gets the average_composite_rating of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the average composite rating  # noqa: E501

        :return: The average_composite_rating of this InstitutionRankingDto.  # noqa: E501
        :rtype: float
        """
        return self._average_composite_rating

    @average_composite_rating.setter
    def average_composite_rating(self, average_composite_rating):
        """Sets the average_composite_rating of this InstitutionRankingDto.

        Gets or sets the average composite rating  # noqa: E501

        :param average_composite_rating: The average_composite_rating of this InstitutionRankingDto.  # noqa: E501
        :type: float
        """

        self._average_composite_rating = average_composite_rating

    @property
    def default_asset(self):
        """Gets the default_asset of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the institution default logo  # noqa: E501

        :return: The default_asset of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this InstitutionRankingDto.

        Gets or sets the institution default logo  # noqa: E501

        :param default_asset: The default_asset of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._default_asset = default_asset

    @property
    def alternate_asset(self):
        """Gets the alternate_asset of this InstitutionRankingDto.  # noqa: E501

        Gets or sets an alternate institution logo  # noqa: E501

        :return: The alternate_asset of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._alternate_asset

    @alternate_asset.setter
    def alternate_asset(self, alternate_asset):
        """Sets the alternate_asset of this InstitutionRankingDto.

        Gets or sets an alternate institution logo  # noqa: E501

        :param alternate_asset: The alternate_asset of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._alternate_asset = alternate_asset

    @property
    def high_school_ranking_position(self):
        """Gets the high_school_ranking_position of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the high school rankingposition  Todo: Clarify  # noqa: E501

        :return: The high_school_ranking_position of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._high_school_ranking_position

    @high_school_ranking_position.setter
    def high_school_ranking_position(self, high_school_ranking_position):
        """Sets the high_school_ranking_position of this InstitutionRankingDto.

        Gets or sets the high school rankingposition  Todo: Clarify  # noqa: E501

        :param high_school_ranking_position: The high_school_ranking_position of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._high_school_ranking_position = high_school_ranking_position

    @property
    def transfer_points(self):
        """Gets the transfer_points of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the transfer points for the institution  Todo: Clarify  # noqa: E501

        :return: The transfer_points of this InstitutionRankingDto.  # noqa: E501
        :rtype: float
        """
        return self._transfer_points

    @transfer_points.setter
    def transfer_points(self, transfer_points):
        """Sets the transfer_points of this InstitutionRankingDto.

        Gets or sets the transfer points for the institution  Todo: Clarify  # noqa: E501

        :param transfer_points: The transfer_points of this InstitutionRankingDto.  # noqa: E501
        :type: float
        """

        self._transfer_points = transfer_points

    @property
    def transfer_number(self):
        """Gets the transfer_number of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the number of transfers for the institution  # noqa: E501

        :return: The transfer_number of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._transfer_number

    @transfer_number.setter
    def transfer_number(self, transfer_number):
        """Sets the transfer_number of this InstitutionRankingDto.

        Gets or sets the number of transfers for the institution  # noqa: E501

        :param transfer_number: The transfer_number of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._transfer_number = transfer_number

    @property
    def five_stars(self):
        """Gets the five_stars of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the five star count  # noqa: E501

        :return: The five_stars of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._five_stars

    @five_stars.setter
    def five_stars(self, five_stars):
        """Sets the five_stars of this InstitutionRankingDto.

        Gets or sets the five star count  # noqa: E501

        :param five_stars: The five_stars of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._five_stars = five_stars

    @property
    def composite_five_stars(self):
        """Gets the composite_five_stars of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the composite five star count  # noqa: E501

        :return: The composite_five_stars of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._composite_five_stars

    @composite_five_stars.setter
    def composite_five_stars(self, composite_five_stars):
        """Sets the composite_five_stars of this InstitutionRankingDto.

        Gets or sets the composite five star count  # noqa: E501

        :param composite_five_stars: The composite_five_stars of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._composite_five_stars = composite_five_stars

    @property
    def four_stars(self):
        """Gets the four_stars of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the four star count  # noqa: E501

        :return: The four_stars of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._four_stars

    @four_stars.setter
    def four_stars(self, four_stars):
        """Sets the four_stars of this InstitutionRankingDto.

        Gets or sets the four star count  # noqa: E501

        :param four_stars: The four_stars of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._four_stars = four_stars

    @property
    def composite_four_stars(self):
        """Gets the composite_four_stars of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the composite four star count  # noqa: E501

        :return: The composite_four_stars of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._composite_four_stars

    @composite_four_stars.setter
    def composite_four_stars(self, composite_four_stars):
        """Sets the composite_four_stars of this InstitutionRankingDto.

        Gets or sets the composite four star count  # noqa: E501

        :param composite_four_stars: The composite_four_stars of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._composite_four_stars = composite_four_stars

    @property
    def three_stars(self):
        """Gets the three_stars of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the three star count  # noqa: E501

        :return: The three_stars of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._three_stars

    @three_stars.setter
    def three_stars(self, three_stars):
        """Sets the three_stars of this InstitutionRankingDto.

        Gets or sets the three star count  # noqa: E501

        :param three_stars: The three_stars of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._three_stars = three_stars

    @property
    def composite_three_stars(self):
        """Gets the composite_three_stars of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the composite three star count  # noqa: E501

        :return: The composite_three_stars of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._composite_three_stars

    @composite_three_stars.setter
    def composite_three_stars(self, composite_three_stars):
        """Sets the composite_three_stars of this InstitutionRankingDto.

        Gets or sets the composite three star count  # noqa: E501

        :param composite_three_stars: The composite_three_stars of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._composite_three_stars = composite_three_stars

    @property
    def commits(self):
        """Gets the commits of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the commit count  # noqa: E501

        :return: The commits of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this InstitutionRankingDto.

        Gets or sets the commit count  # noqa: E501

        :param commits: The commits of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._commits = commits

    @property
    def site_key(self):
        """Gets the site_key of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the site key  # noqa: E501

        :return: The site_key of this InstitutionRankingDto.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this InstitutionRankingDto.

        Gets or sets the site key  # noqa: E501

        :param site_key: The site_key of this InstitutionRankingDto.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def institution_root_path(self):
        """Gets the institution_root_path of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the Team Site Url  # noqa: E501

        :return: The institution_root_path of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._institution_root_path

    @institution_root_path.setter
    def institution_root_path(self, institution_root_path):
        """Sets the institution_root_path of this InstitutionRankingDto.

        Gets or sets the Team Site Url  # noqa: E501

        :param institution_root_path: The institution_root_path of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._institution_root_path = institution_root_path

    @property
    def ranking_date(self):
        """Gets the ranking_date of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the ranking date  # noqa: E501

        :return: The ranking_date of this InstitutionRankingDto.  # noqa: E501
        :rtype: datetime
        """
        return self._ranking_date

    @ranking_date.setter
    def ranking_date(self, ranking_date):
        """Sets the ranking_date of this InstitutionRankingDto.

        Gets or sets the ranking date  # noqa: E501

        :param ranking_date: The ranking_date of this InstitutionRankingDto.  # noqa: E501
        :type: datetime
        """

        self._ranking_date = ranking_date

    @property
    def city(self):
        """Gets the city of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the city  # noqa: E501

        :return: The city of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this InstitutionRankingDto.

        Gets or sets the city  # noqa: E501

        :param city: The city of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the state  # noqa: E501

        :return: The state of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InstitutionRankingDto.

        Gets or sets the state  # noqa: E501

        :param state: The state of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def institution_ranking_url(self):
        """Gets the institution_ranking_url of this InstitutionRankingDto.  # noqa: E501

        Gets or sets the institution ranking url  # noqa: E501

        :return: The institution_ranking_url of this InstitutionRankingDto.  # noqa: E501
        :rtype: str
        """
        return self._institution_ranking_url

    @institution_ranking_url.setter
    def institution_ranking_url(self, institution_ranking_url):
        """Sets the institution_ranking_url of this InstitutionRankingDto.

        Gets or sets the institution ranking url  # noqa: E501

        :param institution_ranking_url: The institution_ranking_url of this InstitutionRankingDto.  # noqa: E501
        :type: str
        """

        self._institution_ranking_url = institution_ranking_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstitutionRankingDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstitutionRankingDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

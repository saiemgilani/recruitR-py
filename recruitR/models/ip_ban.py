# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IpBan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'admin_user_key': 'int',
        'site_key': 'int',
        'ip': 'str',
        'active': 'bool',
        'reason': 'str',
        'admin_user': 'User',
        'site': 'Site'
    }

    attribute_map = {
        'key': 'key',
        'admin_user_key': 'adminUserKey',
        'site_key': 'siteKey',
        'ip': 'ip',
        'active': 'active',
        'reason': 'reason',
        'admin_user': 'adminUser',
        'site': 'site'
    }

    def __init__(self, key=None, admin_user_key=None, site_key=None, ip=None, active=None, reason=None, admin_user=None, site=None):  # noqa: E501
        """IpBan - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._admin_user_key = None
        self._site_key = None
        self._ip = None
        self._active = None
        self._reason = None
        self._admin_user = None
        self._site = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if admin_user_key is not None:
            self.admin_user_key = admin_user_key
        if site_key is not None:
            self.site_key = site_key
        if ip is not None:
            self.ip = ip
        if active is not None:
            self.active = active
        if reason is not None:
            self.reason = reason
        if admin_user is not None:
            self.admin_user = admin_user
        if site is not None:
            self.site = site

    @property
    def key(self):
        """Gets the key of this IpBan.  # noqa: E501


        :return: The key of this IpBan.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IpBan.


        :param key: The key of this IpBan.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def admin_user_key(self):
        """Gets the admin_user_key of this IpBan.  # noqa: E501


        :return: The admin_user_key of this IpBan.  # noqa: E501
        :rtype: int
        """
        return self._admin_user_key

    @admin_user_key.setter
    def admin_user_key(self, admin_user_key):
        """Sets the admin_user_key of this IpBan.


        :param admin_user_key: The admin_user_key of this IpBan.  # noqa: E501
        :type: int
        """

        self._admin_user_key = admin_user_key

    @property
    def site_key(self):
        """Gets the site_key of this IpBan.  # noqa: E501


        :return: The site_key of this IpBan.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this IpBan.


        :param site_key: The site_key of this IpBan.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def ip(self):
        """Gets the ip of this IpBan.  # noqa: E501


        :return: The ip of this IpBan.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IpBan.


        :param ip: The ip of this IpBan.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def active(self):
        """Gets the active of this IpBan.  # noqa: E501


        :return: The active of this IpBan.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this IpBan.


        :param active: The active of this IpBan.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def reason(self):
        """Gets the reason of this IpBan.  # noqa: E501


        :return: The reason of this IpBan.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IpBan.


        :param reason: The reason of this IpBan.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def admin_user(self):
        """Gets the admin_user of this IpBan.  # noqa: E501


        :return: The admin_user of this IpBan.  # noqa: E501
        :rtype: User
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this IpBan.


        :param admin_user: The admin_user of this IpBan.  # noqa: E501
        :type: User
        """

        self._admin_user = admin_user

    @property
    def site(self):
        """Gets the site of this IpBan.  # noqa: E501


        :return: The site of this IpBan.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this IpBan.


        :param site: The site of this IpBan.  # noqa: E501
        :type: Site
        """

        self._site = site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpBan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpBan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'target_institution_logo': 'str',
        'target_institution_name': 'str',
        'position': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'ranking_position': 'int',
        'previous_institution_name': 'str',
        'previous_institution_logo': 'str'
    }

    attribute_map = {
        'key': 'key',
        'target_institution_logo': 'targetInstitutionLogo',
        'target_institution_name': 'targetInstitutionName',
        'position': 'position',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'ranking_position': 'rankingPosition',
        'previous_institution_name': 'previousInstitutionName',
        'previous_institution_logo': 'previousInstitutionLogo'
    }

    def __init__(self, key=None, target_institution_logo=None, target_institution_name=None, position=None, first_name=None, last_name=None, ranking_position=None, previous_institution_name=None, previous_institution_logo=None):  # noqa: E501
        """ItemDto - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._target_institution_logo = None
        self._target_institution_name = None
        self._position = None
        self._first_name = None
        self._last_name = None
        self._ranking_position = None
        self._previous_institution_name = None
        self._previous_institution_logo = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if target_institution_logo is not None:
            self.target_institution_logo = target_institution_logo
        if target_institution_name is not None:
            self.target_institution_name = target_institution_name
        if position is not None:
            self.position = position
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if ranking_position is not None:
            self.ranking_position = ranking_position
        if previous_institution_name is not None:
            self.previous_institution_name = previous_institution_name
        if previous_institution_logo is not None:
            self.previous_institution_logo = previous_institution_logo

    @property
    def key(self):
        """Gets the key of this ItemDto.  # noqa: E501

        Gets or sets the unique identifier of the institution  # noqa: E501

        :return: The key of this ItemDto.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ItemDto.

        Gets or sets the unique identifier of the institution  # noqa: E501

        :param key: The key of this ItemDto.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def target_institution_logo(self):
        """Gets the target_institution_logo of this ItemDto.  # noqa: E501

        Gets or sets the institution default logo  # noqa: E501

        :return: The target_institution_logo of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._target_institution_logo

    @target_institution_logo.setter
    def target_institution_logo(self, target_institution_logo):
        """Sets the target_institution_logo of this ItemDto.

        Gets or sets the institution default logo  # noqa: E501

        :param target_institution_logo: The target_institution_logo of this ItemDto.  # noqa: E501
        :type: str
        """

        self._target_institution_logo = target_institution_logo

    @property
    def target_institution_name(self):
        """Gets the target_institution_name of this ItemDto.  # noqa: E501

        Gets or sets the name of the target institution  # noqa: E501

        :return: The target_institution_name of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._target_institution_name

    @target_institution_name.setter
    def target_institution_name(self, target_institution_name):
        """Sets the target_institution_name of this ItemDto.

        Gets or sets the name of the target institution  # noqa: E501

        :param target_institution_name: The target_institution_name of this ItemDto.  # noqa: E501
        :type: str
        """

        self._target_institution_name = target_institution_name

    @property
    def position(self):
        """Gets the position of this ItemDto.  # noqa: E501

        Gets or sets the player's position  # noqa: E501

        :return: The position of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ItemDto.

        Gets or sets the player's position  # noqa: E501

        :param position: The position of this ItemDto.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def first_name(self):
        """Gets the first_name of this ItemDto.  # noqa: E501

        Gets or sets the player's first name  # noqa: E501

        :return: The first_name of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ItemDto.

        Gets or sets the player's first name  # noqa: E501

        :param first_name: The first_name of this ItemDto.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ItemDto.  # noqa: E501

        Gets or sets the player's last name  # noqa: E501

        :return: The last_name of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ItemDto.

        Gets or sets the player's last name  # noqa: E501

        :param last_name: The last_name of this ItemDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def ranking_position(self):
        """Gets the ranking_position of this ItemDto.  # noqa: E501

        Gets or sets the ranking position  # noqa: E501

        :return: The ranking_position of this ItemDto.  # noqa: E501
        :rtype: int
        """
        return self._ranking_position

    @ranking_position.setter
    def ranking_position(self, ranking_position):
        """Sets the ranking_position of this ItemDto.

        Gets or sets the ranking position  # noqa: E501

        :param ranking_position: The ranking_position of this ItemDto.  # noqa: E501
        :type: int
        """

        self._ranking_position = ranking_position

    @property
    def previous_institution_name(self):
        """Gets the previous_institution_name of this ItemDto.  # noqa: E501

        Gets or sets the name of the previous school  # noqa: E501

        :return: The previous_institution_name of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._previous_institution_name

    @previous_institution_name.setter
    def previous_institution_name(self, previous_institution_name):
        """Sets the previous_institution_name of this ItemDto.

        Gets or sets the name of the previous school  # noqa: E501

        :param previous_institution_name: The previous_institution_name of this ItemDto.  # noqa: E501
        :type: str
        """

        self._previous_institution_name = previous_institution_name

    @property
    def previous_institution_logo(self):
        """Gets the previous_institution_logo of this ItemDto.  # noqa: E501

        Gets or sets the name of the previous school logo  # noqa: E501

        :return: The previous_institution_logo of this ItemDto.  # noqa: E501
        :rtype: str
        """
        return self._previous_institution_logo

    @previous_institution_logo.setter
    def previous_institution_logo(self, previous_institution_logo):
        """Sets the previous_institution_logo of this ItemDto.

        Gets or sets the name of the previous school logo  # noqa: E501

        :param previous_institution_logo: The previous_institution_logo of this ItemDto.  # noqa: E501
        :type: str
        """

        self._previous_institution_logo = previous_institution_logo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

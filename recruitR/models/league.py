# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class League(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'institution_key': 'int',
        'sport_key': 'int',
        'institution_group': 'InstitutionGroup',
        'in_season': 'bool',
        'cbs_abbreviation': 'str',
        'cbs_slug': 'str',
        'cbs_annotation': 'str',
        'sport': 'Sport',
        'institution': 'Institution',
        'league_conferences': 'list[LeagueConference]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'institution_key': 'institutionKey',
        'sport_key': 'sportKey',
        'institution_group': 'institutionGroup',
        'in_season': 'inSeason',
        'cbs_abbreviation': 'cbsAbbreviation',
        'cbs_slug': 'cbsSlug',
        'cbs_annotation': 'cbsAnnotation',
        'sport': 'sport',
        'institution': 'institution',
        'league_conferences': 'leagueConferences'
    }

    def __init__(self, key=None, name=None, abbreviation=None, institution_key=None, sport_key=None, institution_group=None, in_season=None, cbs_abbreviation=None, cbs_slug=None, cbs_annotation=None, sport=None, institution=None, league_conferences=None):  # noqa: E501
        """League - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._abbreviation = None
        self._institution_key = None
        self._sport_key = None
        self._institution_group = None
        self._in_season = None
        self._cbs_abbreviation = None
        self._cbs_slug = None
        self._cbs_annotation = None
        self._sport = None
        self._institution = None
        self._league_conferences = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if institution_key is not None:
            self.institution_key = institution_key
        if sport_key is not None:
            self.sport_key = sport_key
        if institution_group is not None:
            self.institution_group = institution_group
        if in_season is not None:
            self.in_season = in_season
        if cbs_abbreviation is not None:
            self.cbs_abbreviation = cbs_abbreviation
        if cbs_slug is not None:
            self.cbs_slug = cbs_slug
        if cbs_annotation is not None:
            self.cbs_annotation = cbs_annotation
        if sport is not None:
            self.sport = sport
        if institution is not None:
            self.institution = institution
        if league_conferences is not None:
            self.league_conferences = league_conferences

    @property
    def key(self):
        """Gets the key of this League.  # noqa: E501


        :return: The key of this League.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this League.


        :param key: The key of this League.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this League.  # noqa: E501


        :return: The name of this League.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this League.


        :param name: The name of this League.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this League.  # noqa: E501


        :return: The abbreviation of this League.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this League.


        :param abbreviation: The abbreviation of this League.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def institution_key(self):
        """Gets the institution_key of this League.  # noqa: E501


        :return: The institution_key of this League.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this League.


        :param institution_key: The institution_key of this League.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def sport_key(self):
        """Gets the sport_key of this League.  # noqa: E501


        :return: The sport_key of this League.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this League.


        :param sport_key: The sport_key of this League.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def institution_group(self):
        """Gets the institution_group of this League.  # noqa: E501


        :return: The institution_group of this League.  # noqa: E501
        :rtype: InstitutionGroup
        """
        return self._institution_group

    @institution_group.setter
    def institution_group(self, institution_group):
        """Sets the institution_group of this League.


        :param institution_group: The institution_group of this League.  # noqa: E501
        :type: InstitutionGroup
        """

        self._institution_group = institution_group

    @property
    def in_season(self):
        """Gets the in_season of this League.  # noqa: E501


        :return: The in_season of this League.  # noqa: E501
        :rtype: bool
        """
        return self._in_season

    @in_season.setter
    def in_season(self, in_season):
        """Sets the in_season of this League.


        :param in_season: The in_season of this League.  # noqa: E501
        :type: bool
        """

        self._in_season = in_season

    @property
    def cbs_abbreviation(self):
        """Gets the cbs_abbreviation of this League.  # noqa: E501


        :return: The cbs_abbreviation of this League.  # noqa: E501
        :rtype: str
        """
        return self._cbs_abbreviation

    @cbs_abbreviation.setter
    def cbs_abbreviation(self, cbs_abbreviation):
        """Sets the cbs_abbreviation of this League.


        :param cbs_abbreviation: The cbs_abbreviation of this League.  # noqa: E501
        :type: str
        """

        self._cbs_abbreviation = cbs_abbreviation

    @property
    def cbs_slug(self):
        """Gets the cbs_slug of this League.  # noqa: E501


        :return: The cbs_slug of this League.  # noqa: E501
        :rtype: str
        """
        return self._cbs_slug

    @cbs_slug.setter
    def cbs_slug(self, cbs_slug):
        """Sets the cbs_slug of this League.


        :param cbs_slug: The cbs_slug of this League.  # noqa: E501
        :type: str
        """

        self._cbs_slug = cbs_slug

    @property
    def cbs_annotation(self):
        """Gets the cbs_annotation of this League.  # noqa: E501


        :return: The cbs_annotation of this League.  # noqa: E501
        :rtype: str
        """
        return self._cbs_annotation

    @cbs_annotation.setter
    def cbs_annotation(self, cbs_annotation):
        """Sets the cbs_annotation of this League.


        :param cbs_annotation: The cbs_annotation of this League.  # noqa: E501
        :type: str
        """

        self._cbs_annotation = cbs_annotation

    @property
    def sport(self):
        """Gets the sport of this League.  # noqa: E501


        :return: The sport of this League.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this League.


        :param sport: The sport of this League.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def institution(self):
        """Gets the institution of this League.  # noqa: E501


        :return: The institution of this League.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this League.


        :param institution: The institution of this League.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def league_conferences(self):
        """Gets the league_conferences of this League.  # noqa: E501


        :return: The league_conferences of this League.  # noqa: E501
        :rtype: list[LeagueConference]
        """
        return self._league_conferences

    @league_conferences.setter
    def league_conferences(self, league_conferences):
        """Sets the league_conferences of this League.


        :param league_conferences: The league_conferences of this League.  # noqa: E501
        :type: list[LeagueConference]
        """

        self._league_conferences = league_conferences

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(League, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, League):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

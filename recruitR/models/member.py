# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Member(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'email': 'str',
        'euid': 'str',
        'user_key': 'int',
        'stale': 'bool',
        'status': 'MemberStatus',
        'created_date': 'datetime',
        'updated_date': 'datetime',
        'user': 'User',
        'member_segments': 'list[MemberSegment]'
    }

    attribute_map = {
        'key': 'key',
        'email': 'email',
        'euid': 'euid',
        'user_key': 'userKey',
        'stale': 'stale',
        'status': 'status',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'user': 'user',
        'member_segments': 'memberSegments'
    }

    def __init__(self, key=None, email=None, euid=None, user_key=None, stale=None, status=None, created_date=None, updated_date=None, user=None, member_segments=None):  # noqa: E501
        """Member - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._email = None
        self._euid = None
        self._user_key = None
        self._stale = None
        self._status = None
        self._created_date = None
        self._updated_date = None
        self._user = None
        self._member_segments = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if email is not None:
            self.email = email
        if euid is not None:
            self.euid = euid
        if user_key is not None:
            self.user_key = user_key
        if stale is not None:
            self.stale = stale
        if status is not None:
            self.status = status
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if user is not None:
            self.user = user
        if member_segments is not None:
            self.member_segments = member_segments

    @property
    def key(self):
        """Gets the key of this Member.  # noqa: E501


        :return: The key of this Member.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Member.


        :param key: The key of this Member.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def email(self):
        """Gets the email of this Member.  # noqa: E501


        :return: The email of this Member.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Member.


        :param email: The email of this Member.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def euid(self):
        """Gets the euid of this Member.  # noqa: E501


        :return: The euid of this Member.  # noqa: E501
        :rtype: str
        """
        return self._euid

    @euid.setter
    def euid(self, euid):
        """Sets the euid of this Member.


        :param euid: The euid of this Member.  # noqa: E501
        :type: str
        """

        self._euid = euid

    @property
    def user_key(self):
        """Gets the user_key of this Member.  # noqa: E501


        :return: The user_key of this Member.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Member.


        :param user_key: The user_key of this Member.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def stale(self):
        """Gets the stale of this Member.  # noqa: E501


        :return: The stale of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._stale

    @stale.setter
    def stale(self, stale):
        """Sets the stale of this Member.


        :param stale: The stale of this Member.  # noqa: E501
        :type: bool
        """

        self._stale = stale

    @property
    def status(self):
        """Gets the status of this Member.  # noqa: E501


        :return: The status of this Member.  # noqa: E501
        :rtype: MemberStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Member.


        :param status: The status of this Member.  # noqa: E501
        :type: MemberStatus
        """

        self._status = status

    @property
    def created_date(self):
        """Gets the created_date of this Member.  # noqa: E501


        :return: The created_date of this Member.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Member.


        :param created_date: The created_date of this Member.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this Member.  # noqa: E501


        :return: The updated_date of this Member.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Member.


        :param updated_date: The updated_date of this Member.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def user(self):
        """Gets the user of this Member.  # noqa: E501


        :return: The user of this Member.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Member.


        :param user: The user of this Member.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def member_segments(self):
        """Gets the member_segments of this Member.  # noqa: E501


        :return: The member_segments of this Member.  # noqa: E501
        :rtype: list[MemberSegment]
        """
        return self._member_segments

    @member_segments.setter
    def member_segments(self, member_segments):
        """Sets the member_segments of this Member.


        :param member_segments: The member_segments of this Member.  # noqa: E501
        :type: list[MemberSegment]
        """

        self._member_segments = member_segments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Member, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Member):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

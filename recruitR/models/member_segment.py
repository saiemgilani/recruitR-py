# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'segment_key': 'int',
        'member_key': 'int',
        'enrolled_at_location': 'EnrolledAt',
        'date_enrolled': 'datetime',
        'status': 'MemberStatus',
        'last_engagement': 'datetime',
        'status_changed': 'datetime',
        'member': 'Member',
        'segment': 'Segment'
    }

    attribute_map = {
        'key': 'key',
        'segment_key': 'segmentKey',
        'member_key': 'memberKey',
        'enrolled_at_location': 'enrolledAtLocation',
        'date_enrolled': 'dateEnrolled',
        'status': 'status',
        'last_engagement': 'lastEngagement',
        'status_changed': 'statusChanged',
        'member': 'member',
        'segment': 'segment'
    }

    def __init__(self, key=None, segment_key=None, member_key=None, enrolled_at_location=None, date_enrolled=None, status=None, last_engagement=None, status_changed=None, member=None, segment=None):  # noqa: E501
        """MemberSegment - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._segment_key = None
        self._member_key = None
        self._enrolled_at_location = None
        self._date_enrolled = None
        self._status = None
        self._last_engagement = None
        self._status_changed = None
        self._member = None
        self._segment = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self.segment_key = segment_key
        self.member_key = member_key
        self.enrolled_at_location = enrolled_at_location
        self.date_enrolled = date_enrolled
        self.status = status
        if last_engagement is not None:
            self.last_engagement = last_engagement
        if status_changed is not None:
            self.status_changed = status_changed
        if member is not None:
            self.member = member
        if segment is not None:
            self.segment = segment

    @property
    def key(self):
        """Gets the key of this MemberSegment.  # noqa: E501


        :return: The key of this MemberSegment.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MemberSegment.


        :param key: The key of this MemberSegment.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def segment_key(self):
        """Gets the segment_key of this MemberSegment.  # noqa: E501


        :return: The segment_key of this MemberSegment.  # noqa: E501
        :rtype: int
        """
        return self._segment_key

    @segment_key.setter
    def segment_key(self, segment_key):
        """Sets the segment_key of this MemberSegment.


        :param segment_key: The segment_key of this MemberSegment.  # noqa: E501
        :type: int
        """
        if segment_key is None:
            raise ValueError("Invalid value for `segment_key`, must not be `None`")  # noqa: E501

        self._segment_key = segment_key

    @property
    def member_key(self):
        """Gets the member_key of this MemberSegment.  # noqa: E501


        :return: The member_key of this MemberSegment.  # noqa: E501
        :rtype: int
        """
        return self._member_key

    @member_key.setter
    def member_key(self, member_key):
        """Sets the member_key of this MemberSegment.


        :param member_key: The member_key of this MemberSegment.  # noqa: E501
        :type: int
        """
        if member_key is None:
            raise ValueError("Invalid value for `member_key`, must not be `None`")  # noqa: E501

        self._member_key = member_key

    @property
    def enrolled_at_location(self):
        """Gets the enrolled_at_location of this MemberSegment.  # noqa: E501


        :return: The enrolled_at_location of this MemberSegment.  # noqa: E501
        :rtype: EnrolledAt
        """
        return self._enrolled_at_location

    @enrolled_at_location.setter
    def enrolled_at_location(self, enrolled_at_location):
        """Sets the enrolled_at_location of this MemberSegment.


        :param enrolled_at_location: The enrolled_at_location of this MemberSegment.  # noqa: E501
        :type: EnrolledAt
        """
        if enrolled_at_location is None:
            raise ValueError("Invalid value for `enrolled_at_location`, must not be `None`")  # noqa: E501

        self._enrolled_at_location = enrolled_at_location

    @property
    def date_enrolled(self):
        """Gets the date_enrolled of this MemberSegment.  # noqa: E501


        :return: The date_enrolled of this MemberSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._date_enrolled

    @date_enrolled.setter
    def date_enrolled(self, date_enrolled):
        """Sets the date_enrolled of this MemberSegment.


        :param date_enrolled: The date_enrolled of this MemberSegment.  # noqa: E501
        :type: datetime
        """
        if date_enrolled is None:
            raise ValueError("Invalid value for `date_enrolled`, must not be `None`")  # noqa: E501

        self._date_enrolled = date_enrolled

    @property
    def status(self):
        """Gets the status of this MemberSegment.  # noqa: E501


        :return: The status of this MemberSegment.  # noqa: E501
        :rtype: MemberStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MemberSegment.


        :param status: The status of this MemberSegment.  # noqa: E501
        :type: MemberStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def last_engagement(self):
        """Gets the last_engagement of this MemberSegment.  # noqa: E501


        :return: The last_engagement of this MemberSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_engagement

    @last_engagement.setter
    def last_engagement(self, last_engagement):
        """Sets the last_engagement of this MemberSegment.


        :param last_engagement: The last_engagement of this MemberSegment.  # noqa: E501
        :type: datetime
        """

        self._last_engagement = last_engagement

    @property
    def status_changed(self):
        """Gets the status_changed of this MemberSegment.  # noqa: E501


        :return: The status_changed of this MemberSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed

    @status_changed.setter
    def status_changed(self, status_changed):
        """Sets the status_changed of this MemberSegment.


        :param status_changed: The status_changed of this MemberSegment.  # noqa: E501
        :type: datetime
        """

        self._status_changed = status_changed

    @property
    def member(self):
        """Gets the member of this MemberSegment.  # noqa: E501


        :return: The member of this MemberSegment.  # noqa: E501
        :rtype: Member
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this MemberSegment.


        :param member: The member of this MemberSegment.  # noqa: E501
        :type: Member
        """

        self._member = member

    @property
    def segment(self):
        """Gets the segment of this MemberSegment.  # noqa: E501


        :return: The segment of this MemberSegment.  # noqa: E501
        :rtype: Segment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this MemberSegment.


        :param segment: The segment of this MemberSegment.  # noqa: E501
        :type: Segment
        """

        self._segment = segment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

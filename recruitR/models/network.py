# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Network(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'home_site_key': 'int',
        'no_reply_email': 'str',
        'support_email': 'str',
        'distribution_email': 'str',
        'features': 'NetworkFeatures',
        'video_embed': 'str',
        'sites': 'list[Site]',
        'home_site': 'Site',
        'all_access_open_enroll': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'home_site_key': 'homeSiteKey',
        'no_reply_email': 'noReplyEmail',
        'support_email': 'supportEmail',
        'distribution_email': 'distributionEmail',
        'features': 'features',
        'video_embed': 'videoEmbed',
        'sites': 'sites',
        'home_site': 'homeSite',
        'all_access_open_enroll': 'allAccessOpenEnroll'
    }

    def __init__(self, key=None, name=None, home_site_key=None, no_reply_email=None, support_email=None, distribution_email=None, features=None, video_embed=None, sites=None, home_site=None, all_access_open_enroll=None):  # noqa: E501
        """Network - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._home_site_key = None
        self._no_reply_email = None
        self._support_email = None
        self._distribution_email = None
        self._features = None
        self._video_embed = None
        self._sites = None
        self._home_site = None
        self._all_access_open_enroll = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self.name = name
        if home_site_key is not None:
            self.home_site_key = home_site_key
        if no_reply_email is not None:
            self.no_reply_email = no_reply_email
        if support_email is not None:
            self.support_email = support_email
        if distribution_email is not None:
            self.distribution_email = distribution_email
        if features is not None:
            self.features = features
        if video_embed is not None:
            self.video_embed = video_embed
        if sites is not None:
            self.sites = sites
        if home_site is not None:
            self.home_site = home_site
        if all_access_open_enroll is not None:
            self.all_access_open_enroll = all_access_open_enroll

    @property
    def key(self):
        """Gets the key of this Network.  # noqa: E501


        :return: The key of this Network.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Network.


        :param key: The key of this Network.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Network.  # noqa: E501


        :return: The name of this Network.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Network.


        :param name: The name of this Network.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def home_site_key(self):
        """Gets the home_site_key of this Network.  # noqa: E501


        :return: The home_site_key of this Network.  # noqa: E501
        :rtype: int
        """
        return self._home_site_key

    @home_site_key.setter
    def home_site_key(self, home_site_key):
        """Sets the home_site_key of this Network.


        :param home_site_key: The home_site_key of this Network.  # noqa: E501
        :type: int
        """

        self._home_site_key = home_site_key

    @property
    def no_reply_email(self):
        """Gets the no_reply_email of this Network.  # noqa: E501


        :return: The no_reply_email of this Network.  # noqa: E501
        :rtype: str
        """
        return self._no_reply_email

    @no_reply_email.setter
    def no_reply_email(self, no_reply_email):
        """Sets the no_reply_email of this Network.


        :param no_reply_email: The no_reply_email of this Network.  # noqa: E501
        :type: str
        """

        self._no_reply_email = no_reply_email

    @property
    def support_email(self):
        """Gets the support_email of this Network.  # noqa: E501


        :return: The support_email of this Network.  # noqa: E501
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this Network.


        :param support_email: The support_email of this Network.  # noqa: E501
        :type: str
        """

        self._support_email = support_email

    @property
    def distribution_email(self):
        """Gets the distribution_email of this Network.  # noqa: E501


        :return: The distribution_email of this Network.  # noqa: E501
        :rtype: str
        """
        return self._distribution_email

    @distribution_email.setter
    def distribution_email(self, distribution_email):
        """Sets the distribution_email of this Network.


        :param distribution_email: The distribution_email of this Network.  # noqa: E501
        :type: str
        """

        self._distribution_email = distribution_email

    @property
    def features(self):
        """Gets the features of this Network.  # noqa: E501


        :return: The features of this Network.  # noqa: E501
        :rtype: NetworkFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Network.


        :param features: The features of this Network.  # noqa: E501
        :type: NetworkFeatures
        """

        self._features = features

    @property
    def video_embed(self):
        """Gets the video_embed of this Network.  # noqa: E501


        :return: The video_embed of this Network.  # noqa: E501
        :rtype: str
        """
        return self._video_embed

    @video_embed.setter
    def video_embed(self, video_embed):
        """Sets the video_embed of this Network.


        :param video_embed: The video_embed of this Network.  # noqa: E501
        :type: str
        """

        self._video_embed = video_embed

    @property
    def sites(self):
        """Gets the sites of this Network.  # noqa: E501


        :return: The sites of this Network.  # noqa: E501
        :rtype: list[Site]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this Network.


        :param sites: The sites of this Network.  # noqa: E501
        :type: list[Site]
        """

        self._sites = sites

    @property
    def home_site(self):
        """Gets the home_site of this Network.  # noqa: E501


        :return: The home_site of this Network.  # noqa: E501
        :rtype: Site
        """
        return self._home_site

    @home_site.setter
    def home_site(self, home_site):
        """Sets the home_site of this Network.


        :param home_site: The home_site of this Network.  # noqa: E501
        :type: Site
        """

        self._home_site = home_site

    @property
    def all_access_open_enroll(self):
        """Gets the all_access_open_enroll of this Network.  # noqa: E501


        :return: The all_access_open_enroll of this Network.  # noqa: E501
        :rtype: bool
        """
        return self._all_access_open_enroll

    @all_access_open_enroll.setter
    def all_access_open_enroll(self, all_access_open_enroll):
        """Sets the all_access_open_enroll of this Network.


        :param all_access_open_enroll: The all_access_open_enroll of this Network.  # noqa: E501
        :type: bool
        """

        self._all_access_open_enroll = all_access_open_enroll

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Network, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Network):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

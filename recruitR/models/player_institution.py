# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerInstitution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'player_key': 'int',
        'institution_key': 'int',
        'agent_key': 'int',
        'start_year': 'int',
        'end_year': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'primary_player_sport_key': 'int',
        'early_enrollee': 'bool',
        'early_signee': 'bool',
        'height': 'float',
        'weight': 'float',
        'gpa': 'float',
        'sat': 'float',
        'act': 'float',
        'transfer_institution_key': 'int',
        'transfer_season_key': 'int',
        'transfer_eligibility': 'TransferEligibility',
        'transfer_date_time': 'datetime',
        'modified_date': 'datetime',
        'salary': 'float',
        'default_asset_key': 'int',
        'hero_asset_key': 'int',
        'end_year_or_current': 'int',
        'start_year_or_expected': 'int',
        'end_year_or_expected': 'int',
        'years': 'list[int]',
        'next_institution_type': 'InstitutionType',
        'next_institution_group': 'InstitutionGroup',
        'institution': 'Institution',
        'player': 'Player',
        'player_institution_predictions': 'list[PlayerInstitutionPrediction]',
        'player_sports': 'list[PlayerSport]',
        'primary_player_sport': 'PlayerSport',
        'transfer_institution': 'Institution',
        'default_asset': 'Asset',
        'hero_asset': 'Asset',
        'transfer_season': 'Season'
    }

    attribute_map = {
        'key': 'key',
        'player_key': 'playerKey',
        'institution_key': 'institutionKey',
        'agent_key': 'agentKey',
        'start_year': 'startYear',
        'end_year': 'endYear',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'primary_player_sport_key': 'primaryPlayerSportKey',
        'early_enrollee': 'earlyEnrollee',
        'early_signee': 'earlySignee',
        'height': 'height',
        'weight': 'weight',
        'gpa': 'gpa',
        'sat': 'sat',
        'act': 'act',
        'transfer_institution_key': 'transferInstitutionKey',
        'transfer_season_key': 'transferSeasonKey',
        'transfer_eligibility': 'transferEligibility',
        'transfer_date_time': 'transferDateTime',
        'modified_date': 'modifiedDate',
        'salary': 'salary',
        'default_asset_key': 'defaultAssetKey',
        'hero_asset_key': 'heroAssetKey',
        'end_year_or_current': 'endYearOrCurrent',
        'start_year_or_expected': 'startYearOrExpected',
        'end_year_or_expected': 'endYearOrExpected',
        'years': 'years',
        'next_institution_type': 'nextInstitutionType',
        'next_institution_group': 'nextInstitutionGroup',
        'institution': 'institution',
        'player': 'player',
        'player_institution_predictions': 'playerInstitutionPredictions',
        'player_sports': 'playerSports',
        'primary_player_sport': 'primaryPlayerSport',
        'transfer_institution': 'transferInstitution',
        'default_asset': 'defaultAsset',
        'hero_asset': 'heroAsset',
        'transfer_season': 'transferSeason'
    }

    def __init__(self, key=None, player_key=None, institution_key=None, agent_key=None, start_year=None, end_year=None, start_date=None, end_date=None, primary_player_sport_key=None, early_enrollee=None, early_signee=None, height=None, weight=None, gpa=None, sat=None, act=None, transfer_institution_key=None, transfer_season_key=None, transfer_eligibility=None, transfer_date_time=None, modified_date=None, salary=None, default_asset_key=None, hero_asset_key=None, end_year_or_current=None, start_year_or_expected=None, end_year_or_expected=None, years=None, next_institution_type=None, next_institution_group=None, institution=None, player=None, player_institution_predictions=None, player_sports=None, primary_player_sport=None, transfer_institution=None, default_asset=None, hero_asset=None, transfer_season=None):  # noqa: E501
        """PlayerInstitution - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._player_key = None
        self._institution_key = None
        self._agent_key = None
        self._start_year = None
        self._end_year = None
        self._start_date = None
        self._end_date = None
        self._primary_player_sport_key = None
        self._early_enrollee = None
        self._early_signee = None
        self._height = None
        self._weight = None
        self._gpa = None
        self._sat = None
        self._act = None
        self._transfer_institution_key = None
        self._transfer_season_key = None
        self._transfer_eligibility = None
        self._transfer_date_time = None
        self._modified_date = None
        self._salary = None
        self._default_asset_key = None
        self._hero_asset_key = None
        self._end_year_or_current = None
        self._start_year_or_expected = None
        self._end_year_or_expected = None
        self._years = None
        self._next_institution_type = None
        self._next_institution_group = None
        self._institution = None
        self._player = None
        self._player_institution_predictions = None
        self._player_sports = None
        self._primary_player_sport = None
        self._transfer_institution = None
        self._default_asset = None
        self._hero_asset = None
        self._transfer_season = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if player_key is not None:
            self.player_key = player_key
        if institution_key is not None:
            self.institution_key = institution_key
        if agent_key is not None:
            self.agent_key = agent_key
        if start_year is not None:
            self.start_year = start_year
        if end_year is not None:
            self.end_year = end_year
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if primary_player_sport_key is not None:
            self.primary_player_sport_key = primary_player_sport_key
        if early_enrollee is not None:
            self.early_enrollee = early_enrollee
        if early_signee is not None:
            self.early_signee = early_signee
        if height is not None:
            self.height = height
        if weight is not None:
            self.weight = weight
        if gpa is not None:
            self.gpa = gpa
        if sat is not None:
            self.sat = sat
        if act is not None:
            self.act = act
        if transfer_institution_key is not None:
            self.transfer_institution_key = transfer_institution_key
        if transfer_season_key is not None:
            self.transfer_season_key = transfer_season_key
        if transfer_eligibility is not None:
            self.transfer_eligibility = transfer_eligibility
        if transfer_date_time is not None:
            self.transfer_date_time = transfer_date_time
        if modified_date is not None:
            self.modified_date = modified_date
        if salary is not None:
            self.salary = salary
        if default_asset_key is not None:
            self.default_asset_key = default_asset_key
        if hero_asset_key is not None:
            self.hero_asset_key = hero_asset_key
        if end_year_or_current is not None:
            self.end_year_or_current = end_year_or_current
        if start_year_or_expected is not None:
            self.start_year_or_expected = start_year_or_expected
        if end_year_or_expected is not None:
            self.end_year_or_expected = end_year_or_expected
        if years is not None:
            self.years = years
        if next_institution_type is not None:
            self.next_institution_type = next_institution_type
        if next_institution_group is not None:
            self.next_institution_group = next_institution_group
        if institution is not None:
            self.institution = institution
        if player is not None:
            self.player = player
        if player_institution_predictions is not None:
            self.player_institution_predictions = player_institution_predictions
        if player_sports is not None:
            self.player_sports = player_sports
        if primary_player_sport is not None:
            self.primary_player_sport = primary_player_sport
        if transfer_institution is not None:
            self.transfer_institution = transfer_institution
        if default_asset is not None:
            self.default_asset = default_asset
        if hero_asset is not None:
            self.hero_asset = hero_asset
        if transfer_season is not None:
            self.transfer_season = transfer_season

    @property
    def key(self):
        """Gets the key of this PlayerInstitution.  # noqa: E501


        :return: The key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PlayerInstitution.


        :param key: The key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def player_key(self):
        """Gets the player_key of this PlayerInstitution.  # noqa: E501


        :return: The player_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._player_key

    @player_key.setter
    def player_key(self, player_key):
        """Sets the player_key of this PlayerInstitution.


        :param player_key: The player_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._player_key = player_key

    @property
    def institution_key(self):
        """Gets the institution_key of this PlayerInstitution.  # noqa: E501


        :return: The institution_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this PlayerInstitution.


        :param institution_key: The institution_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def agent_key(self):
        """Gets the agent_key of this PlayerInstitution.  # noqa: E501


        :return: The agent_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._agent_key

    @agent_key.setter
    def agent_key(self, agent_key):
        """Sets the agent_key of this PlayerInstitution.


        :param agent_key: The agent_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._agent_key = agent_key

    @property
    def start_year(self):
        """Gets the start_year of this PlayerInstitution.  # noqa: E501


        :return: The start_year of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this PlayerInstitution.


        :param start_year: The start_year of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._start_year = start_year

    @property
    def end_year(self):
        """Gets the end_year of this PlayerInstitution.  # noqa: E501


        :return: The end_year of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year):
        """Sets the end_year of this PlayerInstitution.


        :param end_year: The end_year of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._end_year = end_year

    @property
    def start_date(self):
        """Gets the start_date of this PlayerInstitution.  # noqa: E501


        :return: The start_date of this PlayerInstitution.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PlayerInstitution.


        :param start_date: The start_date of this PlayerInstitution.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this PlayerInstitution.  # noqa: E501


        :return: The end_date of this PlayerInstitution.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PlayerInstitution.


        :param end_date: The end_date of this PlayerInstitution.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def primary_player_sport_key(self):
        """Gets the primary_player_sport_key of this PlayerInstitution.  # noqa: E501


        :return: The primary_player_sport_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._primary_player_sport_key

    @primary_player_sport_key.setter
    def primary_player_sport_key(self, primary_player_sport_key):
        """Sets the primary_player_sport_key of this PlayerInstitution.


        :param primary_player_sport_key: The primary_player_sport_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._primary_player_sport_key = primary_player_sport_key

    @property
    def early_enrollee(self):
        """Gets the early_enrollee of this PlayerInstitution.  # noqa: E501


        :return: The early_enrollee of this PlayerInstitution.  # noqa: E501
        :rtype: bool
        """
        return self._early_enrollee

    @early_enrollee.setter
    def early_enrollee(self, early_enrollee):
        """Sets the early_enrollee of this PlayerInstitution.


        :param early_enrollee: The early_enrollee of this PlayerInstitution.  # noqa: E501
        :type: bool
        """

        self._early_enrollee = early_enrollee

    @property
    def early_signee(self):
        """Gets the early_signee of this PlayerInstitution.  # noqa: E501


        :return: The early_signee of this PlayerInstitution.  # noqa: E501
        :rtype: bool
        """
        return self._early_signee

    @early_signee.setter
    def early_signee(self, early_signee):
        """Sets the early_signee of this PlayerInstitution.


        :param early_signee: The early_signee of this PlayerInstitution.  # noqa: E501
        :type: bool
        """

        self._early_signee = early_signee

    @property
    def height(self):
        """Gets the height of this PlayerInstitution.  # noqa: E501


        :return: The height of this PlayerInstitution.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PlayerInstitution.


        :param height: The height of this PlayerInstitution.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this PlayerInstitution.  # noqa: E501


        :return: The weight of this PlayerInstitution.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PlayerInstitution.


        :param weight: The weight of this PlayerInstitution.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def gpa(self):
        """Gets the gpa of this PlayerInstitution.  # noqa: E501


        :return: The gpa of this PlayerInstitution.  # noqa: E501
        :rtype: float
        """
        return self._gpa

    @gpa.setter
    def gpa(self, gpa):
        """Sets the gpa of this PlayerInstitution.


        :param gpa: The gpa of this PlayerInstitution.  # noqa: E501
        :type: float
        """

        self._gpa = gpa

    @property
    def sat(self):
        """Gets the sat of this PlayerInstitution.  # noqa: E501


        :return: The sat of this PlayerInstitution.  # noqa: E501
        :rtype: float
        """
        return self._sat

    @sat.setter
    def sat(self, sat):
        """Sets the sat of this PlayerInstitution.


        :param sat: The sat of this PlayerInstitution.  # noqa: E501
        :type: float
        """

        self._sat = sat

    @property
    def act(self):
        """Gets the act of this PlayerInstitution.  # noqa: E501


        :return: The act of this PlayerInstitution.  # noqa: E501
        :rtype: float
        """
        return self._act

    @act.setter
    def act(self, act):
        """Sets the act of this PlayerInstitution.


        :param act: The act of this PlayerInstitution.  # noqa: E501
        :type: float
        """

        self._act = act

    @property
    def transfer_institution_key(self):
        """Gets the transfer_institution_key of this PlayerInstitution.  # noqa: E501


        :return: The transfer_institution_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._transfer_institution_key

    @transfer_institution_key.setter
    def transfer_institution_key(self, transfer_institution_key):
        """Sets the transfer_institution_key of this PlayerInstitution.


        :param transfer_institution_key: The transfer_institution_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._transfer_institution_key = transfer_institution_key

    @property
    def transfer_season_key(self):
        """Gets the transfer_season_key of this PlayerInstitution.  # noqa: E501


        :return: The transfer_season_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._transfer_season_key

    @transfer_season_key.setter
    def transfer_season_key(self, transfer_season_key):
        """Sets the transfer_season_key of this PlayerInstitution.


        :param transfer_season_key: The transfer_season_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._transfer_season_key = transfer_season_key

    @property
    def transfer_eligibility(self):
        """Gets the transfer_eligibility of this PlayerInstitution.  # noqa: E501


        :return: The transfer_eligibility of this PlayerInstitution.  # noqa: E501
        :rtype: TransferEligibility
        """
        return self._transfer_eligibility

    @transfer_eligibility.setter
    def transfer_eligibility(self, transfer_eligibility):
        """Sets the transfer_eligibility of this PlayerInstitution.


        :param transfer_eligibility: The transfer_eligibility of this PlayerInstitution.  # noqa: E501
        :type: TransferEligibility
        """

        self._transfer_eligibility = transfer_eligibility

    @property
    def transfer_date_time(self):
        """Gets the transfer_date_time of this PlayerInstitution.  # noqa: E501


        :return: The transfer_date_time of this PlayerInstitution.  # noqa: E501
        :rtype: datetime
        """
        return self._transfer_date_time

    @transfer_date_time.setter
    def transfer_date_time(self, transfer_date_time):
        """Sets the transfer_date_time of this PlayerInstitution.


        :param transfer_date_time: The transfer_date_time of this PlayerInstitution.  # noqa: E501
        :type: datetime
        """

        self._transfer_date_time = transfer_date_time

    @property
    def modified_date(self):
        """Gets the modified_date of this PlayerInstitution.  # noqa: E501


        :return: The modified_date of this PlayerInstitution.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this PlayerInstitution.


        :param modified_date: The modified_date of this PlayerInstitution.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def salary(self):
        """Gets the salary of this PlayerInstitution.  # noqa: E501


        :return: The salary of this PlayerInstitution.  # noqa: E501
        :rtype: float
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this PlayerInstitution.


        :param salary: The salary of this PlayerInstitution.  # noqa: E501
        :type: float
        """

        self._salary = salary

    @property
    def default_asset_key(self):
        """Gets the default_asset_key of this PlayerInstitution.  # noqa: E501


        :return: The default_asset_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._default_asset_key

    @default_asset_key.setter
    def default_asset_key(self, default_asset_key):
        """Sets the default_asset_key of this PlayerInstitution.


        :param default_asset_key: The default_asset_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._default_asset_key = default_asset_key

    @property
    def hero_asset_key(self):
        """Gets the hero_asset_key of this PlayerInstitution.  # noqa: E501


        :return: The hero_asset_key of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._hero_asset_key

    @hero_asset_key.setter
    def hero_asset_key(self, hero_asset_key):
        """Sets the hero_asset_key of this PlayerInstitution.


        :param hero_asset_key: The hero_asset_key of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._hero_asset_key = hero_asset_key

    @property
    def end_year_or_current(self):
        """Gets the end_year_or_current of this PlayerInstitution.  # noqa: E501


        :return: The end_year_or_current of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._end_year_or_current

    @end_year_or_current.setter
    def end_year_or_current(self, end_year_or_current):
        """Sets the end_year_or_current of this PlayerInstitution.


        :param end_year_or_current: The end_year_or_current of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._end_year_or_current = end_year_or_current

    @property
    def start_year_or_expected(self):
        """Gets the start_year_or_expected of this PlayerInstitution.  # noqa: E501


        :return: The start_year_or_expected of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._start_year_or_expected

    @start_year_or_expected.setter
    def start_year_or_expected(self, start_year_or_expected):
        """Sets the start_year_or_expected of this PlayerInstitution.


        :param start_year_or_expected: The start_year_or_expected of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._start_year_or_expected = start_year_or_expected

    @property
    def end_year_or_expected(self):
        """Gets the end_year_or_expected of this PlayerInstitution.  # noqa: E501


        :return: The end_year_or_expected of this PlayerInstitution.  # noqa: E501
        :rtype: int
        """
        return self._end_year_or_expected

    @end_year_or_expected.setter
    def end_year_or_expected(self, end_year_or_expected):
        """Sets the end_year_or_expected of this PlayerInstitution.


        :param end_year_or_expected: The end_year_or_expected of this PlayerInstitution.  # noqa: E501
        :type: int
        """

        self._end_year_or_expected = end_year_or_expected

    @property
    def years(self):
        """Gets the years of this PlayerInstitution.  # noqa: E501


        :return: The years of this PlayerInstitution.  # noqa: E501
        :rtype: list[int]
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this PlayerInstitution.


        :param years: The years of this PlayerInstitution.  # noqa: E501
        :type: list[int]
        """

        self._years = years

    @property
    def next_institution_type(self):
        """Gets the next_institution_type of this PlayerInstitution.  # noqa: E501


        :return: The next_institution_type of this PlayerInstitution.  # noqa: E501
        :rtype: InstitutionType
        """
        return self._next_institution_type

    @next_institution_type.setter
    def next_institution_type(self, next_institution_type):
        """Sets the next_institution_type of this PlayerInstitution.


        :param next_institution_type: The next_institution_type of this PlayerInstitution.  # noqa: E501
        :type: InstitutionType
        """

        self._next_institution_type = next_institution_type

    @property
    def next_institution_group(self):
        """Gets the next_institution_group of this PlayerInstitution.  # noqa: E501


        :return: The next_institution_group of this PlayerInstitution.  # noqa: E501
        :rtype: InstitutionGroup
        """
        return self._next_institution_group

    @next_institution_group.setter
    def next_institution_group(self, next_institution_group):
        """Sets the next_institution_group of this PlayerInstitution.


        :param next_institution_group: The next_institution_group of this PlayerInstitution.  # noqa: E501
        :type: InstitutionGroup
        """

        self._next_institution_group = next_institution_group

    @property
    def institution(self):
        """Gets the institution of this PlayerInstitution.  # noqa: E501


        :return: The institution of this PlayerInstitution.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this PlayerInstitution.


        :param institution: The institution of this PlayerInstitution.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def player(self):
        """Gets the player of this PlayerInstitution.  # noqa: E501


        :return: The player of this PlayerInstitution.  # noqa: E501
        :rtype: Player
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this PlayerInstitution.


        :param player: The player of this PlayerInstitution.  # noqa: E501
        :type: Player
        """

        self._player = player

    @property
    def player_institution_predictions(self):
        """Gets the player_institution_predictions of this PlayerInstitution.  # noqa: E501


        :return: The player_institution_predictions of this PlayerInstitution.  # noqa: E501
        :rtype: list[PlayerInstitutionPrediction]
        """
        return self._player_institution_predictions

    @player_institution_predictions.setter
    def player_institution_predictions(self, player_institution_predictions):
        """Sets the player_institution_predictions of this PlayerInstitution.


        :param player_institution_predictions: The player_institution_predictions of this PlayerInstitution.  # noqa: E501
        :type: list[PlayerInstitutionPrediction]
        """

        self._player_institution_predictions = player_institution_predictions

    @property
    def player_sports(self):
        """Gets the player_sports of this PlayerInstitution.  # noqa: E501


        :return: The player_sports of this PlayerInstitution.  # noqa: E501
        :rtype: list[PlayerSport]
        """
        return self._player_sports

    @player_sports.setter
    def player_sports(self, player_sports):
        """Sets the player_sports of this PlayerInstitution.


        :param player_sports: The player_sports of this PlayerInstitution.  # noqa: E501
        :type: list[PlayerSport]
        """

        self._player_sports = player_sports

    @property
    def primary_player_sport(self):
        """Gets the primary_player_sport of this PlayerInstitution.  # noqa: E501


        :return: The primary_player_sport of this PlayerInstitution.  # noqa: E501
        :rtype: PlayerSport
        """
        return self._primary_player_sport

    @primary_player_sport.setter
    def primary_player_sport(self, primary_player_sport):
        """Sets the primary_player_sport of this PlayerInstitution.


        :param primary_player_sport: The primary_player_sport of this PlayerInstitution.  # noqa: E501
        :type: PlayerSport
        """

        self._primary_player_sport = primary_player_sport

    @property
    def transfer_institution(self):
        """Gets the transfer_institution of this PlayerInstitution.  # noqa: E501


        :return: The transfer_institution of this PlayerInstitution.  # noqa: E501
        :rtype: Institution
        """
        return self._transfer_institution

    @transfer_institution.setter
    def transfer_institution(self, transfer_institution):
        """Sets the transfer_institution of this PlayerInstitution.


        :param transfer_institution: The transfer_institution of this PlayerInstitution.  # noqa: E501
        :type: Institution
        """

        self._transfer_institution = transfer_institution

    @property
    def default_asset(self):
        """Gets the default_asset of this PlayerInstitution.  # noqa: E501


        :return: The default_asset of this PlayerInstitution.  # noqa: E501
        :rtype: Asset
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this PlayerInstitution.


        :param default_asset: The default_asset of this PlayerInstitution.  # noqa: E501
        :type: Asset
        """

        self._default_asset = default_asset

    @property
    def hero_asset(self):
        """Gets the hero_asset of this PlayerInstitution.  # noqa: E501


        :return: The hero_asset of this PlayerInstitution.  # noqa: E501
        :rtype: Asset
        """
        return self._hero_asset

    @hero_asset.setter
    def hero_asset(self, hero_asset):
        """Sets the hero_asset of this PlayerInstitution.


        :param hero_asset: The hero_asset of this PlayerInstitution.  # noqa: E501
        :type: Asset
        """

        self._hero_asset = hero_asset

    @property
    def transfer_season(self):
        """Gets the transfer_season of this PlayerInstitution.  # noqa: E501


        :return: The transfer_season of this PlayerInstitution.  # noqa: E501
        :rtype: Season
        """
        return self._transfer_season

    @transfer_season.setter
    def transfer_season(self, transfer_season):
        """Sets the transfer_season of this PlayerInstitution.


        :param transfer_season: The transfer_season of this PlayerInstitution.  # noqa: E501
        :type: Season
        """

        self._transfer_season = transfer_season

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerInstitution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerInstitution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

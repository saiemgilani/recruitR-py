# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerInstitutionPrediction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'player_institution_key': 'int',
        'prediction_status': 'PredictionStatus',
        'updated_on': 'datetime',
        'user_key': 'int',
        'institution_key': 'int',
        'confidence': 'int',
        'user': 'User',
        'player_institution': 'PlayerInstitution',
        'institution': 'Institution'
    }

    attribute_map = {
        'key': 'key',
        'player_institution_key': 'playerInstitutionKey',
        'prediction_status': 'predictionStatus',
        'updated_on': 'updatedOn',
        'user_key': 'userKey',
        'institution_key': 'institutionKey',
        'confidence': 'confidence',
        'user': 'user',
        'player_institution': 'playerInstitution',
        'institution': 'institution'
    }

    def __init__(self, key=None, player_institution_key=None, prediction_status=None, updated_on=None, user_key=None, institution_key=None, confidence=None, user=None, player_institution=None, institution=None):  # noqa: E501
        """PlayerInstitutionPrediction - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._player_institution_key = None
        self._prediction_status = None
        self._updated_on = None
        self._user_key = None
        self._institution_key = None
        self._confidence = None
        self._user = None
        self._player_institution = None
        self._institution = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if player_institution_key is not None:
            self.player_institution_key = player_institution_key
        if prediction_status is not None:
            self.prediction_status = prediction_status
        if updated_on is not None:
            self.updated_on = updated_on
        if user_key is not None:
            self.user_key = user_key
        if institution_key is not None:
            self.institution_key = institution_key
        if confidence is not None:
            self.confidence = confidence
        if user is not None:
            self.user = user
        if player_institution is not None:
            self.player_institution = player_institution
        if institution is not None:
            self.institution = institution

    @property
    def key(self):
        """Gets the key of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The key of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PlayerInstitutionPrediction.


        :param key: The key of this PlayerInstitutionPrediction.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def player_institution_key(self):
        """Gets the player_institution_key of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The player_institution_key of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: int
        """
        return self._player_institution_key

    @player_institution_key.setter
    def player_institution_key(self, player_institution_key):
        """Sets the player_institution_key of this PlayerInstitutionPrediction.


        :param player_institution_key: The player_institution_key of this PlayerInstitutionPrediction.  # noqa: E501
        :type: int
        """

        self._player_institution_key = player_institution_key

    @property
    def prediction_status(self):
        """Gets the prediction_status of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The prediction_status of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: PredictionStatus
        """
        return self._prediction_status

    @prediction_status.setter
    def prediction_status(self, prediction_status):
        """Sets the prediction_status of this PlayerInstitutionPrediction.


        :param prediction_status: The prediction_status of this PlayerInstitutionPrediction.  # noqa: E501
        :type: PredictionStatus
        """

        self._prediction_status = prediction_status

    @property
    def updated_on(self):
        """Gets the updated_on of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The updated_on of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this PlayerInstitutionPrediction.


        :param updated_on: The updated_on of this PlayerInstitutionPrediction.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def user_key(self):
        """Gets the user_key of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The user_key of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this PlayerInstitutionPrediction.


        :param user_key: The user_key of this PlayerInstitutionPrediction.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def institution_key(self):
        """Gets the institution_key of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The institution_key of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this PlayerInstitutionPrediction.


        :param institution_key: The institution_key of this PlayerInstitutionPrediction.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def confidence(self):
        """Gets the confidence of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The confidence of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this PlayerInstitutionPrediction.


        :param confidence: The confidence of this PlayerInstitutionPrediction.  # noqa: E501
        :type: int
        """

        self._confidence = confidence

    @property
    def user(self):
        """Gets the user of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The user of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PlayerInstitutionPrediction.


        :param user: The user of this PlayerInstitutionPrediction.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def player_institution(self):
        """Gets the player_institution of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The player_institution of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: PlayerInstitution
        """
        return self._player_institution

    @player_institution.setter
    def player_institution(self, player_institution):
        """Sets the player_institution of this PlayerInstitutionPrediction.


        :param player_institution: The player_institution of this PlayerInstitutionPrediction.  # noqa: E501
        :type: PlayerInstitution
        """

        self._player_institution = player_institution

    @property
    def institution(self):
        """Gets the institution of this PlayerInstitutionPrediction.  # noqa: E501


        :return: The institution of this PlayerInstitutionPrediction.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this PlayerInstitutionPrediction.


        :param institution: The institution of this PlayerInstitutionPrediction.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerInstitutionPrediction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerInstitutionPrediction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerSport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'sport_key': 'int',
        'player_institution_key': 'int',
        'rating': 'float',
        'rivals_grade': 'float',
        'espn_grade': 'float',
        'scout_grade': 'float',
        'composite_strength': 'int',
        'composite_rating': 'float',
        'primary_player_position_key': 'int',
        'under_evaluation': 'bool',
        'recruitment_key': 'int',
        'player_sport_ranking_key': 'int',
        'player_institution': 'PlayerInstitution',
        'recruitments': 'list[Recruitment]',
        'player_sport_ranking': 'PlayerSportRanking',
        'player_sport_rankings': 'list[PlayerSportRanking]',
        'player_positions': 'list[PlayerPosition]',
        'recruitment': 'Recruitment',
        'player_position': 'PlayerPosition'
    }

    attribute_map = {
        'key': 'key',
        'sport_key': 'sportKey',
        'player_institution_key': 'playerInstitutionKey',
        'rating': 'rating',
        'rivals_grade': 'rivalsGrade',
        'espn_grade': 'espnGrade',
        'scout_grade': 'scoutGrade',
        'composite_strength': 'compositeStrength',
        'composite_rating': 'compositeRating',
        'primary_player_position_key': 'primaryPlayerPositionKey',
        'under_evaluation': 'underEvaluation',
        'recruitment_key': 'recruitmentKey',
        'player_sport_ranking_key': 'playerSportRankingKey',
        'player_institution': 'playerInstitution',
        'recruitments': 'recruitments',
        'player_sport_ranking': 'playerSportRanking',
        'player_sport_rankings': 'playerSportRankings',
        'player_positions': 'playerPositions',
        'recruitment': 'recruitment',
        'player_position': 'playerPosition'
    }

    def __init__(self, key=None, sport_key=None, player_institution_key=None, rating=None, rivals_grade=None, espn_grade=None, scout_grade=None, composite_strength=None, composite_rating=None, primary_player_position_key=None, under_evaluation=None, recruitment_key=None, player_sport_ranking_key=None, player_institution=None, recruitments=None, player_sport_ranking=None, player_sport_rankings=None, player_positions=None, recruitment=None, player_position=None):  # noqa: E501
        """PlayerSport - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._sport_key = None
        self._player_institution_key = None
        self._rating = None
        self._rivals_grade = None
        self._espn_grade = None
        self._scout_grade = None
        self._composite_strength = None
        self._composite_rating = None
        self._primary_player_position_key = None
        self._under_evaluation = None
        self._recruitment_key = None
        self._player_sport_ranking_key = None
        self._player_institution = None
        self._recruitments = None
        self._player_sport_ranking = None
        self._player_sport_rankings = None
        self._player_positions = None
        self._recruitment = None
        self._player_position = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if sport_key is not None:
            self.sport_key = sport_key
        if player_institution_key is not None:
            self.player_institution_key = player_institution_key
        if rating is not None:
            self.rating = rating
        if rivals_grade is not None:
            self.rivals_grade = rivals_grade
        if espn_grade is not None:
            self.espn_grade = espn_grade
        if scout_grade is not None:
            self.scout_grade = scout_grade
        if composite_strength is not None:
            self.composite_strength = composite_strength
        if composite_rating is not None:
            self.composite_rating = composite_rating
        if primary_player_position_key is not None:
            self.primary_player_position_key = primary_player_position_key
        if under_evaluation is not None:
            self.under_evaluation = under_evaluation
        if recruitment_key is not None:
            self.recruitment_key = recruitment_key
        if player_sport_ranking_key is not None:
            self.player_sport_ranking_key = player_sport_ranking_key
        if player_institution is not None:
            self.player_institution = player_institution
        if recruitments is not None:
            self.recruitments = recruitments
        if player_sport_ranking is not None:
            self.player_sport_ranking = player_sport_ranking
        if player_sport_rankings is not None:
            self.player_sport_rankings = player_sport_rankings
        if player_positions is not None:
            self.player_positions = player_positions
        if recruitment is not None:
            self.recruitment = recruitment
        if player_position is not None:
            self.player_position = player_position

    @property
    def key(self):
        """Gets the key of this PlayerSport.  # noqa: E501


        :return: The key of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PlayerSport.


        :param key: The key of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def sport_key(self):
        """Gets the sport_key of this PlayerSport.  # noqa: E501


        :return: The sport_key of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this PlayerSport.


        :param sport_key: The sport_key of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def player_institution_key(self):
        """Gets the player_institution_key of this PlayerSport.  # noqa: E501


        :return: The player_institution_key of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._player_institution_key

    @player_institution_key.setter
    def player_institution_key(self, player_institution_key):
        """Sets the player_institution_key of this PlayerSport.


        :param player_institution_key: The player_institution_key of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._player_institution_key = player_institution_key

    @property
    def rating(self):
        """Gets the rating of this PlayerSport.  # noqa: E501


        :return: The rating of this PlayerSport.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this PlayerSport.


        :param rating: The rating of this PlayerSport.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def rivals_grade(self):
        """Gets the rivals_grade of this PlayerSport.  # noqa: E501


        :return: The rivals_grade of this PlayerSport.  # noqa: E501
        :rtype: float
        """
        return self._rivals_grade

    @rivals_grade.setter
    def rivals_grade(self, rivals_grade):
        """Sets the rivals_grade of this PlayerSport.


        :param rivals_grade: The rivals_grade of this PlayerSport.  # noqa: E501
        :type: float
        """

        self._rivals_grade = rivals_grade

    @property
    def espn_grade(self):
        """Gets the espn_grade of this PlayerSport.  # noqa: E501


        :return: The espn_grade of this PlayerSport.  # noqa: E501
        :rtype: float
        """
        return self._espn_grade

    @espn_grade.setter
    def espn_grade(self, espn_grade):
        """Sets the espn_grade of this PlayerSport.


        :param espn_grade: The espn_grade of this PlayerSport.  # noqa: E501
        :type: float
        """

        self._espn_grade = espn_grade

    @property
    def scout_grade(self):
        """Gets the scout_grade of this PlayerSport.  # noqa: E501


        :return: The scout_grade of this PlayerSport.  # noqa: E501
        :rtype: float
        """
        return self._scout_grade

    @scout_grade.setter
    def scout_grade(self, scout_grade):
        """Sets the scout_grade of this PlayerSport.


        :param scout_grade: The scout_grade of this PlayerSport.  # noqa: E501
        :type: float
        """

        self._scout_grade = scout_grade

    @property
    def composite_strength(self):
        """Gets the composite_strength of this PlayerSport.  # noqa: E501


        :return: The composite_strength of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._composite_strength

    @composite_strength.setter
    def composite_strength(self, composite_strength):
        """Sets the composite_strength of this PlayerSport.


        :param composite_strength: The composite_strength of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._composite_strength = composite_strength

    @property
    def composite_rating(self):
        """Gets the composite_rating of this PlayerSport.  # noqa: E501


        :return: The composite_rating of this PlayerSport.  # noqa: E501
        :rtype: float
        """
        return self._composite_rating

    @composite_rating.setter
    def composite_rating(self, composite_rating):
        """Sets the composite_rating of this PlayerSport.


        :param composite_rating: The composite_rating of this PlayerSport.  # noqa: E501
        :type: float
        """

        self._composite_rating = composite_rating

    @property
    def primary_player_position_key(self):
        """Gets the primary_player_position_key of this PlayerSport.  # noqa: E501


        :return: The primary_player_position_key of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._primary_player_position_key

    @primary_player_position_key.setter
    def primary_player_position_key(self, primary_player_position_key):
        """Sets the primary_player_position_key of this PlayerSport.


        :param primary_player_position_key: The primary_player_position_key of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._primary_player_position_key = primary_player_position_key

    @property
    def under_evaluation(self):
        """Gets the under_evaluation of this PlayerSport.  # noqa: E501


        :return: The under_evaluation of this PlayerSport.  # noqa: E501
        :rtype: bool
        """
        return self._under_evaluation

    @under_evaluation.setter
    def under_evaluation(self, under_evaluation):
        """Sets the under_evaluation of this PlayerSport.


        :param under_evaluation: The under_evaluation of this PlayerSport.  # noqa: E501
        :type: bool
        """

        self._under_evaluation = under_evaluation

    @property
    def recruitment_key(self):
        """Gets the recruitment_key of this PlayerSport.  # noqa: E501


        :return: The recruitment_key of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._recruitment_key

    @recruitment_key.setter
    def recruitment_key(self, recruitment_key):
        """Sets the recruitment_key of this PlayerSport.


        :param recruitment_key: The recruitment_key of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._recruitment_key = recruitment_key

    @property
    def player_sport_ranking_key(self):
        """Gets the player_sport_ranking_key of this PlayerSport.  # noqa: E501


        :return: The player_sport_ranking_key of this PlayerSport.  # noqa: E501
        :rtype: int
        """
        return self._player_sport_ranking_key

    @player_sport_ranking_key.setter
    def player_sport_ranking_key(self, player_sport_ranking_key):
        """Sets the player_sport_ranking_key of this PlayerSport.


        :param player_sport_ranking_key: The player_sport_ranking_key of this PlayerSport.  # noqa: E501
        :type: int
        """

        self._player_sport_ranking_key = player_sport_ranking_key

    @property
    def player_institution(self):
        """Gets the player_institution of this PlayerSport.  # noqa: E501


        :return: The player_institution of this PlayerSport.  # noqa: E501
        :rtype: PlayerInstitution
        """
        return self._player_institution

    @player_institution.setter
    def player_institution(self, player_institution):
        """Sets the player_institution of this PlayerSport.


        :param player_institution: The player_institution of this PlayerSport.  # noqa: E501
        :type: PlayerInstitution
        """

        self._player_institution = player_institution

    @property
    def recruitments(self):
        """Gets the recruitments of this PlayerSport.  # noqa: E501


        :return: The recruitments of this PlayerSport.  # noqa: E501
        :rtype: list[Recruitment]
        """
        return self._recruitments

    @recruitments.setter
    def recruitments(self, recruitments):
        """Sets the recruitments of this PlayerSport.


        :param recruitments: The recruitments of this PlayerSport.  # noqa: E501
        :type: list[Recruitment]
        """

        self._recruitments = recruitments

    @property
    def player_sport_ranking(self):
        """Gets the player_sport_ranking of this PlayerSport.  # noqa: E501


        :return: The player_sport_ranking of this PlayerSport.  # noqa: E501
        :rtype: PlayerSportRanking
        """
        return self._player_sport_ranking

    @player_sport_ranking.setter
    def player_sport_ranking(self, player_sport_ranking):
        """Sets the player_sport_ranking of this PlayerSport.


        :param player_sport_ranking: The player_sport_ranking of this PlayerSport.  # noqa: E501
        :type: PlayerSportRanking
        """

        self._player_sport_ranking = player_sport_ranking

    @property
    def player_sport_rankings(self):
        """Gets the player_sport_rankings of this PlayerSport.  # noqa: E501


        :return: The player_sport_rankings of this PlayerSport.  # noqa: E501
        :rtype: list[PlayerSportRanking]
        """
        return self._player_sport_rankings

    @player_sport_rankings.setter
    def player_sport_rankings(self, player_sport_rankings):
        """Sets the player_sport_rankings of this PlayerSport.


        :param player_sport_rankings: The player_sport_rankings of this PlayerSport.  # noqa: E501
        :type: list[PlayerSportRanking]
        """

        self._player_sport_rankings = player_sport_rankings

    @property
    def player_positions(self):
        """Gets the player_positions of this PlayerSport.  # noqa: E501


        :return: The player_positions of this PlayerSport.  # noqa: E501
        :rtype: list[PlayerPosition]
        """
        return self._player_positions

    @player_positions.setter
    def player_positions(self, player_positions):
        """Sets the player_positions of this PlayerSport.


        :param player_positions: The player_positions of this PlayerSport.  # noqa: E501
        :type: list[PlayerPosition]
        """

        self._player_positions = player_positions

    @property
    def recruitment(self):
        """Gets the recruitment of this PlayerSport.  # noqa: E501


        :return: The recruitment of this PlayerSport.  # noqa: E501
        :rtype: Recruitment
        """
        return self._recruitment

    @recruitment.setter
    def recruitment(self, recruitment):
        """Sets the recruitment of this PlayerSport.


        :param recruitment: The recruitment of this PlayerSport.  # noqa: E501
        :type: Recruitment
        """

        self._recruitment = recruitment

    @property
    def player_position(self):
        """Gets the player_position of this PlayerSport.  # noqa: E501


        :return: The player_position of this PlayerSport.  # noqa: E501
        :rtype: PlayerPosition
        """
        return self._player_position

    @player_position.setter
    def player_position(self, player_position):
        """Sets the player_position of this PlayerSport.


        :param player_position: The player_position of this PlayerSport.  # noqa: E501
        :type: PlayerPosition
        """

        self._player_position = player_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerSport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerSport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

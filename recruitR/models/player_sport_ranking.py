# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerSportRanking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'ranking_key': 'int',
        'player_sport_key': 'int',
        'order': 'int',
        'position_key': 'int',
        'position_group_key': 'int',
        'institution_group': 'InstitutionGroup',
        'state_key': 'int',
        'region_key': 'int',
        'rating': 'float',
        'scout_rating': 'float',
        'composite_strength': 'int',
        'composite_rating': 'float',
        'overall_rank': 'int',
        'overall_scout_rank': 'int',
        'overall_composite_rank': 'int',
        'group_rank': 'int',
        'group_scout_rank': 'int',
        'group_composite_rank': 'int',
        'position_group_rank': 'int',
        'position_group_scout_rank': 'int',
        'position_group_composite_rank': 'int',
        'position_rank': 'int',
        'position_scout_rank': 'int',
        'position_composite_rank': 'int',
        'state_rank': 'int',
        'state_scout_rank': 'int',
        'state_composite_rank': 'int',
        'region_rank': 'int',
        'region_scout_rank': 'int',
        'region_composite_rank': 'int',
        'average_rank': 'int',
        'average_scout_rank': 'int',
        'average_composite_rank': 'int',
        'move': 'int',
        'previous_group_rank': 'int',
        'blurb': 'str',
        'player_sport': 'PlayerSport',
        'ranking': 'Ranking',
        'position': 'Position',
        'player_sports': 'list[PlayerSport]'
    }

    attribute_map = {
        'key': 'key',
        'ranking_key': 'rankingKey',
        'player_sport_key': 'playerSportKey',
        'order': 'order',
        'position_key': 'positionKey',
        'position_group_key': 'positionGroupKey',
        'institution_group': 'institutionGroup',
        'state_key': 'stateKey',
        'region_key': 'regionKey',
        'rating': 'rating',
        'scout_rating': 'scoutRating',
        'composite_strength': 'compositeStrength',
        'composite_rating': 'compositeRating',
        'overall_rank': 'overallRank',
        'overall_scout_rank': 'overallScoutRank',
        'overall_composite_rank': 'overallCompositeRank',
        'group_rank': 'groupRank',
        'group_scout_rank': 'groupScoutRank',
        'group_composite_rank': 'groupCompositeRank',
        'position_group_rank': 'positionGroupRank',
        'position_group_scout_rank': 'positionGroupScoutRank',
        'position_group_composite_rank': 'positionGroupCompositeRank',
        'position_rank': 'positionRank',
        'position_scout_rank': 'positionScoutRank',
        'position_composite_rank': 'positionCompositeRank',
        'state_rank': 'stateRank',
        'state_scout_rank': 'stateScoutRank',
        'state_composite_rank': 'stateCompositeRank',
        'region_rank': 'regionRank',
        'region_scout_rank': 'regionScoutRank',
        'region_composite_rank': 'regionCompositeRank',
        'average_rank': 'averageRank',
        'average_scout_rank': 'averageScoutRank',
        'average_composite_rank': 'averageCompositeRank',
        'move': 'move',
        'previous_group_rank': 'previousGroupRank',
        'blurb': 'blurb',
        'player_sport': 'playerSport',
        'ranking': 'ranking',
        'position': 'position',
        'player_sports': 'playerSports'
    }

    def __init__(self, key=None, ranking_key=None, player_sport_key=None, order=None, position_key=None, position_group_key=None, institution_group=None, state_key=None, region_key=None, rating=None, scout_rating=None, composite_strength=None, composite_rating=None, overall_rank=None, overall_scout_rank=None, overall_composite_rank=None, group_rank=None, group_scout_rank=None, group_composite_rank=None, position_group_rank=None, position_group_scout_rank=None, position_group_composite_rank=None, position_rank=None, position_scout_rank=None, position_composite_rank=None, state_rank=None, state_scout_rank=None, state_composite_rank=None, region_rank=None, region_scout_rank=None, region_composite_rank=None, average_rank=None, average_scout_rank=None, average_composite_rank=None, move=None, previous_group_rank=None, blurb=None, player_sport=None, ranking=None, position=None, player_sports=None):  # noqa: E501
        """PlayerSportRanking - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._ranking_key = None
        self._player_sport_key = None
        self._order = None
        self._position_key = None
        self._position_group_key = None
        self._institution_group = None
        self._state_key = None
        self._region_key = None
        self._rating = None
        self._scout_rating = None
        self._composite_strength = None
        self._composite_rating = None
        self._overall_rank = None
        self._overall_scout_rank = None
        self._overall_composite_rank = None
        self._group_rank = None
        self._group_scout_rank = None
        self._group_composite_rank = None
        self._position_group_rank = None
        self._position_group_scout_rank = None
        self._position_group_composite_rank = None
        self._position_rank = None
        self._position_scout_rank = None
        self._position_composite_rank = None
        self._state_rank = None
        self._state_scout_rank = None
        self._state_composite_rank = None
        self._region_rank = None
        self._region_scout_rank = None
        self._region_composite_rank = None
        self._average_rank = None
        self._average_scout_rank = None
        self._average_composite_rank = None
        self._move = None
        self._previous_group_rank = None
        self._blurb = None
        self._player_sport = None
        self._ranking = None
        self._position = None
        self._player_sports = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if ranking_key is not None:
            self.ranking_key = ranking_key
        if player_sport_key is not None:
            self.player_sport_key = player_sport_key
        if order is not None:
            self.order = order
        if position_key is not None:
            self.position_key = position_key
        if position_group_key is not None:
            self.position_group_key = position_group_key
        if institution_group is not None:
            self.institution_group = institution_group
        if state_key is not None:
            self.state_key = state_key
        if region_key is not None:
            self.region_key = region_key
        if rating is not None:
            self.rating = rating
        if scout_rating is not None:
            self.scout_rating = scout_rating
        if composite_strength is not None:
            self.composite_strength = composite_strength
        if composite_rating is not None:
            self.composite_rating = composite_rating
        if overall_rank is not None:
            self.overall_rank = overall_rank
        if overall_scout_rank is not None:
            self.overall_scout_rank = overall_scout_rank
        if overall_composite_rank is not None:
            self.overall_composite_rank = overall_composite_rank
        if group_rank is not None:
            self.group_rank = group_rank
        if group_scout_rank is not None:
            self.group_scout_rank = group_scout_rank
        if group_composite_rank is not None:
            self.group_composite_rank = group_composite_rank
        if position_group_rank is not None:
            self.position_group_rank = position_group_rank
        if position_group_scout_rank is not None:
            self.position_group_scout_rank = position_group_scout_rank
        if position_group_composite_rank is not None:
            self.position_group_composite_rank = position_group_composite_rank
        if position_rank is not None:
            self.position_rank = position_rank
        if position_scout_rank is not None:
            self.position_scout_rank = position_scout_rank
        if position_composite_rank is not None:
            self.position_composite_rank = position_composite_rank
        if state_rank is not None:
            self.state_rank = state_rank
        if state_scout_rank is not None:
            self.state_scout_rank = state_scout_rank
        if state_composite_rank is not None:
            self.state_composite_rank = state_composite_rank
        if region_rank is not None:
            self.region_rank = region_rank
        if region_scout_rank is not None:
            self.region_scout_rank = region_scout_rank
        if region_composite_rank is not None:
            self.region_composite_rank = region_composite_rank
        if average_rank is not None:
            self.average_rank = average_rank
        if average_scout_rank is not None:
            self.average_scout_rank = average_scout_rank
        if average_composite_rank is not None:
            self.average_composite_rank = average_composite_rank
        if move is not None:
            self.move = move
        if previous_group_rank is not None:
            self.previous_group_rank = previous_group_rank
        if blurb is not None:
            self.blurb = blurb
        if player_sport is not None:
            self.player_sport = player_sport
        if ranking is not None:
            self.ranking = ranking
        if position is not None:
            self.position = position
        if player_sports is not None:
            self.player_sports = player_sports

    @property
    def key(self):
        """Gets the key of this PlayerSportRanking.  # noqa: E501


        :return: The key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PlayerSportRanking.


        :param key: The key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def ranking_key(self):
        """Gets the ranking_key of this PlayerSportRanking.  # noqa: E501


        :return: The ranking_key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._ranking_key

    @ranking_key.setter
    def ranking_key(self, ranking_key):
        """Sets the ranking_key of this PlayerSportRanking.


        :param ranking_key: The ranking_key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._ranking_key = ranking_key

    @property
    def player_sport_key(self):
        """Gets the player_sport_key of this PlayerSportRanking.  # noqa: E501


        :return: The player_sport_key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._player_sport_key

    @player_sport_key.setter
    def player_sport_key(self, player_sport_key):
        """Sets the player_sport_key of this PlayerSportRanking.


        :param player_sport_key: The player_sport_key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._player_sport_key = player_sport_key

    @property
    def order(self):
        """Gets the order of this PlayerSportRanking.  # noqa: E501


        :return: The order of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PlayerSportRanking.


        :param order: The order of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def position_key(self):
        """Gets the position_key of this PlayerSportRanking.  # noqa: E501


        :return: The position_key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_key

    @position_key.setter
    def position_key(self, position_key):
        """Sets the position_key of this PlayerSportRanking.


        :param position_key: The position_key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_key = position_key

    @property
    def position_group_key(self):
        """Gets the position_group_key of this PlayerSportRanking.  # noqa: E501


        :return: The position_group_key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_group_key

    @position_group_key.setter
    def position_group_key(self, position_group_key):
        """Sets the position_group_key of this PlayerSportRanking.


        :param position_group_key: The position_group_key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_group_key = position_group_key

    @property
    def institution_group(self):
        """Gets the institution_group of this PlayerSportRanking.  # noqa: E501


        :return: The institution_group of this PlayerSportRanking.  # noqa: E501
        :rtype: InstitutionGroup
        """
        return self._institution_group

    @institution_group.setter
    def institution_group(self, institution_group):
        """Sets the institution_group of this PlayerSportRanking.


        :param institution_group: The institution_group of this PlayerSportRanking.  # noqa: E501
        :type: InstitutionGroup
        """

        self._institution_group = institution_group

    @property
    def state_key(self):
        """Gets the state_key of this PlayerSportRanking.  # noqa: E501


        :return: The state_key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._state_key

    @state_key.setter
    def state_key(self, state_key):
        """Sets the state_key of this PlayerSportRanking.


        :param state_key: The state_key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._state_key = state_key

    @property
    def region_key(self):
        """Gets the region_key of this PlayerSportRanking.  # noqa: E501


        :return: The region_key of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._region_key

    @region_key.setter
    def region_key(self, region_key):
        """Sets the region_key of this PlayerSportRanking.


        :param region_key: The region_key of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._region_key = region_key

    @property
    def rating(self):
        """Gets the rating of this PlayerSportRanking.  # noqa: E501


        :return: The rating of this PlayerSportRanking.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this PlayerSportRanking.


        :param rating: The rating of this PlayerSportRanking.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def scout_rating(self):
        """Gets the scout_rating of this PlayerSportRanking.  # noqa: E501


        :return: The scout_rating of this PlayerSportRanking.  # noqa: E501
        :rtype: float
        """
        return self._scout_rating

    @scout_rating.setter
    def scout_rating(self, scout_rating):
        """Sets the scout_rating of this PlayerSportRanking.


        :param scout_rating: The scout_rating of this PlayerSportRanking.  # noqa: E501
        :type: float
        """

        self._scout_rating = scout_rating

    @property
    def composite_strength(self):
        """Gets the composite_strength of this PlayerSportRanking.  # noqa: E501


        :return: The composite_strength of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._composite_strength

    @composite_strength.setter
    def composite_strength(self, composite_strength):
        """Sets the composite_strength of this PlayerSportRanking.


        :param composite_strength: The composite_strength of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._composite_strength = composite_strength

    @property
    def composite_rating(self):
        """Gets the composite_rating of this PlayerSportRanking.  # noqa: E501


        :return: The composite_rating of this PlayerSportRanking.  # noqa: E501
        :rtype: float
        """
        return self._composite_rating

    @composite_rating.setter
    def composite_rating(self, composite_rating):
        """Sets the composite_rating of this PlayerSportRanking.


        :param composite_rating: The composite_rating of this PlayerSportRanking.  # noqa: E501
        :type: float
        """

        self._composite_rating = composite_rating

    @property
    def overall_rank(self):
        """Gets the overall_rank of this PlayerSportRanking.  # noqa: E501


        :return: The overall_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._overall_rank

    @overall_rank.setter
    def overall_rank(self, overall_rank):
        """Sets the overall_rank of this PlayerSportRanking.


        :param overall_rank: The overall_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._overall_rank = overall_rank

    @property
    def overall_scout_rank(self):
        """Gets the overall_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The overall_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._overall_scout_rank

    @overall_scout_rank.setter
    def overall_scout_rank(self, overall_scout_rank):
        """Sets the overall_scout_rank of this PlayerSportRanking.


        :param overall_scout_rank: The overall_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._overall_scout_rank = overall_scout_rank

    @property
    def overall_composite_rank(self):
        """Gets the overall_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The overall_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._overall_composite_rank

    @overall_composite_rank.setter
    def overall_composite_rank(self, overall_composite_rank):
        """Sets the overall_composite_rank of this PlayerSportRanking.


        :param overall_composite_rank: The overall_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._overall_composite_rank = overall_composite_rank

    @property
    def group_rank(self):
        """Gets the group_rank of this PlayerSportRanking.  # noqa: E501


        :return: The group_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._group_rank

    @group_rank.setter
    def group_rank(self, group_rank):
        """Sets the group_rank of this PlayerSportRanking.


        :param group_rank: The group_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._group_rank = group_rank

    @property
    def group_scout_rank(self):
        """Gets the group_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The group_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._group_scout_rank

    @group_scout_rank.setter
    def group_scout_rank(self, group_scout_rank):
        """Sets the group_scout_rank of this PlayerSportRanking.


        :param group_scout_rank: The group_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._group_scout_rank = group_scout_rank

    @property
    def group_composite_rank(self):
        """Gets the group_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The group_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._group_composite_rank

    @group_composite_rank.setter
    def group_composite_rank(self, group_composite_rank):
        """Sets the group_composite_rank of this PlayerSportRanking.


        :param group_composite_rank: The group_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._group_composite_rank = group_composite_rank

    @property
    def position_group_rank(self):
        """Gets the position_group_rank of this PlayerSportRanking.  # noqa: E501


        :return: The position_group_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_group_rank

    @position_group_rank.setter
    def position_group_rank(self, position_group_rank):
        """Sets the position_group_rank of this PlayerSportRanking.


        :param position_group_rank: The position_group_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_group_rank = position_group_rank

    @property
    def position_group_scout_rank(self):
        """Gets the position_group_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The position_group_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_group_scout_rank

    @position_group_scout_rank.setter
    def position_group_scout_rank(self, position_group_scout_rank):
        """Sets the position_group_scout_rank of this PlayerSportRanking.


        :param position_group_scout_rank: The position_group_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_group_scout_rank = position_group_scout_rank

    @property
    def position_group_composite_rank(self):
        """Gets the position_group_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The position_group_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_group_composite_rank

    @position_group_composite_rank.setter
    def position_group_composite_rank(self, position_group_composite_rank):
        """Sets the position_group_composite_rank of this PlayerSportRanking.


        :param position_group_composite_rank: The position_group_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_group_composite_rank = position_group_composite_rank

    @property
    def position_rank(self):
        """Gets the position_rank of this PlayerSportRanking.  # noqa: E501


        :return: The position_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_rank

    @position_rank.setter
    def position_rank(self, position_rank):
        """Sets the position_rank of this PlayerSportRanking.


        :param position_rank: The position_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_rank = position_rank

    @property
    def position_scout_rank(self):
        """Gets the position_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The position_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_scout_rank

    @position_scout_rank.setter
    def position_scout_rank(self, position_scout_rank):
        """Sets the position_scout_rank of this PlayerSportRanking.


        :param position_scout_rank: The position_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_scout_rank = position_scout_rank

    @property
    def position_composite_rank(self):
        """Gets the position_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The position_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._position_composite_rank

    @position_composite_rank.setter
    def position_composite_rank(self, position_composite_rank):
        """Sets the position_composite_rank of this PlayerSportRanking.


        :param position_composite_rank: The position_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._position_composite_rank = position_composite_rank

    @property
    def state_rank(self):
        """Gets the state_rank of this PlayerSportRanking.  # noqa: E501


        :return: The state_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._state_rank

    @state_rank.setter
    def state_rank(self, state_rank):
        """Sets the state_rank of this PlayerSportRanking.


        :param state_rank: The state_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._state_rank = state_rank

    @property
    def state_scout_rank(self):
        """Gets the state_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The state_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._state_scout_rank

    @state_scout_rank.setter
    def state_scout_rank(self, state_scout_rank):
        """Sets the state_scout_rank of this PlayerSportRanking.


        :param state_scout_rank: The state_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._state_scout_rank = state_scout_rank

    @property
    def state_composite_rank(self):
        """Gets the state_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The state_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._state_composite_rank

    @state_composite_rank.setter
    def state_composite_rank(self, state_composite_rank):
        """Sets the state_composite_rank of this PlayerSportRanking.


        :param state_composite_rank: The state_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._state_composite_rank = state_composite_rank

    @property
    def region_rank(self):
        """Gets the region_rank of this PlayerSportRanking.  # noqa: E501


        :return: The region_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._region_rank

    @region_rank.setter
    def region_rank(self, region_rank):
        """Sets the region_rank of this PlayerSportRanking.


        :param region_rank: The region_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._region_rank = region_rank

    @property
    def region_scout_rank(self):
        """Gets the region_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The region_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._region_scout_rank

    @region_scout_rank.setter
    def region_scout_rank(self, region_scout_rank):
        """Sets the region_scout_rank of this PlayerSportRanking.


        :param region_scout_rank: The region_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._region_scout_rank = region_scout_rank

    @property
    def region_composite_rank(self):
        """Gets the region_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The region_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._region_composite_rank

    @region_composite_rank.setter
    def region_composite_rank(self, region_composite_rank):
        """Sets the region_composite_rank of this PlayerSportRanking.


        :param region_composite_rank: The region_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._region_composite_rank = region_composite_rank

    @property
    def average_rank(self):
        """Gets the average_rank of this PlayerSportRanking.  # noqa: E501


        :return: The average_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._average_rank

    @average_rank.setter
    def average_rank(self, average_rank):
        """Sets the average_rank of this PlayerSportRanking.


        :param average_rank: The average_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._average_rank = average_rank

    @property
    def average_scout_rank(self):
        """Gets the average_scout_rank of this PlayerSportRanking.  # noqa: E501


        :return: The average_scout_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._average_scout_rank

    @average_scout_rank.setter
    def average_scout_rank(self, average_scout_rank):
        """Sets the average_scout_rank of this PlayerSportRanking.


        :param average_scout_rank: The average_scout_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._average_scout_rank = average_scout_rank

    @property
    def average_composite_rank(self):
        """Gets the average_composite_rank of this PlayerSportRanking.  # noqa: E501


        :return: The average_composite_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._average_composite_rank

    @average_composite_rank.setter
    def average_composite_rank(self, average_composite_rank):
        """Sets the average_composite_rank of this PlayerSportRanking.


        :param average_composite_rank: The average_composite_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._average_composite_rank = average_composite_rank

    @property
    def move(self):
        """Gets the move of this PlayerSportRanking.  # noqa: E501


        :return: The move of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this PlayerSportRanking.


        :param move: The move of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._move = move

    @property
    def previous_group_rank(self):
        """Gets the previous_group_rank of this PlayerSportRanking.  # noqa: E501


        :return: The previous_group_rank of this PlayerSportRanking.  # noqa: E501
        :rtype: int
        """
        return self._previous_group_rank

    @previous_group_rank.setter
    def previous_group_rank(self, previous_group_rank):
        """Sets the previous_group_rank of this PlayerSportRanking.


        :param previous_group_rank: The previous_group_rank of this PlayerSportRanking.  # noqa: E501
        :type: int
        """

        self._previous_group_rank = previous_group_rank

    @property
    def blurb(self):
        """Gets the blurb of this PlayerSportRanking.  # noqa: E501


        :return: The blurb of this PlayerSportRanking.  # noqa: E501
        :rtype: str
        """
        return self._blurb

    @blurb.setter
    def blurb(self, blurb):
        """Sets the blurb of this PlayerSportRanking.


        :param blurb: The blurb of this PlayerSportRanking.  # noqa: E501
        :type: str
        """

        self._blurb = blurb

    @property
    def player_sport(self):
        """Gets the player_sport of this PlayerSportRanking.  # noqa: E501


        :return: The player_sport of this PlayerSportRanking.  # noqa: E501
        :rtype: PlayerSport
        """
        return self._player_sport

    @player_sport.setter
    def player_sport(self, player_sport):
        """Sets the player_sport of this PlayerSportRanking.


        :param player_sport: The player_sport of this PlayerSportRanking.  # noqa: E501
        :type: PlayerSport
        """

        self._player_sport = player_sport

    @property
    def ranking(self):
        """Gets the ranking of this PlayerSportRanking.  # noqa: E501


        :return: The ranking of this PlayerSportRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this PlayerSportRanking.


        :param ranking: The ranking of this PlayerSportRanking.  # noqa: E501
        :type: Ranking
        """

        self._ranking = ranking

    @property
    def position(self):
        """Gets the position of this PlayerSportRanking.  # noqa: E501


        :return: The position of this PlayerSportRanking.  # noqa: E501
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayerSportRanking.


        :param position: The position of this PlayerSportRanking.  # noqa: E501
        :type: Position
        """

        self._position = position

    @property
    def player_sports(self):
        """Gets the player_sports of this PlayerSportRanking.  # noqa: E501


        :return: The player_sports of this PlayerSportRanking.  # noqa: E501
        :rtype: list[PlayerSport]
        """
        return self._player_sports

    @player_sports.setter
    def player_sports(self, player_sports):
        """Sets the player_sports of this PlayerSportRanking.


        :param player_sports: The player_sports of this PlayerSportRanking.  # noqa: E501
        :type: list[PlayerSport]
        """

        self._player_sports = player_sports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerSportRanking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerSportRanking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

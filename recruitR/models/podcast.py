# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Podcast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'id': 'str',
        'create_date': 'datetime',
        'update_date': 'datetime',
        'site_key': 'int',
        'title': 'str',
        'image': 'str',
        'subtitle': 'str',
        'summary': 'str',
        'uid': 'str',
        'slug': 'str',
        'network_id': 'str',
        'original_rss_url': 'str',
        'itunes_identifier': 'str',
        'stitcher_identifier': 'str',
        'episodes_count': 'int',
        'spotify_identifier': 'str',
        'google_play_identifier': 'str',
        'episode_limit': 'int',
        'feed_url': 'str',
        'external_id': 'str',
        'featured': 'bool',
        'order': 'int',
        'site': 'Site',
        'episodes': 'list[Episode]',
        'podcast_itunes_categories': 'list[PodcastItunesCategory]',
        'categories': 'list[str]'
    }

    attribute_map = {
        'key': 'key',
        'id': 'id',
        'create_date': 'createDate',
        'update_date': 'updateDate',
        'site_key': 'siteKey',
        'title': 'title',
        'image': 'image',
        'subtitle': 'subtitle',
        'summary': 'summary',
        'uid': 'uid',
        'slug': 'slug',
        'network_id': 'networkId',
        'original_rss_url': 'originalRssUrl',
        'itunes_identifier': 'itunesIdentifier',
        'stitcher_identifier': 'stitcherIdentifier',
        'episodes_count': 'episodesCount',
        'spotify_identifier': 'spotifyIdentifier',
        'google_play_identifier': 'googlePlayIdentifier',
        'episode_limit': 'episodeLimit',
        'feed_url': 'feedUrl',
        'external_id': 'externalId',
        'featured': 'featured',
        'order': 'order',
        'site': 'site',
        'episodes': 'episodes',
        'podcast_itunes_categories': 'podcastItunesCategories',
        'categories': 'categories'
    }

    def __init__(self, key=None, id=None, create_date=None, update_date=None, site_key=None, title=None, image=None, subtitle=None, summary=None, uid=None, slug=None, network_id=None, original_rss_url=None, itunes_identifier=None, stitcher_identifier=None, episodes_count=None, spotify_identifier=None, google_play_identifier=None, episode_limit=None, feed_url=None, external_id=None, featured=None, order=None, site=None, episodes=None, podcast_itunes_categories=None, categories=None):  # noqa: E501
        """Podcast - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._id = None
        self._create_date = None
        self._update_date = None
        self._site_key = None
        self._title = None
        self._image = None
        self._subtitle = None
        self._summary = None
        self._uid = None
        self._slug = None
        self._network_id = None
        self._original_rss_url = None
        self._itunes_identifier = None
        self._stitcher_identifier = None
        self._episodes_count = None
        self._spotify_identifier = None
        self._google_play_identifier = None
        self._episode_limit = None
        self._feed_url = None
        self._external_id = None
        self._featured = None
        self._order = None
        self._site = None
        self._episodes = None
        self._podcast_itunes_categories = None
        self._categories = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date
        if site_key is not None:
            self.site_key = site_key
        if title is not None:
            self.title = title
        if image is not None:
            self.image = image
        if subtitle is not None:
            self.subtitle = subtitle
        if summary is not None:
            self.summary = summary
        if uid is not None:
            self.uid = uid
        if slug is not None:
            self.slug = slug
        if network_id is not None:
            self.network_id = network_id
        if original_rss_url is not None:
            self.original_rss_url = original_rss_url
        if itunes_identifier is not None:
            self.itunes_identifier = itunes_identifier
        if stitcher_identifier is not None:
            self.stitcher_identifier = stitcher_identifier
        if episodes_count is not None:
            self.episodes_count = episodes_count
        if spotify_identifier is not None:
            self.spotify_identifier = spotify_identifier
        if google_play_identifier is not None:
            self.google_play_identifier = google_play_identifier
        if episode_limit is not None:
            self.episode_limit = episode_limit
        if feed_url is not None:
            self.feed_url = feed_url
        if external_id is not None:
            self.external_id = external_id
        if featured is not None:
            self.featured = featured
        if order is not None:
            self.order = order
        if site is not None:
            self.site = site
        if episodes is not None:
            self.episodes = episodes
        if podcast_itunes_categories is not None:
            self.podcast_itunes_categories = podcast_itunes_categories
        if categories is not None:
            self.categories = categories

    @property
    def key(self):
        """Gets the key of this Podcast.  # noqa: E501


        :return: The key of this Podcast.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Podcast.


        :param key: The key of this Podcast.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this Podcast.  # noqa: E501


        :return: The id of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Podcast.


        :param id: The id of this Podcast.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this Podcast.  # noqa: E501


        :return: The create_date of this Podcast.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Podcast.


        :param create_date: The create_date of this Podcast.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this Podcast.  # noqa: E501


        :return: The update_date of this Podcast.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Podcast.


        :param update_date: The update_date of this Podcast.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def site_key(self):
        """Gets the site_key of this Podcast.  # noqa: E501


        :return: The site_key of this Podcast.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this Podcast.


        :param site_key: The site_key of this Podcast.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def title(self):
        """Gets the title of this Podcast.  # noqa: E501


        :return: The title of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Podcast.


        :param title: The title of this Podcast.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def image(self):
        """Gets the image of this Podcast.  # noqa: E501


        :return: The image of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Podcast.


        :param image: The image of this Podcast.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def subtitle(self):
        """Gets the subtitle of this Podcast.  # noqa: E501


        :return: The subtitle of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this Podcast.


        :param subtitle: The subtitle of this Podcast.  # noqa: E501
        :type: str
        """

        self._subtitle = subtitle

    @property
    def summary(self):
        """Gets the summary of this Podcast.  # noqa: E501


        :return: The summary of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Podcast.


        :param summary: The summary of this Podcast.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def uid(self):
        """Gets the uid of this Podcast.  # noqa: E501


        :return: The uid of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Podcast.


        :param uid: The uid of this Podcast.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def slug(self):
        """Gets the slug of this Podcast.  # noqa: E501


        :return: The slug of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Podcast.


        :param slug: The slug of this Podcast.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def network_id(self):
        """Gets the network_id of this Podcast.  # noqa: E501


        :return: The network_id of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this Podcast.


        :param network_id: The network_id of this Podcast.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    @property
    def original_rss_url(self):
        """Gets the original_rss_url of this Podcast.  # noqa: E501


        :return: The original_rss_url of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._original_rss_url

    @original_rss_url.setter
    def original_rss_url(self, original_rss_url):
        """Sets the original_rss_url of this Podcast.


        :param original_rss_url: The original_rss_url of this Podcast.  # noqa: E501
        :type: str
        """

        self._original_rss_url = original_rss_url

    @property
    def itunes_identifier(self):
        """Gets the itunes_identifier of this Podcast.  # noqa: E501


        :return: The itunes_identifier of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._itunes_identifier

    @itunes_identifier.setter
    def itunes_identifier(self, itunes_identifier):
        """Sets the itunes_identifier of this Podcast.


        :param itunes_identifier: The itunes_identifier of this Podcast.  # noqa: E501
        :type: str
        """

        self._itunes_identifier = itunes_identifier

    @property
    def stitcher_identifier(self):
        """Gets the stitcher_identifier of this Podcast.  # noqa: E501


        :return: The stitcher_identifier of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._stitcher_identifier

    @stitcher_identifier.setter
    def stitcher_identifier(self, stitcher_identifier):
        """Sets the stitcher_identifier of this Podcast.


        :param stitcher_identifier: The stitcher_identifier of this Podcast.  # noqa: E501
        :type: str
        """

        self._stitcher_identifier = stitcher_identifier

    @property
    def episodes_count(self):
        """Gets the episodes_count of this Podcast.  # noqa: E501


        :return: The episodes_count of this Podcast.  # noqa: E501
        :rtype: int
        """
        return self._episodes_count

    @episodes_count.setter
    def episodes_count(self, episodes_count):
        """Sets the episodes_count of this Podcast.


        :param episodes_count: The episodes_count of this Podcast.  # noqa: E501
        :type: int
        """

        self._episodes_count = episodes_count

    @property
    def spotify_identifier(self):
        """Gets the spotify_identifier of this Podcast.  # noqa: E501


        :return: The spotify_identifier of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._spotify_identifier

    @spotify_identifier.setter
    def spotify_identifier(self, spotify_identifier):
        """Sets the spotify_identifier of this Podcast.


        :param spotify_identifier: The spotify_identifier of this Podcast.  # noqa: E501
        :type: str
        """

        self._spotify_identifier = spotify_identifier

    @property
    def google_play_identifier(self):
        """Gets the google_play_identifier of this Podcast.  # noqa: E501


        :return: The google_play_identifier of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._google_play_identifier

    @google_play_identifier.setter
    def google_play_identifier(self, google_play_identifier):
        """Sets the google_play_identifier of this Podcast.


        :param google_play_identifier: The google_play_identifier of this Podcast.  # noqa: E501
        :type: str
        """

        self._google_play_identifier = google_play_identifier

    @property
    def episode_limit(self):
        """Gets the episode_limit of this Podcast.  # noqa: E501


        :return: The episode_limit of this Podcast.  # noqa: E501
        :rtype: int
        """
        return self._episode_limit

    @episode_limit.setter
    def episode_limit(self, episode_limit):
        """Sets the episode_limit of this Podcast.


        :param episode_limit: The episode_limit of this Podcast.  # noqa: E501
        :type: int
        """

        self._episode_limit = episode_limit

    @property
    def feed_url(self):
        """Gets the feed_url of this Podcast.  # noqa: E501


        :return: The feed_url of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._feed_url

    @feed_url.setter
    def feed_url(self, feed_url):
        """Sets the feed_url of this Podcast.


        :param feed_url: The feed_url of this Podcast.  # noqa: E501
        :type: str
        """

        self._feed_url = feed_url

    @property
    def external_id(self):
        """Gets the external_id of this Podcast.  # noqa: E501


        :return: The external_id of this Podcast.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Podcast.


        :param external_id: The external_id of this Podcast.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def featured(self):
        """Gets the featured of this Podcast.  # noqa: E501


        :return: The featured of this Podcast.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this Podcast.


        :param featured: The featured of this Podcast.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def order(self):
        """Gets the order of this Podcast.  # noqa: E501


        :return: The order of this Podcast.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Podcast.


        :param order: The order of this Podcast.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def site(self):
        """Gets the site of this Podcast.  # noqa: E501


        :return: The site of this Podcast.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Podcast.


        :param site: The site of this Podcast.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def episodes(self):
        """Gets the episodes of this Podcast.  # noqa: E501


        :return: The episodes of this Podcast.  # noqa: E501
        :rtype: list[Episode]
        """
        return self._episodes

    @episodes.setter
    def episodes(self, episodes):
        """Sets the episodes of this Podcast.


        :param episodes: The episodes of this Podcast.  # noqa: E501
        :type: list[Episode]
        """

        self._episodes = episodes

    @property
    def podcast_itunes_categories(self):
        """Gets the podcast_itunes_categories of this Podcast.  # noqa: E501


        :return: The podcast_itunes_categories of this Podcast.  # noqa: E501
        :rtype: list[PodcastItunesCategory]
        """
        return self._podcast_itunes_categories

    @podcast_itunes_categories.setter
    def podcast_itunes_categories(self, podcast_itunes_categories):
        """Sets the podcast_itunes_categories of this Podcast.


        :param podcast_itunes_categories: The podcast_itunes_categories of this Podcast.  # noqa: E501
        :type: list[PodcastItunesCategory]
        """

        self._podcast_itunes_categories = podcast_itunes_categories

    @property
    def categories(self):
        """Gets the categories of this Podcast.  # noqa: E501


        :return: The categories of this Podcast.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Podcast.


        :param categories: The categories of this Podcast.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Podcast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Podcast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

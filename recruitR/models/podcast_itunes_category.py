# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PodcastItunesCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'podcast_key': 'int',
        'itunes_category_key': 'int',
        'podcast': 'Podcast',
        'itunes_category': 'ItunesCategory'
    }

    attribute_map = {
        'key': 'key',
        'podcast_key': 'podcastKey',
        'itunes_category_key': 'itunesCategoryKey',
        'podcast': 'podcast',
        'itunes_category': 'itunesCategory'
    }

    def __init__(self, key=None, podcast_key=None, itunes_category_key=None, podcast=None, itunes_category=None):  # noqa: E501
        """PodcastItunesCategory - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._podcast_key = None
        self._itunes_category_key = None
        self._podcast = None
        self._itunes_category = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if podcast_key is not None:
            self.podcast_key = podcast_key
        if itunes_category_key is not None:
            self.itunes_category_key = itunes_category_key
        if podcast is not None:
            self.podcast = podcast
        if itunes_category is not None:
            self.itunes_category = itunes_category

    @property
    def key(self):
        """Gets the key of this PodcastItunesCategory.  # noqa: E501


        :return: The key of this PodcastItunesCategory.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PodcastItunesCategory.


        :param key: The key of this PodcastItunesCategory.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def podcast_key(self):
        """Gets the podcast_key of this PodcastItunesCategory.  # noqa: E501


        :return: The podcast_key of this PodcastItunesCategory.  # noqa: E501
        :rtype: int
        """
        return self._podcast_key

    @podcast_key.setter
    def podcast_key(self, podcast_key):
        """Sets the podcast_key of this PodcastItunesCategory.


        :param podcast_key: The podcast_key of this PodcastItunesCategory.  # noqa: E501
        :type: int
        """

        self._podcast_key = podcast_key

    @property
    def itunes_category_key(self):
        """Gets the itunes_category_key of this PodcastItunesCategory.  # noqa: E501


        :return: The itunes_category_key of this PodcastItunesCategory.  # noqa: E501
        :rtype: int
        """
        return self._itunes_category_key

    @itunes_category_key.setter
    def itunes_category_key(self, itunes_category_key):
        """Sets the itunes_category_key of this PodcastItunesCategory.


        :param itunes_category_key: The itunes_category_key of this PodcastItunesCategory.  # noqa: E501
        :type: int
        """

        self._itunes_category_key = itunes_category_key

    @property
    def podcast(self):
        """Gets the podcast of this PodcastItunesCategory.  # noqa: E501


        :return: The podcast of this PodcastItunesCategory.  # noqa: E501
        :rtype: Podcast
        """
        return self._podcast

    @podcast.setter
    def podcast(self, podcast):
        """Sets the podcast of this PodcastItunesCategory.


        :param podcast: The podcast of this PodcastItunesCategory.  # noqa: E501
        :type: Podcast
        """

        self._podcast = podcast

    @property
    def itunes_category(self):
        """Gets the itunes_category of this PodcastItunesCategory.  # noqa: E501


        :return: The itunes_category of this PodcastItunesCategory.  # noqa: E501
        :rtype: ItunesCategory
        """
        return self._itunes_category

    @itunes_category.setter
    def itunes_category(self, itunes_category):
        """Sets the itunes_category of this PodcastItunesCategory.


        :param itunes_category: The itunes_category of this PodcastItunesCategory.  # noqa: E501
        :type: ItunesCategory
        """

        self._itunes_category = itunes_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PodcastItunesCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PodcastItunesCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

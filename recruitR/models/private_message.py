# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'private_message_users': 'list[PrivateMessageUser]',
        'home_channel_key': 'int',
        'home_channel': 'Channel',
        'asset_key': 'int',
        'default_asset': 'Asset',
        'seo': 'str',
        'teaser': 'str',
        'locked': 'bool',
        'heat': 'int',
        'reply_count': 'int',
        'ordered_date': 'datetime',
        'external_affiliation_key': 'int',
        'external_id': 'str',
        'sport_key': 'int',
        'sport': 'Sport',
        'recruiting': 'bool',
        'hotness_set': 'datetime',
        'current_hotness': 'HeatLevel',
        'seconds_hot': 'int',
        'seconds_warmer': 'int',
        'seconds_warm': 'int',
        'seconds_pinned': 'int',
        'replies': 'list[Reply]',
        'channel_contents': 'list[ChannelContent]',
        'deleted_replies': 'list[DeletedReply]',
        'coach_contents': 'list[CoachContent]',
        'event_contents': 'list[EventContent]',
        'institution_contents': 'list[InstitutionContent]',
        'player_contents': 'list[PlayerContent]',
        'stat_game_contents': 'list[StatGameContent]',
        'full_contents': 'list[IContentTagLink]',
        'key': 'int',
        'post_type': 'PostType',
        'status': 'PostStatuses',
        '_date': 'datetime',
        'user_key': 'int',
        'read': 'AccessLevel',
        'write': 'AccessLevel',
        'ip': 'str',
        'medium': 'PostMedium',
        'body': 'str',
        'title': 'str',
        'user': 'User',
        'post_votes': 'list[PostVote]',
        'post_assets': 'list[PostAsset]',
        'latest_asset': 'PostAsset'
    }

    attribute_map = {
        'private_message_users': 'privateMessageUsers',
        'home_channel_key': 'homeChannelKey',
        'home_channel': 'homeChannel',
        'asset_key': 'assetKey',
        'default_asset': 'defaultAsset',
        'seo': 'seo',
        'teaser': 'teaser',
        'locked': 'locked',
        'heat': 'heat',
        'reply_count': 'replyCount',
        'ordered_date': 'orderedDate',
        'external_affiliation_key': 'externalAffiliationKey',
        'external_id': 'externalId',
        'sport_key': 'sportKey',
        'sport': 'sport',
        'recruiting': 'recruiting',
        'hotness_set': 'hotnessSet',
        'current_hotness': 'currentHotness',
        'seconds_hot': 'secondsHot',
        'seconds_warmer': 'secondsWarmer',
        'seconds_warm': 'secondsWarm',
        'seconds_pinned': 'secondsPinned',
        'replies': 'replies',
        'channel_contents': 'channelContents',
        'deleted_replies': 'deletedReplies',
        'coach_contents': 'coachContents',
        'event_contents': 'eventContents',
        'institution_contents': 'institutionContents',
        'player_contents': 'playerContents',
        'stat_game_contents': 'statGameContents',
        'full_contents': 'fullContents',
        'key': 'key',
        'post_type': 'postType',
        'status': 'status',
        '_date': 'date',
        'user_key': 'userKey',
        'read': 'read',
        'write': 'write',
        'ip': 'ip',
        'medium': 'medium',
        'body': 'body',
        'title': 'title',
        'user': 'user',
        'post_votes': 'postVotes',
        'post_assets': 'postAssets',
        'latest_asset': 'latestAsset'
    }

    def __init__(self, private_message_users=None, home_channel_key=None, home_channel=None, asset_key=None, default_asset=None, seo=None, teaser=None, locked=None, heat=None, reply_count=None, ordered_date=None, external_affiliation_key=None, external_id=None, sport_key=None, sport=None, recruiting=None, hotness_set=None, current_hotness=None, seconds_hot=None, seconds_warmer=None, seconds_warm=None, seconds_pinned=None, replies=None, channel_contents=None, deleted_replies=None, coach_contents=None, event_contents=None, institution_contents=None, player_contents=None, stat_game_contents=None, full_contents=None, key=None, post_type=None, status=None, _date=None, user_key=None, read=None, write=None, ip=None, medium=None, body=None, title=None, user=None, post_votes=None, post_assets=None, latest_asset=None):  # noqa: E501
        """PrivateMessage - a model defined in Swagger"""  # noqa: E501
        self._private_message_users = None
        self._home_channel_key = None
        self._home_channel = None
        self._asset_key = None
        self._default_asset = None
        self._seo = None
        self._teaser = None
        self._locked = None
        self._heat = None
        self._reply_count = None
        self._ordered_date = None
        self._external_affiliation_key = None
        self._external_id = None
        self._sport_key = None
        self._sport = None
        self._recruiting = None
        self._hotness_set = None
        self._current_hotness = None
        self._seconds_hot = None
        self._seconds_warmer = None
        self._seconds_warm = None
        self._seconds_pinned = None
        self._replies = None
        self._channel_contents = None
        self._deleted_replies = None
        self._coach_contents = None
        self._event_contents = None
        self._institution_contents = None
        self._player_contents = None
        self._stat_game_contents = None
        self._full_contents = None
        self._key = None
        self._post_type = None
        self._status = None
        self.__date = None
        self._user_key = None
        self._read = None
        self._write = None
        self._ip = None
        self._medium = None
        self._body = None
        self._title = None
        self._user = None
        self._post_votes = None
        self._post_assets = None
        self._latest_asset = None
        self.discriminator = None
        if private_message_users is not None:
            self.private_message_users = private_message_users
        if home_channel_key is not None:
            self.home_channel_key = home_channel_key
        if home_channel is not None:
            self.home_channel = home_channel
        if asset_key is not None:
            self.asset_key = asset_key
        if default_asset is not None:
            self.default_asset = default_asset
        if seo is not None:
            self.seo = seo
        if teaser is not None:
            self.teaser = teaser
        self.locked = locked
        if heat is not None:
            self.heat = heat
        if reply_count is not None:
            self.reply_count = reply_count
        if ordered_date is not None:
            self.ordered_date = ordered_date
        if external_affiliation_key is not None:
            self.external_affiliation_key = external_affiliation_key
        if external_id is not None:
            self.external_id = external_id
        if sport_key is not None:
            self.sport_key = sport_key
        if sport is not None:
            self.sport = sport
        self.recruiting = recruiting
        if hotness_set is not None:
            self.hotness_set = hotness_set
        if current_hotness is not None:
            self.current_hotness = current_hotness
        if seconds_hot is not None:
            self.seconds_hot = seconds_hot
        if seconds_warmer is not None:
            self.seconds_warmer = seconds_warmer
        if seconds_warm is not None:
            self.seconds_warm = seconds_warm
        if seconds_pinned is not None:
            self.seconds_pinned = seconds_pinned
        if replies is not None:
            self.replies = replies
        if channel_contents is not None:
            self.channel_contents = channel_contents
        if deleted_replies is not None:
            self.deleted_replies = deleted_replies
        if coach_contents is not None:
            self.coach_contents = coach_contents
        if event_contents is not None:
            self.event_contents = event_contents
        if institution_contents is not None:
            self.institution_contents = institution_contents
        if player_contents is not None:
            self.player_contents = player_contents
        if stat_game_contents is not None:
            self.stat_game_contents = stat_game_contents
        if full_contents is not None:
            self.full_contents = full_contents
        if key is not None:
            self.key = key
        if post_type is not None:
            self.post_type = post_type
        if status is not None:
            self.status = status
        if _date is not None:
            self._date = _date
        if user_key is not None:
            self.user_key = user_key
        if read is not None:
            self.read = read
        if write is not None:
            self.write = write
        if ip is not None:
            self.ip = ip
        if medium is not None:
            self.medium = medium
        if body is not None:
            self.body = body
        if title is not None:
            self.title = title
        if user is not None:
            self.user = user
        if post_votes is not None:
            self.post_votes = post_votes
        if post_assets is not None:
            self.post_assets = post_assets
        if latest_asset is not None:
            self.latest_asset = latest_asset

    @property
    def private_message_users(self):
        """Gets the private_message_users of this PrivateMessage.  # noqa: E501


        :return: The private_message_users of this PrivateMessage.  # noqa: E501
        :rtype: list[PrivateMessageUser]
        """
        return self._private_message_users

    @private_message_users.setter
    def private_message_users(self, private_message_users):
        """Sets the private_message_users of this PrivateMessage.


        :param private_message_users: The private_message_users of this PrivateMessage.  # noqa: E501
        :type: list[PrivateMessageUser]
        """

        self._private_message_users = private_message_users

    @property
    def home_channel_key(self):
        """Gets the home_channel_key of this PrivateMessage.  # noqa: E501


        :return: The home_channel_key of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._home_channel_key

    @home_channel_key.setter
    def home_channel_key(self, home_channel_key):
        """Sets the home_channel_key of this PrivateMessage.


        :param home_channel_key: The home_channel_key of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._home_channel_key = home_channel_key

    @property
    def home_channel(self):
        """Gets the home_channel of this PrivateMessage.  # noqa: E501


        :return: The home_channel of this PrivateMessage.  # noqa: E501
        :rtype: Channel
        """
        return self._home_channel

    @home_channel.setter
    def home_channel(self, home_channel):
        """Sets the home_channel of this PrivateMessage.


        :param home_channel: The home_channel of this PrivateMessage.  # noqa: E501
        :type: Channel
        """

        self._home_channel = home_channel

    @property
    def asset_key(self):
        """Gets the asset_key of this PrivateMessage.  # noqa: E501


        :return: The asset_key of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._asset_key

    @asset_key.setter
    def asset_key(self, asset_key):
        """Sets the asset_key of this PrivateMessage.


        :param asset_key: The asset_key of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._asset_key = asset_key

    @property
    def default_asset(self):
        """Gets the default_asset of this PrivateMessage.  # noqa: E501


        :return: The default_asset of this PrivateMessage.  # noqa: E501
        :rtype: Asset
        """
        return self._default_asset

    @default_asset.setter
    def default_asset(self, default_asset):
        """Sets the default_asset of this PrivateMessage.


        :param default_asset: The default_asset of this PrivateMessage.  # noqa: E501
        :type: Asset
        """

        self._default_asset = default_asset

    @property
    def seo(self):
        """Gets the seo of this PrivateMessage.  # noqa: E501


        :return: The seo of this PrivateMessage.  # noqa: E501
        :rtype: str
        """
        return self._seo

    @seo.setter
    def seo(self, seo):
        """Sets the seo of this PrivateMessage.


        :param seo: The seo of this PrivateMessage.  # noqa: E501
        :type: str
        """

        self._seo = seo

    @property
    def teaser(self):
        """Gets the teaser of this PrivateMessage.  # noqa: E501


        :return: The teaser of this PrivateMessage.  # noqa: E501
        :rtype: str
        """
        return self._teaser

    @teaser.setter
    def teaser(self, teaser):
        """Sets the teaser of this PrivateMessage.


        :param teaser: The teaser of this PrivateMessage.  # noqa: E501
        :type: str
        """

        self._teaser = teaser

    @property
    def locked(self):
        """Gets the locked of this PrivateMessage.  # noqa: E501


        :return: The locked of this PrivateMessage.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this PrivateMessage.


        :param locked: The locked of this PrivateMessage.  # noqa: E501
        :type: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def heat(self):
        """Gets the heat of this PrivateMessage.  # noqa: E501


        :return: The heat of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._heat

    @heat.setter
    def heat(self, heat):
        """Sets the heat of this PrivateMessage.


        :param heat: The heat of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._heat = heat

    @property
    def reply_count(self):
        """Gets the reply_count of this PrivateMessage.  # noqa: E501


        :return: The reply_count of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._reply_count

    @reply_count.setter
    def reply_count(self, reply_count):
        """Sets the reply_count of this PrivateMessage.


        :param reply_count: The reply_count of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._reply_count = reply_count

    @property
    def ordered_date(self):
        """Gets the ordered_date of this PrivateMessage.  # noqa: E501


        :return: The ordered_date of this PrivateMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._ordered_date

    @ordered_date.setter
    def ordered_date(self, ordered_date):
        """Sets the ordered_date of this PrivateMessage.


        :param ordered_date: The ordered_date of this PrivateMessage.  # noqa: E501
        :type: datetime
        """

        self._ordered_date = ordered_date

    @property
    def external_affiliation_key(self):
        """Gets the external_affiliation_key of this PrivateMessage.  # noqa: E501


        :return: The external_affiliation_key of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._external_affiliation_key

    @external_affiliation_key.setter
    def external_affiliation_key(self, external_affiliation_key):
        """Sets the external_affiliation_key of this PrivateMessage.


        :param external_affiliation_key: The external_affiliation_key of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._external_affiliation_key = external_affiliation_key

    @property
    def external_id(self):
        """Gets the external_id of this PrivateMessage.  # noqa: E501


        :return: The external_id of this PrivateMessage.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PrivateMessage.


        :param external_id: The external_id of this PrivateMessage.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def sport_key(self):
        """Gets the sport_key of this PrivateMessage.  # noqa: E501


        :return: The sport_key of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this PrivateMessage.


        :param sport_key: The sport_key of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def sport(self):
        """Gets the sport of this PrivateMessage.  # noqa: E501


        :return: The sport of this PrivateMessage.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this PrivateMessage.


        :param sport: The sport of this PrivateMessage.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def recruiting(self):
        """Gets the recruiting of this PrivateMessage.  # noqa: E501


        :return: The recruiting of this PrivateMessage.  # noqa: E501
        :rtype: bool
        """
        return self._recruiting

    @recruiting.setter
    def recruiting(self, recruiting):
        """Sets the recruiting of this PrivateMessage.


        :param recruiting: The recruiting of this PrivateMessage.  # noqa: E501
        :type: bool
        """
        if recruiting is None:
            raise ValueError("Invalid value for `recruiting`, must not be `None`")  # noqa: E501

        self._recruiting = recruiting

    @property
    def hotness_set(self):
        """Gets the hotness_set of this PrivateMessage.  # noqa: E501


        :return: The hotness_set of this PrivateMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._hotness_set

    @hotness_set.setter
    def hotness_set(self, hotness_set):
        """Sets the hotness_set of this PrivateMessage.


        :param hotness_set: The hotness_set of this PrivateMessage.  # noqa: E501
        :type: datetime
        """

        self._hotness_set = hotness_set

    @property
    def current_hotness(self):
        """Gets the current_hotness of this PrivateMessage.  # noqa: E501


        :return: The current_hotness of this PrivateMessage.  # noqa: E501
        :rtype: HeatLevel
        """
        return self._current_hotness

    @current_hotness.setter
    def current_hotness(self, current_hotness):
        """Sets the current_hotness of this PrivateMessage.


        :param current_hotness: The current_hotness of this PrivateMessage.  # noqa: E501
        :type: HeatLevel
        """

        self._current_hotness = current_hotness

    @property
    def seconds_hot(self):
        """Gets the seconds_hot of this PrivateMessage.  # noqa: E501


        :return: The seconds_hot of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._seconds_hot

    @seconds_hot.setter
    def seconds_hot(self, seconds_hot):
        """Sets the seconds_hot of this PrivateMessage.


        :param seconds_hot: The seconds_hot of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._seconds_hot = seconds_hot

    @property
    def seconds_warmer(self):
        """Gets the seconds_warmer of this PrivateMessage.  # noqa: E501


        :return: The seconds_warmer of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._seconds_warmer

    @seconds_warmer.setter
    def seconds_warmer(self, seconds_warmer):
        """Sets the seconds_warmer of this PrivateMessage.


        :param seconds_warmer: The seconds_warmer of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._seconds_warmer = seconds_warmer

    @property
    def seconds_warm(self):
        """Gets the seconds_warm of this PrivateMessage.  # noqa: E501


        :return: The seconds_warm of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._seconds_warm

    @seconds_warm.setter
    def seconds_warm(self, seconds_warm):
        """Sets the seconds_warm of this PrivateMessage.


        :param seconds_warm: The seconds_warm of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._seconds_warm = seconds_warm

    @property
    def seconds_pinned(self):
        """Gets the seconds_pinned of this PrivateMessage.  # noqa: E501


        :return: The seconds_pinned of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._seconds_pinned

    @seconds_pinned.setter
    def seconds_pinned(self, seconds_pinned):
        """Sets the seconds_pinned of this PrivateMessage.


        :param seconds_pinned: The seconds_pinned of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._seconds_pinned = seconds_pinned

    @property
    def replies(self):
        """Gets the replies of this PrivateMessage.  # noqa: E501


        :return: The replies of this PrivateMessage.  # noqa: E501
        :rtype: list[Reply]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this PrivateMessage.


        :param replies: The replies of this PrivateMessage.  # noqa: E501
        :type: list[Reply]
        """

        self._replies = replies

    @property
    def channel_contents(self):
        """Gets the channel_contents of this PrivateMessage.  # noqa: E501


        :return: The channel_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[ChannelContent]
        """
        return self._channel_contents

    @channel_contents.setter
    def channel_contents(self, channel_contents):
        """Sets the channel_contents of this PrivateMessage.


        :param channel_contents: The channel_contents of this PrivateMessage.  # noqa: E501
        :type: list[ChannelContent]
        """

        self._channel_contents = channel_contents

    @property
    def deleted_replies(self):
        """Gets the deleted_replies of this PrivateMessage.  # noqa: E501


        :return: The deleted_replies of this PrivateMessage.  # noqa: E501
        :rtype: list[DeletedReply]
        """
        return self._deleted_replies

    @deleted_replies.setter
    def deleted_replies(self, deleted_replies):
        """Sets the deleted_replies of this PrivateMessage.


        :param deleted_replies: The deleted_replies of this PrivateMessage.  # noqa: E501
        :type: list[DeletedReply]
        """

        self._deleted_replies = deleted_replies

    @property
    def coach_contents(self):
        """Gets the coach_contents of this PrivateMessage.  # noqa: E501


        :return: The coach_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[CoachContent]
        """
        return self._coach_contents

    @coach_contents.setter
    def coach_contents(self, coach_contents):
        """Sets the coach_contents of this PrivateMessage.


        :param coach_contents: The coach_contents of this PrivateMessage.  # noqa: E501
        :type: list[CoachContent]
        """

        self._coach_contents = coach_contents

    @property
    def event_contents(self):
        """Gets the event_contents of this PrivateMessage.  # noqa: E501


        :return: The event_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[EventContent]
        """
        return self._event_contents

    @event_contents.setter
    def event_contents(self, event_contents):
        """Sets the event_contents of this PrivateMessage.


        :param event_contents: The event_contents of this PrivateMessage.  # noqa: E501
        :type: list[EventContent]
        """

        self._event_contents = event_contents

    @property
    def institution_contents(self):
        """Gets the institution_contents of this PrivateMessage.  # noqa: E501


        :return: The institution_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[InstitutionContent]
        """
        return self._institution_contents

    @institution_contents.setter
    def institution_contents(self, institution_contents):
        """Sets the institution_contents of this PrivateMessage.


        :param institution_contents: The institution_contents of this PrivateMessage.  # noqa: E501
        :type: list[InstitutionContent]
        """

        self._institution_contents = institution_contents

    @property
    def player_contents(self):
        """Gets the player_contents of this PrivateMessage.  # noqa: E501


        :return: The player_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[PlayerContent]
        """
        return self._player_contents

    @player_contents.setter
    def player_contents(self, player_contents):
        """Sets the player_contents of this PrivateMessage.


        :param player_contents: The player_contents of this PrivateMessage.  # noqa: E501
        :type: list[PlayerContent]
        """

        self._player_contents = player_contents

    @property
    def stat_game_contents(self):
        """Gets the stat_game_contents of this PrivateMessage.  # noqa: E501


        :return: The stat_game_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[StatGameContent]
        """
        return self._stat_game_contents

    @stat_game_contents.setter
    def stat_game_contents(self, stat_game_contents):
        """Sets the stat_game_contents of this PrivateMessage.


        :param stat_game_contents: The stat_game_contents of this PrivateMessage.  # noqa: E501
        :type: list[StatGameContent]
        """

        self._stat_game_contents = stat_game_contents

    @property
    def full_contents(self):
        """Gets the full_contents of this PrivateMessage.  # noqa: E501


        :return: The full_contents of this PrivateMessage.  # noqa: E501
        :rtype: list[IContentTagLink]
        """
        return self._full_contents

    @full_contents.setter
    def full_contents(self, full_contents):
        """Sets the full_contents of this PrivateMessage.


        :param full_contents: The full_contents of this PrivateMessage.  # noqa: E501
        :type: list[IContentTagLink]
        """

        self._full_contents = full_contents

    @property
    def key(self):
        """Gets the key of this PrivateMessage.  # noqa: E501


        :return: The key of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PrivateMessage.


        :param key: The key of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def post_type(self):
        """Gets the post_type of this PrivateMessage.  # noqa: E501


        :return: The post_type of this PrivateMessage.  # noqa: E501
        :rtype: PostType
        """
        return self._post_type

    @post_type.setter
    def post_type(self, post_type):
        """Sets the post_type of this PrivateMessage.


        :param post_type: The post_type of this PrivateMessage.  # noqa: E501
        :type: PostType
        """

        self._post_type = post_type

    @property
    def status(self):
        """Gets the status of this PrivateMessage.  # noqa: E501


        :return: The status of this PrivateMessage.  # noqa: E501
        :rtype: PostStatuses
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrivateMessage.


        :param status: The status of this PrivateMessage.  # noqa: E501
        :type: PostStatuses
        """

        self._status = status

    @property
    def _date(self):
        """Gets the _date of this PrivateMessage.  # noqa: E501


        :return: The _date of this PrivateMessage.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PrivateMessage.


        :param _date: The _date of this PrivateMessage.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def user_key(self):
        """Gets the user_key of this PrivateMessage.  # noqa: E501


        :return: The user_key of this PrivateMessage.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this PrivateMessage.


        :param user_key: The user_key of this PrivateMessage.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def read(self):
        """Gets the read of this PrivateMessage.  # noqa: E501


        :return: The read of this PrivateMessage.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this PrivateMessage.


        :param read: The read of this PrivateMessage.  # noqa: E501
        :type: AccessLevel
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this PrivateMessage.  # noqa: E501


        :return: The write of this PrivateMessage.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this PrivateMessage.


        :param write: The write of this PrivateMessage.  # noqa: E501
        :type: AccessLevel
        """

        self._write = write

    @property
    def ip(self):
        """Gets the ip of this PrivateMessage.  # noqa: E501


        :return: The ip of this PrivateMessage.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this PrivateMessage.


        :param ip: The ip of this PrivateMessage.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def medium(self):
        """Gets the medium of this PrivateMessage.  # noqa: E501


        :return: The medium of this PrivateMessage.  # noqa: E501
        :rtype: PostMedium
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this PrivateMessage.


        :param medium: The medium of this PrivateMessage.  # noqa: E501
        :type: PostMedium
        """

        self._medium = medium

    @property
    def body(self):
        """Gets the body of this PrivateMessage.  # noqa: E501


        :return: The body of this PrivateMessage.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PrivateMessage.


        :param body: The body of this PrivateMessage.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def title(self):
        """Gets the title of this PrivateMessage.  # noqa: E501


        :return: The title of this PrivateMessage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PrivateMessage.


        :param title: The title of this PrivateMessage.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user(self):
        """Gets the user of this PrivateMessage.  # noqa: E501


        :return: The user of this PrivateMessage.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PrivateMessage.


        :param user: The user of this PrivateMessage.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def post_votes(self):
        """Gets the post_votes of this PrivateMessage.  # noqa: E501


        :return: The post_votes of this PrivateMessage.  # noqa: E501
        :rtype: list[PostVote]
        """
        return self._post_votes

    @post_votes.setter
    def post_votes(self, post_votes):
        """Sets the post_votes of this PrivateMessage.


        :param post_votes: The post_votes of this PrivateMessage.  # noqa: E501
        :type: list[PostVote]
        """

        self._post_votes = post_votes

    @property
    def post_assets(self):
        """Gets the post_assets of this PrivateMessage.  # noqa: E501


        :return: The post_assets of this PrivateMessage.  # noqa: E501
        :rtype: list[PostAsset]
        """
        return self._post_assets

    @post_assets.setter
    def post_assets(self, post_assets):
        """Sets the post_assets of this PrivateMessage.


        :param post_assets: The post_assets of this PrivateMessage.  # noqa: E501
        :type: list[PostAsset]
        """

        self._post_assets = post_assets

    @property
    def latest_asset(self):
        """Gets the latest_asset of this PrivateMessage.  # noqa: E501


        :return: The latest_asset of this PrivateMessage.  # noqa: E501
        :rtype: PostAsset
        """
        return self._latest_asset

    @latest_asset.setter
    def latest_asset(self, latest_asset):
        """Sets the latest_asset of this PrivateMessage.


        :param latest_asset: The latest_asset of this PrivateMessage.  # noqa: E501
        :type: PostAsset
        """

        self._latest_asset = latest_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

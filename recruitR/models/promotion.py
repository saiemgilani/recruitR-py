# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Promotion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'promotion_set_key': 'int',
        'subscription_type_key': 'int',
        'type': 'PromotionType',
        '_date': 'datetime',
        'bulk': 'int',
        'unit': 'int',
        'days': 'int',
        'featured': 'bool',
        'button_text': 'str',
        'subscribe_text': 'str',
        'promo_text1': 'str',
        'promo_text2': 'str',
        'recurly_coupon': 'str',
        'upgrade_eligible': 'bool',
        'all_access_eligible': 'bool',
        'promotion_set': 'PromotionSet',
        'subscription_type': 'SubscriptionType',
        'user_subscriptions': 'list[UserSubscription]'
    }

    attribute_map = {
        'key': 'key',
        'promotion_set_key': 'promotionSetKey',
        'subscription_type_key': 'subscriptionTypeKey',
        'type': 'type',
        '_date': 'date',
        'bulk': 'bulk',
        'unit': 'unit',
        'days': 'days',
        'featured': 'featured',
        'button_text': 'buttonText',
        'subscribe_text': 'subscribeText',
        'promo_text1': 'promoText1',
        'promo_text2': 'promoText2',
        'recurly_coupon': 'recurlyCoupon',
        'upgrade_eligible': 'upgradeEligible',
        'all_access_eligible': 'allAccessEligible',
        'promotion_set': 'promotionSet',
        'subscription_type': 'subscriptionType',
        'user_subscriptions': 'userSubscriptions'
    }

    def __init__(self, key=None, promotion_set_key=None, subscription_type_key=None, type=None, _date=None, bulk=None, unit=None, days=None, featured=None, button_text=None, subscribe_text=None, promo_text1=None, promo_text2=None, recurly_coupon=None, upgrade_eligible=None, all_access_eligible=None, promotion_set=None, subscription_type=None, user_subscriptions=None):  # noqa: E501
        """Promotion - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._promotion_set_key = None
        self._subscription_type_key = None
        self._type = None
        self.__date = None
        self._bulk = None
        self._unit = None
        self._days = None
        self._featured = None
        self._button_text = None
        self._subscribe_text = None
        self._promo_text1 = None
        self._promo_text2 = None
        self._recurly_coupon = None
        self._upgrade_eligible = None
        self._all_access_eligible = None
        self._promotion_set = None
        self._subscription_type = None
        self._user_subscriptions = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if promotion_set_key is not None:
            self.promotion_set_key = promotion_set_key
        if subscription_type_key is not None:
            self.subscription_type_key = subscription_type_key
        if type is not None:
            self.type = type
        if _date is not None:
            self._date = _date
        if bulk is not None:
            self.bulk = bulk
        if unit is not None:
            self.unit = unit
        if days is not None:
            self.days = days
        if featured is not None:
            self.featured = featured
        if button_text is not None:
            self.button_text = button_text
        if subscribe_text is not None:
            self.subscribe_text = subscribe_text
        if promo_text1 is not None:
            self.promo_text1 = promo_text1
        if promo_text2 is not None:
            self.promo_text2 = promo_text2
        if recurly_coupon is not None:
            self.recurly_coupon = recurly_coupon
        if upgrade_eligible is not None:
            self.upgrade_eligible = upgrade_eligible
        if all_access_eligible is not None:
            self.all_access_eligible = all_access_eligible
        if promotion_set is not None:
            self.promotion_set = promotion_set
        if subscription_type is not None:
            self.subscription_type = subscription_type
        if user_subscriptions is not None:
            self.user_subscriptions = user_subscriptions

    @property
    def key(self):
        """Gets the key of this Promotion.  # noqa: E501


        :return: The key of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Promotion.


        :param key: The key of this Promotion.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def promotion_set_key(self):
        """Gets the promotion_set_key of this Promotion.  # noqa: E501


        :return: The promotion_set_key of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._promotion_set_key

    @promotion_set_key.setter
    def promotion_set_key(self, promotion_set_key):
        """Sets the promotion_set_key of this Promotion.


        :param promotion_set_key: The promotion_set_key of this Promotion.  # noqa: E501
        :type: int
        """

        self._promotion_set_key = promotion_set_key

    @property
    def subscription_type_key(self):
        """Gets the subscription_type_key of this Promotion.  # noqa: E501


        :return: The subscription_type_key of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._subscription_type_key

    @subscription_type_key.setter
    def subscription_type_key(self, subscription_type_key):
        """Sets the subscription_type_key of this Promotion.


        :param subscription_type_key: The subscription_type_key of this Promotion.  # noqa: E501
        :type: int
        """

        self._subscription_type_key = subscription_type_key

    @property
    def type(self):
        """Gets the type of this Promotion.  # noqa: E501


        :return: The type of this Promotion.  # noqa: E501
        :rtype: PromotionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Promotion.


        :param type: The type of this Promotion.  # noqa: E501
        :type: PromotionType
        """

        self._type = type

    @property
    def _date(self):
        """Gets the _date of this Promotion.  # noqa: E501


        :return: The _date of this Promotion.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Promotion.


        :param _date: The _date of this Promotion.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def bulk(self):
        """Gets the bulk of this Promotion.  # noqa: E501


        :return: The bulk of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._bulk

    @bulk.setter
    def bulk(self, bulk):
        """Sets the bulk of this Promotion.


        :param bulk: The bulk of this Promotion.  # noqa: E501
        :type: int
        """

        self._bulk = bulk

    @property
    def unit(self):
        """Gets the unit of this Promotion.  # noqa: E501


        :return: The unit of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Promotion.


        :param unit: The unit of this Promotion.  # noqa: E501
        :type: int
        """

        self._unit = unit

    @property
    def days(self):
        """Gets the days of this Promotion.  # noqa: E501


        :return: The days of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this Promotion.


        :param days: The days of this Promotion.  # noqa: E501
        :type: int
        """

        self._days = days

    @property
    def featured(self):
        """Gets the featured of this Promotion.  # noqa: E501


        :return: The featured of this Promotion.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this Promotion.


        :param featured: The featured of this Promotion.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def button_text(self):
        """Gets the button_text of this Promotion.  # noqa: E501


        :return: The button_text of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._button_text

    @button_text.setter
    def button_text(self, button_text):
        """Sets the button_text of this Promotion.


        :param button_text: The button_text of this Promotion.  # noqa: E501
        :type: str
        """

        self._button_text = button_text

    @property
    def subscribe_text(self):
        """Gets the subscribe_text of this Promotion.  # noqa: E501


        :return: The subscribe_text of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._subscribe_text

    @subscribe_text.setter
    def subscribe_text(self, subscribe_text):
        """Sets the subscribe_text of this Promotion.


        :param subscribe_text: The subscribe_text of this Promotion.  # noqa: E501
        :type: str
        """

        self._subscribe_text = subscribe_text

    @property
    def promo_text1(self):
        """Gets the promo_text1 of this Promotion.  # noqa: E501


        :return: The promo_text1 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._promo_text1

    @promo_text1.setter
    def promo_text1(self, promo_text1):
        """Sets the promo_text1 of this Promotion.


        :param promo_text1: The promo_text1 of this Promotion.  # noqa: E501
        :type: str
        """

        self._promo_text1 = promo_text1

    @property
    def promo_text2(self):
        """Gets the promo_text2 of this Promotion.  # noqa: E501


        :return: The promo_text2 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._promo_text2

    @promo_text2.setter
    def promo_text2(self, promo_text2):
        """Sets the promo_text2 of this Promotion.


        :param promo_text2: The promo_text2 of this Promotion.  # noqa: E501
        :type: str
        """

        self._promo_text2 = promo_text2

    @property
    def recurly_coupon(self):
        """Gets the recurly_coupon of this Promotion.  # noqa: E501


        :return: The recurly_coupon of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._recurly_coupon

    @recurly_coupon.setter
    def recurly_coupon(self, recurly_coupon):
        """Sets the recurly_coupon of this Promotion.


        :param recurly_coupon: The recurly_coupon of this Promotion.  # noqa: E501
        :type: str
        """

        self._recurly_coupon = recurly_coupon

    @property
    def upgrade_eligible(self):
        """Gets the upgrade_eligible of this Promotion.  # noqa: E501


        :return: The upgrade_eligible of this Promotion.  # noqa: E501
        :rtype: bool
        """
        return self._upgrade_eligible

    @upgrade_eligible.setter
    def upgrade_eligible(self, upgrade_eligible):
        """Sets the upgrade_eligible of this Promotion.


        :param upgrade_eligible: The upgrade_eligible of this Promotion.  # noqa: E501
        :type: bool
        """

        self._upgrade_eligible = upgrade_eligible

    @property
    def all_access_eligible(self):
        """Gets the all_access_eligible of this Promotion.  # noqa: E501


        :return: The all_access_eligible of this Promotion.  # noqa: E501
        :rtype: bool
        """
        return self._all_access_eligible

    @all_access_eligible.setter
    def all_access_eligible(self, all_access_eligible):
        """Sets the all_access_eligible of this Promotion.


        :param all_access_eligible: The all_access_eligible of this Promotion.  # noqa: E501
        :type: bool
        """

        self._all_access_eligible = all_access_eligible

    @property
    def promotion_set(self):
        """Gets the promotion_set of this Promotion.  # noqa: E501


        :return: The promotion_set of this Promotion.  # noqa: E501
        :rtype: PromotionSet
        """
        return self._promotion_set

    @promotion_set.setter
    def promotion_set(self, promotion_set):
        """Sets the promotion_set of this Promotion.


        :param promotion_set: The promotion_set of this Promotion.  # noqa: E501
        :type: PromotionSet
        """

        self._promotion_set = promotion_set

    @property
    def subscription_type(self):
        """Gets the subscription_type of this Promotion.  # noqa: E501


        :return: The subscription_type of this Promotion.  # noqa: E501
        :rtype: SubscriptionType
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this Promotion.


        :param subscription_type: The subscription_type of this Promotion.  # noqa: E501
        :type: SubscriptionType
        """

        self._subscription_type = subscription_type

    @property
    def user_subscriptions(self):
        """Gets the user_subscriptions of this Promotion.  # noqa: E501


        :return: The user_subscriptions of this Promotion.  # noqa: E501
        :rtype: list[UserSubscription]
        """
        return self._user_subscriptions

    @user_subscriptions.setter
    def user_subscriptions(self, user_subscriptions):
        """Sets the user_subscriptions of this Promotion.


        :param user_subscriptions: The user_subscriptions of this Promotion.  # noqa: E501
        :type: list[UserSubscription]
        """

        self._user_subscriptions = user_subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Promotion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Promotion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

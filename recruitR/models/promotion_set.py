# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PromotionSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'promotions': 'list[Promotion]',
        'sites': 'list[Site]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'promotions': 'promotions',
        'sites': 'sites'
    }

    def __init__(self, key=None, name=None, promotions=None, sites=None):  # noqa: E501
        """PromotionSet - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._promotions = None
        self._sites = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if promotions is not None:
            self.promotions = promotions
        if sites is not None:
            self.sites = sites

    @property
    def key(self):
        """Gets the key of this PromotionSet.  # noqa: E501


        :return: The key of this PromotionSet.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PromotionSet.


        :param key: The key of this PromotionSet.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this PromotionSet.  # noqa: E501


        :return: The name of this PromotionSet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromotionSet.


        :param name: The name of this PromotionSet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def promotions(self):
        """Gets the promotions of this PromotionSet.  # noqa: E501


        :return: The promotions of this PromotionSet.  # noqa: E501
        :rtype: list[Promotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this PromotionSet.


        :param promotions: The promotions of this PromotionSet.  # noqa: E501
        :type: list[Promotion]
        """

        self._promotions = promotions

    @property
    def sites(self):
        """Gets the sites of this PromotionSet.  # noqa: E501


        :return: The sites of this PromotionSet.  # noqa: E501
        :rtype: list[Site]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this PromotionSet.


        :param sites: The sites of this PromotionSet.  # noqa: E501
        :type: list[Site]
        """

        self._sites = sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

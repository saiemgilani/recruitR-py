# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ranking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'alpha': 'bool',
        '_date': 'datetime',
        'date_created': 'datetime',
        'sport_key': 'int',
        'year': 'int',
        'is_prospect': 'bool',
        'locked': 'bool',
        'institution_group': 'InstitutionGroup',
        'stale': 'Staleness',
        'type': 'Types',
        'version': 'float',
        'sport': 'Sport',
        'player_sport_rankings': 'list[PlayerSportRanking]',
        'institution_rankings': 'list[InstitutionRanking]'
    }

    attribute_map = {
        'key': 'key',
        'alpha': 'alpha',
        '_date': 'date',
        'date_created': 'dateCreated',
        'sport_key': 'sportKey',
        'year': 'year',
        'is_prospect': 'isProspect',
        'locked': 'locked',
        'institution_group': 'institutionGroup',
        'stale': 'stale',
        'type': 'type',
        'version': 'version',
        'sport': 'sport',
        'player_sport_rankings': 'playerSportRankings',
        'institution_rankings': 'institutionRankings'
    }

    def __init__(self, key=None, alpha=None, _date=None, date_created=None, sport_key=None, year=None, is_prospect=None, locked=None, institution_group=None, stale=None, type=None, version=None, sport=None, player_sport_rankings=None, institution_rankings=None):  # noqa: E501
        """Ranking - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._alpha = None
        self.__date = None
        self._date_created = None
        self._sport_key = None
        self._year = None
        self._is_prospect = None
        self._locked = None
        self._institution_group = None
        self._stale = None
        self._type = None
        self._version = None
        self._sport = None
        self._player_sport_rankings = None
        self._institution_rankings = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if alpha is not None:
            self.alpha = alpha
        if _date is not None:
            self._date = _date
        if date_created is not None:
            self.date_created = date_created
        if sport_key is not None:
            self.sport_key = sport_key
        if year is not None:
            self.year = year
        if is_prospect is not None:
            self.is_prospect = is_prospect
        if locked is not None:
            self.locked = locked
        if institution_group is not None:
            self.institution_group = institution_group
        if stale is not None:
            self.stale = stale
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if sport is not None:
            self.sport = sport
        if player_sport_rankings is not None:
            self.player_sport_rankings = player_sport_rankings
        if institution_rankings is not None:
            self.institution_rankings = institution_rankings

    @property
    def key(self):
        """Gets the key of this Ranking.  # noqa: E501


        :return: The key of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Ranking.


        :param key: The key of this Ranking.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def alpha(self):
        """Gets the alpha of this Ranking.  # noqa: E501


        :return: The alpha of this Ranking.  # noqa: E501
        :rtype: bool
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this Ranking.


        :param alpha: The alpha of this Ranking.  # noqa: E501
        :type: bool
        """

        self._alpha = alpha

    @property
    def _date(self):
        """Gets the _date of this Ranking.  # noqa: E501


        :return: The _date of this Ranking.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Ranking.


        :param _date: The _date of this Ranking.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def date_created(self):
        """Gets the date_created of this Ranking.  # noqa: E501


        :return: The date_created of this Ranking.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Ranking.


        :param date_created: The date_created of this Ranking.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def sport_key(self):
        """Gets the sport_key of this Ranking.  # noqa: E501


        :return: The sport_key of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this Ranking.


        :param sport_key: The sport_key of this Ranking.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def year(self):
        """Gets the year of this Ranking.  # noqa: E501


        :return: The year of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Ranking.


        :param year: The year of this Ranking.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def is_prospect(self):
        """Gets the is_prospect of this Ranking.  # noqa: E501


        :return: The is_prospect of this Ranking.  # noqa: E501
        :rtype: bool
        """
        return self._is_prospect

    @is_prospect.setter
    def is_prospect(self, is_prospect):
        """Sets the is_prospect of this Ranking.


        :param is_prospect: The is_prospect of this Ranking.  # noqa: E501
        :type: bool
        """

        self._is_prospect = is_prospect

    @property
    def locked(self):
        """Gets the locked of this Ranking.  # noqa: E501


        :return: The locked of this Ranking.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Ranking.


        :param locked: The locked of this Ranking.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def institution_group(self):
        """Gets the institution_group of this Ranking.  # noqa: E501


        :return: The institution_group of this Ranking.  # noqa: E501
        :rtype: InstitutionGroup
        """
        return self._institution_group

    @institution_group.setter
    def institution_group(self, institution_group):
        """Sets the institution_group of this Ranking.


        :param institution_group: The institution_group of this Ranking.  # noqa: E501
        :type: InstitutionGroup
        """

        self._institution_group = institution_group

    @property
    def stale(self):
        """Gets the stale of this Ranking.  # noqa: E501


        :return: The stale of this Ranking.  # noqa: E501
        :rtype: Staleness
        """
        return self._stale

    @stale.setter
    def stale(self, stale):
        """Sets the stale of this Ranking.


        :param stale: The stale of this Ranking.  # noqa: E501
        :type: Staleness
        """

        self._stale = stale

    @property
    def type(self):
        """Gets the type of this Ranking.  # noqa: E501


        :return: The type of this Ranking.  # noqa: E501
        :rtype: Types
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ranking.


        :param type: The type of this Ranking.  # noqa: E501
        :type: Types
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this Ranking.  # noqa: E501


        :return: The version of this Ranking.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Ranking.


        :param version: The version of this Ranking.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def sport(self):
        """Gets the sport of this Ranking.  # noqa: E501


        :return: The sport of this Ranking.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this Ranking.


        :param sport: The sport of this Ranking.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def player_sport_rankings(self):
        """Gets the player_sport_rankings of this Ranking.  # noqa: E501


        :return: The player_sport_rankings of this Ranking.  # noqa: E501
        :rtype: list[PlayerSportRanking]
        """
        return self._player_sport_rankings

    @player_sport_rankings.setter
    def player_sport_rankings(self, player_sport_rankings):
        """Sets the player_sport_rankings of this Ranking.


        :param player_sport_rankings: The player_sport_rankings of this Ranking.  # noqa: E501
        :type: list[PlayerSportRanking]
        """

        self._player_sport_rankings = player_sport_rankings

    @property
    def institution_rankings(self):
        """Gets the institution_rankings of this Ranking.  # noqa: E501


        :return: The institution_rankings of this Ranking.  # noqa: E501
        :rtype: list[InstitutionRanking]
        """
        return self._institution_rankings

    @institution_rankings.setter
    def institution_rankings(self, institution_rankings):
        """Sets the institution_rankings of this Ranking.


        :param institution_rankings: The institution_rankings of this Ranking.  # noqa: E501
        :type: list[InstitutionRanking]
        """

        self._institution_rankings = institution_rankings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ranking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ranking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecruitInterest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'recruitment_key': 'int',
        'institution_key': 'int',
        'lock_prediction': 'bool',
        'recruits_interest': 'RecruitInterestLevel',
        'institutions_interest': 'InstitutionInterestLevel',
        'position_key': 'int',
        'offered': 'bool',
        'gray_shirt': 'bool',
        'walk_on': 'bool',
        'official_visit_key': 'int',
        'soft_commit_key': 'int',
        'hard_commit_key': 'int',
        'signing_date_key': 'int',
        'enrollment_date_key': 'int',
        'decommit_key': 'int',
        'recruitment': 'Recruitment',
        'institution': 'Institution',
        'recruit_interest_events': 'list[RecruitInterestEvent]'
    }

    attribute_map = {
        'key': 'key',
        'recruitment_key': 'recruitmentKey',
        'institution_key': 'institutionKey',
        'lock_prediction': 'lockPrediction',
        'recruits_interest': 'recruitsInterest',
        'institutions_interest': 'institutionsInterest',
        'position_key': 'positionKey',
        'offered': 'offered',
        'gray_shirt': 'grayShirt',
        'walk_on': 'walkOn',
        'official_visit_key': 'officialVisitKey',
        'soft_commit_key': 'softCommitKey',
        'hard_commit_key': 'hardCommitKey',
        'signing_date_key': 'signingDateKey',
        'enrollment_date_key': 'enrollmentDateKey',
        'decommit_key': 'decommitKey',
        'recruitment': 'recruitment',
        'institution': 'institution',
        'recruit_interest_events': 'recruitInterestEvents'
    }

    def __init__(self, key=None, recruitment_key=None, institution_key=None, lock_prediction=None, recruits_interest=None, institutions_interest=None, position_key=None, offered=None, gray_shirt=None, walk_on=None, official_visit_key=None, soft_commit_key=None, hard_commit_key=None, signing_date_key=None, enrollment_date_key=None, decommit_key=None, recruitment=None, institution=None, recruit_interest_events=None):  # noqa: E501
        """RecruitInterest - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._recruitment_key = None
        self._institution_key = None
        self._lock_prediction = None
        self._recruits_interest = None
        self._institutions_interest = None
        self._position_key = None
        self._offered = None
        self._gray_shirt = None
        self._walk_on = None
        self._official_visit_key = None
        self._soft_commit_key = None
        self._hard_commit_key = None
        self._signing_date_key = None
        self._enrollment_date_key = None
        self._decommit_key = None
        self._recruitment = None
        self._institution = None
        self._recruit_interest_events = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if recruitment_key is not None:
            self.recruitment_key = recruitment_key
        if institution_key is not None:
            self.institution_key = institution_key
        if lock_prediction is not None:
            self.lock_prediction = lock_prediction
        if recruits_interest is not None:
            self.recruits_interest = recruits_interest
        if institutions_interest is not None:
            self.institutions_interest = institutions_interest
        if position_key is not None:
            self.position_key = position_key
        if offered is not None:
            self.offered = offered
        if gray_shirt is not None:
            self.gray_shirt = gray_shirt
        if walk_on is not None:
            self.walk_on = walk_on
        if official_visit_key is not None:
            self.official_visit_key = official_visit_key
        if soft_commit_key is not None:
            self.soft_commit_key = soft_commit_key
        if hard_commit_key is not None:
            self.hard_commit_key = hard_commit_key
        if signing_date_key is not None:
            self.signing_date_key = signing_date_key
        if enrollment_date_key is not None:
            self.enrollment_date_key = enrollment_date_key
        if decommit_key is not None:
            self.decommit_key = decommit_key
        if recruitment is not None:
            self.recruitment = recruitment
        if institution is not None:
            self.institution = institution
        if recruit_interest_events is not None:
            self.recruit_interest_events = recruit_interest_events

    @property
    def key(self):
        """Gets the key of this RecruitInterest.  # noqa: E501


        :return: The key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RecruitInterest.


        :param key: The key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def recruitment_key(self):
        """Gets the recruitment_key of this RecruitInterest.  # noqa: E501


        :return: The recruitment_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._recruitment_key

    @recruitment_key.setter
    def recruitment_key(self, recruitment_key):
        """Sets the recruitment_key of this RecruitInterest.


        :param recruitment_key: The recruitment_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._recruitment_key = recruitment_key

    @property
    def institution_key(self):
        """Gets the institution_key of this RecruitInterest.  # noqa: E501


        :return: The institution_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this RecruitInterest.


        :param institution_key: The institution_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def lock_prediction(self):
        """Gets the lock_prediction of this RecruitInterest.  # noqa: E501


        :return: The lock_prediction of this RecruitInterest.  # noqa: E501
        :rtype: bool
        """
        return self._lock_prediction

    @lock_prediction.setter
    def lock_prediction(self, lock_prediction):
        """Sets the lock_prediction of this RecruitInterest.


        :param lock_prediction: The lock_prediction of this RecruitInterest.  # noqa: E501
        :type: bool
        """

        self._lock_prediction = lock_prediction

    @property
    def recruits_interest(self):
        """Gets the recruits_interest of this RecruitInterest.  # noqa: E501


        :return: The recruits_interest of this RecruitInterest.  # noqa: E501
        :rtype: RecruitInterestLevel
        """
        return self._recruits_interest

    @recruits_interest.setter
    def recruits_interest(self, recruits_interest):
        """Sets the recruits_interest of this RecruitInterest.


        :param recruits_interest: The recruits_interest of this RecruitInterest.  # noqa: E501
        :type: RecruitInterestLevel
        """

        self._recruits_interest = recruits_interest

    @property
    def institutions_interest(self):
        """Gets the institutions_interest of this RecruitInterest.  # noqa: E501


        :return: The institutions_interest of this RecruitInterest.  # noqa: E501
        :rtype: InstitutionInterestLevel
        """
        return self._institutions_interest

    @institutions_interest.setter
    def institutions_interest(self, institutions_interest):
        """Sets the institutions_interest of this RecruitInterest.


        :param institutions_interest: The institutions_interest of this RecruitInterest.  # noqa: E501
        :type: InstitutionInterestLevel
        """

        self._institutions_interest = institutions_interest

    @property
    def position_key(self):
        """Gets the position_key of this RecruitInterest.  # noqa: E501


        :return: The position_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._position_key

    @position_key.setter
    def position_key(self, position_key):
        """Sets the position_key of this RecruitInterest.


        :param position_key: The position_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._position_key = position_key

    @property
    def offered(self):
        """Gets the offered of this RecruitInterest.  # noqa: E501


        :return: The offered of this RecruitInterest.  # noqa: E501
        :rtype: bool
        """
        return self._offered

    @offered.setter
    def offered(self, offered):
        """Sets the offered of this RecruitInterest.


        :param offered: The offered of this RecruitInterest.  # noqa: E501
        :type: bool
        """

        self._offered = offered

    @property
    def gray_shirt(self):
        """Gets the gray_shirt of this RecruitInterest.  # noqa: E501


        :return: The gray_shirt of this RecruitInterest.  # noqa: E501
        :rtype: bool
        """
        return self._gray_shirt

    @gray_shirt.setter
    def gray_shirt(self, gray_shirt):
        """Sets the gray_shirt of this RecruitInterest.


        :param gray_shirt: The gray_shirt of this RecruitInterest.  # noqa: E501
        :type: bool
        """

        self._gray_shirt = gray_shirt

    @property
    def walk_on(self):
        """Gets the walk_on of this RecruitInterest.  # noqa: E501


        :return: The walk_on of this RecruitInterest.  # noqa: E501
        :rtype: bool
        """
        return self._walk_on

    @walk_on.setter
    def walk_on(self, walk_on):
        """Sets the walk_on of this RecruitInterest.


        :param walk_on: The walk_on of this RecruitInterest.  # noqa: E501
        :type: bool
        """

        self._walk_on = walk_on

    @property
    def official_visit_key(self):
        """Gets the official_visit_key of this RecruitInterest.  # noqa: E501


        :return: The official_visit_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._official_visit_key

    @official_visit_key.setter
    def official_visit_key(self, official_visit_key):
        """Sets the official_visit_key of this RecruitInterest.


        :param official_visit_key: The official_visit_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._official_visit_key = official_visit_key

    @property
    def soft_commit_key(self):
        """Gets the soft_commit_key of this RecruitInterest.  # noqa: E501


        :return: The soft_commit_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._soft_commit_key

    @soft_commit_key.setter
    def soft_commit_key(self, soft_commit_key):
        """Sets the soft_commit_key of this RecruitInterest.


        :param soft_commit_key: The soft_commit_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._soft_commit_key = soft_commit_key

    @property
    def hard_commit_key(self):
        """Gets the hard_commit_key of this RecruitInterest.  # noqa: E501


        :return: The hard_commit_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._hard_commit_key

    @hard_commit_key.setter
    def hard_commit_key(self, hard_commit_key):
        """Sets the hard_commit_key of this RecruitInterest.


        :param hard_commit_key: The hard_commit_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._hard_commit_key = hard_commit_key

    @property
    def signing_date_key(self):
        """Gets the signing_date_key of this RecruitInterest.  # noqa: E501


        :return: The signing_date_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._signing_date_key

    @signing_date_key.setter
    def signing_date_key(self, signing_date_key):
        """Sets the signing_date_key of this RecruitInterest.


        :param signing_date_key: The signing_date_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._signing_date_key = signing_date_key

    @property
    def enrollment_date_key(self):
        """Gets the enrollment_date_key of this RecruitInterest.  # noqa: E501


        :return: The enrollment_date_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_date_key

    @enrollment_date_key.setter
    def enrollment_date_key(self, enrollment_date_key):
        """Sets the enrollment_date_key of this RecruitInterest.


        :param enrollment_date_key: The enrollment_date_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._enrollment_date_key = enrollment_date_key

    @property
    def decommit_key(self):
        """Gets the decommit_key of this RecruitInterest.  # noqa: E501


        :return: The decommit_key of this RecruitInterest.  # noqa: E501
        :rtype: int
        """
        return self._decommit_key

    @decommit_key.setter
    def decommit_key(self, decommit_key):
        """Sets the decommit_key of this RecruitInterest.


        :param decommit_key: The decommit_key of this RecruitInterest.  # noqa: E501
        :type: int
        """

        self._decommit_key = decommit_key

    @property
    def recruitment(self):
        """Gets the recruitment of this RecruitInterest.  # noqa: E501


        :return: The recruitment of this RecruitInterest.  # noqa: E501
        :rtype: Recruitment
        """
        return self._recruitment

    @recruitment.setter
    def recruitment(self, recruitment):
        """Sets the recruitment of this RecruitInterest.


        :param recruitment: The recruitment of this RecruitInterest.  # noqa: E501
        :type: Recruitment
        """

        self._recruitment = recruitment

    @property
    def institution(self):
        """Gets the institution of this RecruitInterest.  # noqa: E501


        :return: The institution of this RecruitInterest.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this RecruitInterest.


        :param institution: The institution of this RecruitInterest.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def recruit_interest_events(self):
        """Gets the recruit_interest_events of this RecruitInterest.  # noqa: E501


        :return: The recruit_interest_events of this RecruitInterest.  # noqa: E501
        :rtype: list[RecruitInterestEvent]
        """
        return self._recruit_interest_events

    @recruit_interest_events.setter
    def recruit_interest_events(self, recruit_interest_events):
        """Sets the recruit_interest_events of this RecruitInterest.


        :param recruit_interest_events: The recruit_interest_events of this RecruitInterest.  # noqa: E501
        :type: list[RecruitInterestEvent]
        """

        self._recruit_interest_events = recruit_interest_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecruitInterest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecruitInterest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

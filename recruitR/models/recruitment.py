# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Recruitment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'player_sport_key': 'int',
        'position_key': 'int',
        'year': 'int',
        'coach_ranking_key': 'int',
        'committed_recruitment_interest_key': 'int',
        'highest_recruitment_interest_key': 'int',
        'recruitment_interest_key': 'int',
        'announcement_channel': 'str',
        'announcement_date': 'datetime',
        'created_by_user': 'str',
        'created_date': 'datetime',
        'modified_by_user': 'str',
        'modified_date': 'datetime',
        'player_sport': 'PlayerSport',
        'position': 'Position',
        'recruit_interests': 'list[RecruitInterest]'
    }

    attribute_map = {
        'key': 'key',
        'player_sport_key': 'playerSportKey',
        'position_key': 'positionKey',
        'year': 'year',
        'coach_ranking_key': 'coachRankingKey',
        'committed_recruitment_interest_key': 'committedRecruitmentInterestKey',
        'highest_recruitment_interest_key': 'highestRecruitmentInterestKey',
        'recruitment_interest_key': 'recruitmentInterestKey',
        'announcement_channel': 'announcementChannel',
        'announcement_date': 'announcementDate',
        'created_by_user': 'createdByUser',
        'created_date': 'createdDate',
        'modified_by_user': 'modifiedByUser',
        'modified_date': 'modifiedDate',
        'player_sport': 'playerSport',
        'position': 'position',
        'recruit_interests': 'recruitInterests'
    }

    def __init__(self, key=None, player_sport_key=None, position_key=None, year=None, coach_ranking_key=None, committed_recruitment_interest_key=None, highest_recruitment_interest_key=None, recruitment_interest_key=None, announcement_channel=None, announcement_date=None, created_by_user=None, created_date=None, modified_by_user=None, modified_date=None, player_sport=None, position=None, recruit_interests=None):  # noqa: E501
        """Recruitment - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._player_sport_key = None
        self._position_key = None
        self._year = None
        self._coach_ranking_key = None
        self._committed_recruitment_interest_key = None
        self._highest_recruitment_interest_key = None
        self._recruitment_interest_key = None
        self._announcement_channel = None
        self._announcement_date = None
        self._created_by_user = None
        self._created_date = None
        self._modified_by_user = None
        self._modified_date = None
        self._player_sport = None
        self._position = None
        self._recruit_interests = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if player_sport_key is not None:
            self.player_sport_key = player_sport_key
        if position_key is not None:
            self.position_key = position_key
        if year is not None:
            self.year = year
        if coach_ranking_key is not None:
            self.coach_ranking_key = coach_ranking_key
        if committed_recruitment_interest_key is not None:
            self.committed_recruitment_interest_key = committed_recruitment_interest_key
        if highest_recruitment_interest_key is not None:
            self.highest_recruitment_interest_key = highest_recruitment_interest_key
        if recruitment_interest_key is not None:
            self.recruitment_interest_key = recruitment_interest_key
        if announcement_channel is not None:
            self.announcement_channel = announcement_channel
        if announcement_date is not None:
            self.announcement_date = announcement_date
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if created_date is not None:
            self.created_date = created_date
        if modified_by_user is not None:
            self.modified_by_user = modified_by_user
        if modified_date is not None:
            self.modified_date = modified_date
        if player_sport is not None:
            self.player_sport = player_sport
        if position is not None:
            self.position = position
        if recruit_interests is not None:
            self.recruit_interests = recruit_interests

    @property
    def key(self):
        """Gets the key of this Recruitment.  # noqa: E501


        :return: The key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Recruitment.


        :param key: The key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def player_sport_key(self):
        """Gets the player_sport_key of this Recruitment.  # noqa: E501


        :return: The player_sport_key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._player_sport_key

    @player_sport_key.setter
    def player_sport_key(self, player_sport_key):
        """Sets the player_sport_key of this Recruitment.


        :param player_sport_key: The player_sport_key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._player_sport_key = player_sport_key

    @property
    def position_key(self):
        """Gets the position_key of this Recruitment.  # noqa: E501


        :return: The position_key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._position_key

    @position_key.setter
    def position_key(self, position_key):
        """Sets the position_key of this Recruitment.


        :param position_key: The position_key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._position_key = position_key

    @property
    def year(self):
        """Gets the year of this Recruitment.  # noqa: E501


        :return: The year of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Recruitment.


        :param year: The year of this Recruitment.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def coach_ranking_key(self):
        """Gets the coach_ranking_key of this Recruitment.  # noqa: E501


        :return: The coach_ranking_key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._coach_ranking_key

    @coach_ranking_key.setter
    def coach_ranking_key(self, coach_ranking_key):
        """Sets the coach_ranking_key of this Recruitment.


        :param coach_ranking_key: The coach_ranking_key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._coach_ranking_key = coach_ranking_key

    @property
    def committed_recruitment_interest_key(self):
        """Gets the committed_recruitment_interest_key of this Recruitment.  # noqa: E501


        :return: The committed_recruitment_interest_key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._committed_recruitment_interest_key

    @committed_recruitment_interest_key.setter
    def committed_recruitment_interest_key(self, committed_recruitment_interest_key):
        """Sets the committed_recruitment_interest_key of this Recruitment.


        :param committed_recruitment_interest_key: The committed_recruitment_interest_key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._committed_recruitment_interest_key = committed_recruitment_interest_key

    @property
    def highest_recruitment_interest_key(self):
        """Gets the highest_recruitment_interest_key of this Recruitment.  # noqa: E501


        :return: The highest_recruitment_interest_key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._highest_recruitment_interest_key

    @highest_recruitment_interest_key.setter
    def highest_recruitment_interest_key(self, highest_recruitment_interest_key):
        """Sets the highest_recruitment_interest_key of this Recruitment.


        :param highest_recruitment_interest_key: The highest_recruitment_interest_key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._highest_recruitment_interest_key = highest_recruitment_interest_key

    @property
    def recruitment_interest_key(self):
        """Gets the recruitment_interest_key of this Recruitment.  # noqa: E501


        :return: The recruitment_interest_key of this Recruitment.  # noqa: E501
        :rtype: int
        """
        return self._recruitment_interest_key

    @recruitment_interest_key.setter
    def recruitment_interest_key(self, recruitment_interest_key):
        """Sets the recruitment_interest_key of this Recruitment.


        :param recruitment_interest_key: The recruitment_interest_key of this Recruitment.  # noqa: E501
        :type: int
        """

        self._recruitment_interest_key = recruitment_interest_key

    @property
    def announcement_channel(self):
        """Gets the announcement_channel of this Recruitment.  # noqa: E501


        :return: The announcement_channel of this Recruitment.  # noqa: E501
        :rtype: str
        """
        return self._announcement_channel

    @announcement_channel.setter
    def announcement_channel(self, announcement_channel):
        """Sets the announcement_channel of this Recruitment.


        :param announcement_channel: The announcement_channel of this Recruitment.  # noqa: E501
        :type: str
        """

        self._announcement_channel = announcement_channel

    @property
    def announcement_date(self):
        """Gets the announcement_date of this Recruitment.  # noqa: E501


        :return: The announcement_date of this Recruitment.  # noqa: E501
        :rtype: datetime
        """
        return self._announcement_date

    @announcement_date.setter
    def announcement_date(self, announcement_date):
        """Sets the announcement_date of this Recruitment.


        :param announcement_date: The announcement_date of this Recruitment.  # noqa: E501
        :type: datetime
        """

        self._announcement_date = announcement_date

    @property
    def created_by_user(self):
        """Gets the created_by_user of this Recruitment.  # noqa: E501


        :return: The created_by_user of this Recruitment.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this Recruitment.


        :param created_by_user: The created_by_user of this Recruitment.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def created_date(self):
        """Gets the created_date of this Recruitment.  # noqa: E501


        :return: The created_date of this Recruitment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Recruitment.


        :param created_date: The created_date of this Recruitment.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def modified_by_user(self):
        """Gets the modified_by_user of this Recruitment.  # noqa: E501


        :return: The modified_by_user of this Recruitment.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_user

    @modified_by_user.setter
    def modified_by_user(self, modified_by_user):
        """Sets the modified_by_user of this Recruitment.


        :param modified_by_user: The modified_by_user of this Recruitment.  # noqa: E501
        :type: str
        """

        self._modified_by_user = modified_by_user

    @property
    def modified_date(self):
        """Gets the modified_date of this Recruitment.  # noqa: E501


        :return: The modified_date of this Recruitment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Recruitment.


        :param modified_date: The modified_date of this Recruitment.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def player_sport(self):
        """Gets the player_sport of this Recruitment.  # noqa: E501


        :return: The player_sport of this Recruitment.  # noqa: E501
        :rtype: PlayerSport
        """
        return self._player_sport

    @player_sport.setter
    def player_sport(self, player_sport):
        """Sets the player_sport of this Recruitment.


        :param player_sport: The player_sport of this Recruitment.  # noqa: E501
        :type: PlayerSport
        """

        self._player_sport = player_sport

    @property
    def position(self):
        """Gets the position of this Recruitment.  # noqa: E501


        :return: The position of this Recruitment.  # noqa: E501
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Recruitment.


        :param position: The position of this Recruitment.  # noqa: E501
        :type: Position
        """

        self._position = position

    @property
    def recruit_interests(self):
        """Gets the recruit_interests of this Recruitment.  # noqa: E501


        :return: The recruit_interests of this Recruitment.  # noqa: E501
        :rtype: list[RecruitInterest]
        """
        return self._recruit_interests

    @recruit_interests.setter
    def recruit_interests(self, recruit_interests):
        """Sets the recruit_interests of this Recruitment.


        :param recruit_interests: The recruit_interests of this Recruitment.  # noqa: E501
        :type: list[RecruitInterest]
        """

        self._recruit_interests = recruit_interests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recruitment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recruitment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

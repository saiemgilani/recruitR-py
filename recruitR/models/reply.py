# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_number': 'int',
        'thread_key': 'int',
        'thread': 'Content',
        'key': 'int',
        'post_type': 'PostType',
        'status': 'PostStatuses',
        '_date': 'datetime',
        'user_key': 'int',
        'read': 'AccessLevel',
        'write': 'AccessLevel',
        'ip': 'str',
        'medium': 'PostMedium',
        'body': 'str',
        'title': 'str',
        'user': 'User',
        'post_votes': 'list[PostVote]',
        'post_assets': 'list[PostAsset]',
        'latest_asset': 'PostAsset'
    }

    attribute_map = {
        'page_number': 'pageNumber',
        'thread_key': 'threadKey',
        'thread': 'thread',
        'key': 'key',
        'post_type': 'postType',
        'status': 'status',
        '_date': 'date',
        'user_key': 'userKey',
        'read': 'read',
        'write': 'write',
        'ip': 'ip',
        'medium': 'medium',
        'body': 'body',
        'title': 'title',
        'user': 'user',
        'post_votes': 'postVotes',
        'post_assets': 'postAssets',
        'latest_asset': 'latestAsset'
    }

    def __init__(self, page_number=None, thread_key=None, thread=None, key=None, post_type=None, status=None, _date=None, user_key=None, read=None, write=None, ip=None, medium=None, body=None, title=None, user=None, post_votes=None, post_assets=None, latest_asset=None):  # noqa: E501
        """Reply - a model defined in Swagger"""  # noqa: E501
        self._page_number = None
        self._thread_key = None
        self._thread = None
        self._key = None
        self._post_type = None
        self._status = None
        self.__date = None
        self._user_key = None
        self._read = None
        self._write = None
        self._ip = None
        self._medium = None
        self._body = None
        self._title = None
        self._user = None
        self._post_votes = None
        self._post_assets = None
        self._latest_asset = None
        self.discriminator = None
        if page_number is not None:
            self.page_number = page_number
        if thread_key is not None:
            self.thread_key = thread_key
        if thread is not None:
            self.thread = thread
        if key is not None:
            self.key = key
        if post_type is not None:
            self.post_type = post_type
        if status is not None:
            self.status = status
        if _date is not None:
            self._date = _date
        if user_key is not None:
            self.user_key = user_key
        if read is not None:
            self.read = read
        if write is not None:
            self.write = write
        if ip is not None:
            self.ip = ip
        if medium is not None:
            self.medium = medium
        if body is not None:
            self.body = body
        if title is not None:
            self.title = title
        if user is not None:
            self.user = user
        if post_votes is not None:
            self.post_votes = post_votes
        if post_assets is not None:
            self.post_assets = post_assets
        if latest_asset is not None:
            self.latest_asset = latest_asset

    @property
    def page_number(self):
        """Gets the page_number of this Reply.  # noqa: E501


        :return: The page_number of this Reply.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Reply.


        :param page_number: The page_number of this Reply.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def thread_key(self):
        """Gets the thread_key of this Reply.  # noqa: E501


        :return: The thread_key of this Reply.  # noqa: E501
        :rtype: int
        """
        return self._thread_key

    @thread_key.setter
    def thread_key(self, thread_key):
        """Sets the thread_key of this Reply.


        :param thread_key: The thread_key of this Reply.  # noqa: E501
        :type: int
        """

        self._thread_key = thread_key

    @property
    def thread(self):
        """Gets the thread of this Reply.  # noqa: E501


        :return: The thread of this Reply.  # noqa: E501
        :rtype: Content
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this Reply.


        :param thread: The thread of this Reply.  # noqa: E501
        :type: Content
        """

        self._thread = thread

    @property
    def key(self):
        """Gets the key of this Reply.  # noqa: E501


        :return: The key of this Reply.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Reply.


        :param key: The key of this Reply.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def post_type(self):
        """Gets the post_type of this Reply.  # noqa: E501


        :return: The post_type of this Reply.  # noqa: E501
        :rtype: PostType
        """
        return self._post_type

    @post_type.setter
    def post_type(self, post_type):
        """Sets the post_type of this Reply.


        :param post_type: The post_type of this Reply.  # noqa: E501
        :type: PostType
        """

        self._post_type = post_type

    @property
    def status(self):
        """Gets the status of this Reply.  # noqa: E501


        :return: The status of this Reply.  # noqa: E501
        :rtype: PostStatuses
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Reply.


        :param status: The status of this Reply.  # noqa: E501
        :type: PostStatuses
        """

        self._status = status

    @property
    def _date(self):
        """Gets the _date of this Reply.  # noqa: E501


        :return: The _date of this Reply.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Reply.


        :param _date: The _date of this Reply.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def user_key(self):
        """Gets the user_key of this Reply.  # noqa: E501


        :return: The user_key of this Reply.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this Reply.


        :param user_key: The user_key of this Reply.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def read(self):
        """Gets the read of this Reply.  # noqa: E501


        :return: The read of this Reply.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Reply.


        :param read: The read of this Reply.  # noqa: E501
        :type: AccessLevel
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this Reply.  # noqa: E501


        :return: The write of this Reply.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this Reply.


        :param write: The write of this Reply.  # noqa: E501
        :type: AccessLevel
        """

        self._write = write

    @property
    def ip(self):
        """Gets the ip of this Reply.  # noqa: E501


        :return: The ip of this Reply.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Reply.


        :param ip: The ip of this Reply.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def medium(self):
        """Gets the medium of this Reply.  # noqa: E501


        :return: The medium of this Reply.  # noqa: E501
        :rtype: PostMedium
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this Reply.


        :param medium: The medium of this Reply.  # noqa: E501
        :type: PostMedium
        """

        self._medium = medium

    @property
    def body(self):
        """Gets the body of this Reply.  # noqa: E501


        :return: The body of this Reply.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Reply.


        :param body: The body of this Reply.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def title(self):
        """Gets the title of this Reply.  # noqa: E501


        :return: The title of this Reply.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Reply.


        :param title: The title of this Reply.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user(self):
        """Gets the user of this Reply.  # noqa: E501


        :return: The user of this Reply.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Reply.


        :param user: The user of this Reply.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def post_votes(self):
        """Gets the post_votes of this Reply.  # noqa: E501


        :return: The post_votes of this Reply.  # noqa: E501
        :rtype: list[PostVote]
        """
        return self._post_votes

    @post_votes.setter
    def post_votes(self, post_votes):
        """Sets the post_votes of this Reply.


        :param post_votes: The post_votes of this Reply.  # noqa: E501
        :type: list[PostVote]
        """

        self._post_votes = post_votes

    @property
    def post_assets(self):
        """Gets the post_assets of this Reply.  # noqa: E501


        :return: The post_assets of this Reply.  # noqa: E501
        :rtype: list[PostAsset]
        """
        return self._post_assets

    @post_assets.setter
    def post_assets(self, post_assets):
        """Sets the post_assets of this Reply.


        :param post_assets: The post_assets of this Reply.  # noqa: E501
        :type: list[PostAsset]
        """

        self._post_assets = post_assets

    @property
    def latest_asset(self):
        """Gets the latest_asset of this Reply.  # noqa: E501


        :return: The latest_asset of this Reply.  # noqa: E501
        :rtype: PostAsset
        """
        return self._latest_asset

    @latest_asset.setter
    def latest_asset(self, latest_asset):
        """Sets the latest_asset of this Reply.


        :param latest_asset: The latest_asset of this Reply.  # noqa: E501
        :type: PostAsset
        """

        self._latest_asset = latest_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reply, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

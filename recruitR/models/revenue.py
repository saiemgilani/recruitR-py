# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Revenue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        '_date': 'datetime',
        'amount': 'float',
        'remain': 'float',
        'cash': 'float',
        'site_key': 'int',
        'user_transaction_key': 'int',
        'user_transaction': 'UserTransaction',
        'tax': 'float'
    }

    attribute_map = {
        'key': 'key',
        '_date': 'date',
        'amount': 'amount',
        'remain': 'remain',
        'cash': 'cash',
        'site_key': 'siteKey',
        'user_transaction_key': 'userTransactionKey',
        'user_transaction': 'userTransaction',
        'tax': 'tax'
    }

    def __init__(self, key=None, _date=None, amount=None, remain=None, cash=None, site_key=None, user_transaction_key=None, user_transaction=None, tax=None):  # noqa: E501
        """Revenue - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self.__date = None
        self._amount = None
        self._remain = None
        self._cash = None
        self._site_key = None
        self._user_transaction_key = None
        self._user_transaction = None
        self._tax = None
        self.discriminator = None
        if key is not None:
            self.key = key
        self._date = _date
        self.amount = amount
        self.remain = remain
        self.cash = cash
        self.site_key = site_key
        self.user_transaction_key = user_transaction_key
        if user_transaction is not None:
            self.user_transaction = user_transaction
        self.tax = tax

    @property
    def key(self):
        """Gets the key of this Revenue.  # noqa: E501


        :return: The key of this Revenue.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Revenue.


        :param key: The key of this Revenue.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def _date(self):
        """Gets the _date of this Revenue.  # noqa: E501


        :return: The _date of this Revenue.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Revenue.


        :param _date: The _date of this Revenue.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this Revenue.  # noqa: E501


        :return: The amount of this Revenue.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Revenue.


        :param amount: The amount of this Revenue.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def remain(self):
        """Gets the remain of this Revenue.  # noqa: E501


        :return: The remain of this Revenue.  # noqa: E501
        :rtype: float
        """
        return self._remain

    @remain.setter
    def remain(self, remain):
        """Sets the remain of this Revenue.


        :param remain: The remain of this Revenue.  # noqa: E501
        :type: float
        """
        if remain is None:
            raise ValueError("Invalid value for `remain`, must not be `None`")  # noqa: E501

        self._remain = remain

    @property
    def cash(self):
        """Gets the cash of this Revenue.  # noqa: E501


        :return: The cash of this Revenue.  # noqa: E501
        :rtype: float
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this Revenue.


        :param cash: The cash of this Revenue.  # noqa: E501
        :type: float
        """
        if cash is None:
            raise ValueError("Invalid value for `cash`, must not be `None`")  # noqa: E501

        self._cash = cash

    @property
    def site_key(self):
        """Gets the site_key of this Revenue.  # noqa: E501


        :return: The site_key of this Revenue.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this Revenue.


        :param site_key: The site_key of this Revenue.  # noqa: E501
        :type: int
        """
        if site_key is None:
            raise ValueError("Invalid value for `site_key`, must not be `None`")  # noqa: E501

        self._site_key = site_key

    @property
    def user_transaction_key(self):
        """Gets the user_transaction_key of this Revenue.  # noqa: E501


        :return: The user_transaction_key of this Revenue.  # noqa: E501
        :rtype: int
        """
        return self._user_transaction_key

    @user_transaction_key.setter
    def user_transaction_key(self, user_transaction_key):
        """Sets the user_transaction_key of this Revenue.


        :param user_transaction_key: The user_transaction_key of this Revenue.  # noqa: E501
        :type: int
        """
        if user_transaction_key is None:
            raise ValueError("Invalid value for `user_transaction_key`, must not be `None`")  # noqa: E501

        self._user_transaction_key = user_transaction_key

    @property
    def user_transaction(self):
        """Gets the user_transaction of this Revenue.  # noqa: E501


        :return: The user_transaction of this Revenue.  # noqa: E501
        :rtype: UserTransaction
        """
        return self._user_transaction

    @user_transaction.setter
    def user_transaction(self, user_transaction):
        """Sets the user_transaction of this Revenue.


        :param user_transaction: The user_transaction of this Revenue.  # noqa: E501
        :type: UserTransaction
        """

        self._user_transaction = user_transaction

    @property
    def tax(self):
        """Gets the tax of this Revenue.  # noqa: E501


        :return: The tax of this Revenue.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Revenue.


        :param tax: The tax of this Revenue.  # noqa: E501
        :type: float
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")  # noqa: E501

        self._tax = tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Revenue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revenue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

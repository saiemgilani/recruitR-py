# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScoutUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'scout_id': 'int',
        'scout_handle': 'str',
        'scout_email': 'str',
        'user_key': 'int',
        'user': 'User',
        'user_alias': 'str',
        'modified': 'datetime',
        'cider_uid': 'int',
        'status': 'ScoutStatuses'
    }

    attribute_map = {
        'key': 'key',
        'scout_id': 'scoutId',
        'scout_handle': 'scoutHandle',
        'scout_email': 'scoutEmail',
        'user_key': 'userKey',
        'user': 'user',
        'user_alias': 'userAlias',
        'modified': 'modified',
        'cider_uid': 'ciderUid',
        'status': 'status'
    }

    def __init__(self, key=None, scout_id=None, scout_handle=None, scout_email=None, user_key=None, user=None, user_alias=None, modified=None, cider_uid=None, status=None):  # noqa: E501
        """ScoutUser - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._scout_id = None
        self._scout_handle = None
        self._scout_email = None
        self._user_key = None
        self._user = None
        self._user_alias = None
        self._modified = None
        self._cider_uid = None
        self._status = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if scout_id is not None:
            self.scout_id = scout_id
        if scout_handle is not None:
            self.scout_handle = scout_handle
        if scout_email is not None:
            self.scout_email = scout_email
        if user_key is not None:
            self.user_key = user_key
        if user is not None:
            self.user = user
        if user_alias is not None:
            self.user_alias = user_alias
        if modified is not None:
            self.modified = modified
        if cider_uid is not None:
            self.cider_uid = cider_uid
        if status is not None:
            self.status = status

    @property
    def key(self):
        """Gets the key of this ScoutUser.  # noqa: E501


        :return: The key of this ScoutUser.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ScoutUser.


        :param key: The key of this ScoutUser.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def scout_id(self):
        """Gets the scout_id of this ScoutUser.  # noqa: E501


        :return: The scout_id of this ScoutUser.  # noqa: E501
        :rtype: int
        """
        return self._scout_id

    @scout_id.setter
    def scout_id(self, scout_id):
        """Sets the scout_id of this ScoutUser.


        :param scout_id: The scout_id of this ScoutUser.  # noqa: E501
        :type: int
        """

        self._scout_id = scout_id

    @property
    def scout_handle(self):
        """Gets the scout_handle of this ScoutUser.  # noqa: E501


        :return: The scout_handle of this ScoutUser.  # noqa: E501
        :rtype: str
        """
        return self._scout_handle

    @scout_handle.setter
    def scout_handle(self, scout_handle):
        """Sets the scout_handle of this ScoutUser.


        :param scout_handle: The scout_handle of this ScoutUser.  # noqa: E501
        :type: str
        """

        self._scout_handle = scout_handle

    @property
    def scout_email(self):
        """Gets the scout_email of this ScoutUser.  # noqa: E501


        :return: The scout_email of this ScoutUser.  # noqa: E501
        :rtype: str
        """
        return self._scout_email

    @scout_email.setter
    def scout_email(self, scout_email):
        """Sets the scout_email of this ScoutUser.


        :param scout_email: The scout_email of this ScoutUser.  # noqa: E501
        :type: str
        """

        self._scout_email = scout_email

    @property
    def user_key(self):
        """Gets the user_key of this ScoutUser.  # noqa: E501


        :return: The user_key of this ScoutUser.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this ScoutUser.


        :param user_key: The user_key of this ScoutUser.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def user(self):
        """Gets the user of this ScoutUser.  # noqa: E501


        :return: The user of this ScoutUser.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ScoutUser.


        :param user: The user of this ScoutUser.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def user_alias(self):
        """Gets the user_alias of this ScoutUser.  # noqa: E501


        :return: The user_alias of this ScoutUser.  # noqa: E501
        :rtype: str
        """
        return self._user_alias

    @user_alias.setter
    def user_alias(self, user_alias):
        """Sets the user_alias of this ScoutUser.


        :param user_alias: The user_alias of this ScoutUser.  # noqa: E501
        :type: str
        """

        self._user_alias = user_alias

    @property
    def modified(self):
        """Gets the modified of this ScoutUser.  # noqa: E501


        :return: The modified of this ScoutUser.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ScoutUser.


        :param modified: The modified of this ScoutUser.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def cider_uid(self):
        """Gets the cider_uid of this ScoutUser.  # noqa: E501


        :return: The cider_uid of this ScoutUser.  # noqa: E501
        :rtype: int
        """
        return self._cider_uid

    @cider_uid.setter
    def cider_uid(self, cider_uid):
        """Sets the cider_uid of this ScoutUser.


        :param cider_uid: The cider_uid of this ScoutUser.  # noqa: E501
        :type: int
        """

        self._cider_uid = cider_uid

    @property
    def status(self):
        """Gets the status of this ScoutUser.  # noqa: E501


        :return: The status of this ScoutUser.  # noqa: E501
        :rtype: ScoutStatuses
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScoutUser.


        :param status: The status of this ScoutUser.  # noqa: E501
        :type: ScoutStatuses
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScoutUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoutUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Segment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'channel_key': 'int',
        'channel': 'Channel',
        'member_segments': 'list[MemberSegment]',
        'campaigns': 'list[Campaign]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'channel_key': 'channelKey',
        'channel': 'channel',
        'member_segments': 'memberSegments',
        'campaigns': 'campaigns'
    }

    def __init__(self, key=None, name=None, channel_key=None, channel=None, member_segments=None, campaigns=None):  # noqa: E501
        """Segment - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._channel_key = None
        self._channel = None
        self._member_segments = None
        self._campaigns = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if channel_key is not None:
            self.channel_key = channel_key
        if channel is not None:
            self.channel = channel
        if member_segments is not None:
            self.member_segments = member_segments
        if campaigns is not None:
            self.campaigns = campaigns

    @property
    def key(self):
        """Gets the key of this Segment.  # noqa: E501


        :return: The key of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Segment.


        :param key: The key of this Segment.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Segment.  # noqa: E501


        :return: The name of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Segment.


        :param name: The name of this Segment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def channel_key(self):
        """Gets the channel_key of this Segment.  # noqa: E501


        :return: The channel_key of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._channel_key

    @channel_key.setter
    def channel_key(self, channel_key):
        """Sets the channel_key of this Segment.


        :param channel_key: The channel_key of this Segment.  # noqa: E501
        :type: int
        """

        self._channel_key = channel_key

    @property
    def channel(self):
        """Gets the channel of this Segment.  # noqa: E501


        :return: The channel of this Segment.  # noqa: E501
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Segment.


        :param channel: The channel of this Segment.  # noqa: E501
        :type: Channel
        """

        self._channel = channel

    @property
    def member_segments(self):
        """Gets the member_segments of this Segment.  # noqa: E501


        :return: The member_segments of this Segment.  # noqa: E501
        :rtype: list[MemberSegment]
        """
        return self._member_segments

    @member_segments.setter
    def member_segments(self, member_segments):
        """Sets the member_segments of this Segment.


        :param member_segments: The member_segments of this Segment.  # noqa: E501
        :type: list[MemberSegment]
        """

        self._member_segments = member_segments

    @property
    def campaigns(self):
        """Gets the campaigns of this Segment.  # noqa: E501


        :return: The campaigns of this Segment.  # noqa: E501
        :rtype: list[Campaign]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this Segment.


        :param campaigns: The campaigns of this Segment.  # noqa: E501
        :type: list[Campaign]
        """

        self._campaigns = campaigns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Segment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Segment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

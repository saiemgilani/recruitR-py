# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Site(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'affiliation_name': 'str',
        'type': 'SiteTypes',
        'network_key': 'int',
        'institution_key': 'int',
        'live': 'SiteStatuses',
        'channel_key': 'int',
        'email': 'str',
        'promotion_set_key': 'int',
        'category': 'SiteCategory',
        'first_promo_line': 'str',
        'second_promo_line': 'str',
        'default_logo_key': 'int',
        'default_avatar_key': 'int',
        'primary_color': 'str',
        'component_color': 'str',
        'highlight_color': 'str',
        'link_color': 'str',
        'header_color': 'str',
        'google_account': 'str',
        'twitter_account': 'str',
        'twitter_list': 'str',
        'facebook_account': 'str',
        'instagram': 'str',
        'you_tube': 'str',
        'tickets': 'str',
        'fan_shop_key': 'int',
        'fan_shop': 'FanShop',
        'default_logo': 'Asset',
        'default_avatar': 'Asset',
        'home_page': 'Page',
        'board_captcha': 'bool',
        'conference': 'str',
        'league': 'str',
        'network': 'Network',
        'podcasts': 'list[Podcast]',
        'ip_bans': 'list[IpBan]',
        'promotion_set': 'PromotionSet',
        'institution': 'Institution',
        'users': 'list[User]',
        'user_roles': 'list[UserRole]',
        'subscription_sites': 'list[SubscriptionSite]',
        'site_urls': 'list[SiteUrl]',
        'contact_groups': 'list[ContactGroup]',
        'channels': 'list[Channel]',
        'user_ban_writes': 'list[UserBanWrite]',
        'menus': 'list[Menu]',
        'quick_links': 'list[QuickLink]',
        'writer_goal_sites': 'list[WriterGoalSite]',
        'video_channels': 'list[VideoChannel]',
        'default_site_url': 'SiteUrl',
        'url': 'str'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'affiliation_name': 'affiliationName',
        'type': 'type',
        'network_key': 'networkKey',
        'institution_key': 'institutionKey',
        'live': 'live',
        'channel_key': 'channelKey',
        'email': 'email',
        'promotion_set_key': 'promotionSetKey',
        'category': 'category',
        'first_promo_line': 'firstPromoLine',
        'second_promo_line': 'secondPromoLine',
        'default_logo_key': 'defaultLogoKey',
        'default_avatar_key': 'defaultAvatarKey',
        'primary_color': 'primaryColor',
        'component_color': 'componentColor',
        'highlight_color': 'highlightColor',
        'link_color': 'linkColor',
        'header_color': 'headerColor',
        'google_account': 'googleAccount',
        'twitter_account': 'twitterAccount',
        'twitter_list': 'twitterList',
        'facebook_account': 'facebookAccount',
        'instagram': 'instagram',
        'you_tube': 'youTube',
        'tickets': 'tickets',
        'fan_shop_key': 'fanShopKey',
        'fan_shop': 'fanShop',
        'default_logo': 'defaultLogo',
        'default_avatar': 'defaultAvatar',
        'home_page': 'homePage',
        'board_captcha': 'boardCaptcha',
        'conference': 'conference',
        'league': 'league',
        'network': 'network',
        'podcasts': 'podcasts',
        'ip_bans': 'ipBans',
        'promotion_set': 'promotionSet',
        'institution': 'institution',
        'users': 'users',
        'user_roles': 'userRoles',
        'subscription_sites': 'subscriptionSites',
        'site_urls': 'siteUrls',
        'contact_groups': 'contactGroups',
        'channels': 'channels',
        'user_ban_writes': 'userBanWrites',
        'menus': 'menus',
        'quick_links': 'quickLinks',
        'writer_goal_sites': 'writerGoalSites',
        'video_channels': 'videoChannels',
        'default_site_url': 'defaultSiteUrl',
        'url': 'url'
    }

    def __init__(self, key=None, name=None, affiliation_name=None, type=None, network_key=None, institution_key=None, live=None, channel_key=None, email=None, promotion_set_key=None, category=None, first_promo_line=None, second_promo_line=None, default_logo_key=None, default_avatar_key=None, primary_color=None, component_color=None, highlight_color=None, link_color=None, header_color=None, google_account=None, twitter_account=None, twitter_list=None, facebook_account=None, instagram=None, you_tube=None, tickets=None, fan_shop_key=None, fan_shop=None, default_logo=None, default_avatar=None, home_page=None, board_captcha=None, conference=None, league=None, network=None, podcasts=None, ip_bans=None, promotion_set=None, institution=None, users=None, user_roles=None, subscription_sites=None, site_urls=None, contact_groups=None, channels=None, user_ban_writes=None, menus=None, quick_links=None, writer_goal_sites=None, video_channels=None, default_site_url=None, url=None):  # noqa: E501
        """Site - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._affiliation_name = None
        self._type = None
        self._network_key = None
        self._institution_key = None
        self._live = None
        self._channel_key = None
        self._email = None
        self._promotion_set_key = None
        self._category = None
        self._first_promo_line = None
        self._second_promo_line = None
        self._default_logo_key = None
        self._default_avatar_key = None
        self._primary_color = None
        self._component_color = None
        self._highlight_color = None
        self._link_color = None
        self._header_color = None
        self._google_account = None
        self._twitter_account = None
        self._twitter_list = None
        self._facebook_account = None
        self._instagram = None
        self._you_tube = None
        self._tickets = None
        self._fan_shop_key = None
        self._fan_shop = None
        self._default_logo = None
        self._default_avatar = None
        self._home_page = None
        self._board_captcha = None
        self._conference = None
        self._league = None
        self._network = None
        self._podcasts = None
        self._ip_bans = None
        self._promotion_set = None
        self._institution = None
        self._users = None
        self._user_roles = None
        self._subscription_sites = None
        self._site_urls = None
        self._contact_groups = None
        self._channels = None
        self._user_ban_writes = None
        self._menus = None
        self._quick_links = None
        self._writer_goal_sites = None
        self._video_channels = None
        self._default_site_url = None
        self._url = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if affiliation_name is not None:
            self.affiliation_name = affiliation_name
        if type is not None:
            self.type = type
        if network_key is not None:
            self.network_key = network_key
        if institution_key is not None:
            self.institution_key = institution_key
        if live is not None:
            self.live = live
        if channel_key is not None:
            self.channel_key = channel_key
        if email is not None:
            self.email = email
        if promotion_set_key is not None:
            self.promotion_set_key = promotion_set_key
        if category is not None:
            self.category = category
        if first_promo_line is not None:
            self.first_promo_line = first_promo_line
        if second_promo_line is not None:
            self.second_promo_line = second_promo_line
        if default_logo_key is not None:
            self.default_logo_key = default_logo_key
        if default_avatar_key is not None:
            self.default_avatar_key = default_avatar_key
        if primary_color is not None:
            self.primary_color = primary_color
        if component_color is not None:
            self.component_color = component_color
        if highlight_color is not None:
            self.highlight_color = highlight_color
        if link_color is not None:
            self.link_color = link_color
        if header_color is not None:
            self.header_color = header_color
        if google_account is not None:
            self.google_account = google_account
        if twitter_account is not None:
            self.twitter_account = twitter_account
        if twitter_list is not None:
            self.twitter_list = twitter_list
        if facebook_account is not None:
            self.facebook_account = facebook_account
        if instagram is not None:
            self.instagram = instagram
        if you_tube is not None:
            self.you_tube = you_tube
        if tickets is not None:
            self.tickets = tickets
        if fan_shop_key is not None:
            self.fan_shop_key = fan_shop_key
        if fan_shop is not None:
            self.fan_shop = fan_shop
        if default_logo is not None:
            self.default_logo = default_logo
        if default_avatar is not None:
            self.default_avatar = default_avatar
        if home_page is not None:
            self.home_page = home_page
        if board_captcha is not None:
            self.board_captcha = board_captcha
        if conference is not None:
            self.conference = conference
        if league is not None:
            self.league = league
        if network is not None:
            self.network = network
        if podcasts is not None:
            self.podcasts = podcasts
        if ip_bans is not None:
            self.ip_bans = ip_bans
        if promotion_set is not None:
            self.promotion_set = promotion_set
        if institution is not None:
            self.institution = institution
        if users is not None:
            self.users = users
        if user_roles is not None:
            self.user_roles = user_roles
        if subscription_sites is not None:
            self.subscription_sites = subscription_sites
        if site_urls is not None:
            self.site_urls = site_urls
        if contact_groups is not None:
            self.contact_groups = contact_groups
        if channels is not None:
            self.channels = channels
        if user_ban_writes is not None:
            self.user_ban_writes = user_ban_writes
        if menus is not None:
            self.menus = menus
        if quick_links is not None:
            self.quick_links = quick_links
        if writer_goal_sites is not None:
            self.writer_goal_sites = writer_goal_sites
        if video_channels is not None:
            self.video_channels = video_channels
        if default_site_url is not None:
            self.default_site_url = default_site_url
        if url is not None:
            self.url = url

    @property
    def key(self):
        """Gets the key of this Site.  # noqa: E501


        :return: The key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Site.


        :param key: The key of this Site.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Site.  # noqa: E501


        :return: The name of this Site.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.


        :param name: The name of this Site.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def affiliation_name(self):
        """Gets the affiliation_name of this Site.  # noqa: E501


        :return: The affiliation_name of this Site.  # noqa: E501
        :rtype: str
        """
        return self._affiliation_name

    @affiliation_name.setter
    def affiliation_name(self, affiliation_name):
        """Sets the affiliation_name of this Site.


        :param affiliation_name: The affiliation_name of this Site.  # noqa: E501
        :type: str
        """

        self._affiliation_name = affiliation_name

    @property
    def type(self):
        """Gets the type of this Site.  # noqa: E501


        :return: The type of this Site.  # noqa: E501
        :rtype: SiteTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Site.


        :param type: The type of this Site.  # noqa: E501
        :type: SiteTypes
        """

        self._type = type

    @property
    def network_key(self):
        """Gets the network_key of this Site.  # noqa: E501


        :return: The network_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._network_key

    @network_key.setter
    def network_key(self, network_key):
        """Sets the network_key of this Site.


        :param network_key: The network_key of this Site.  # noqa: E501
        :type: int
        """

        self._network_key = network_key

    @property
    def institution_key(self):
        """Gets the institution_key of this Site.  # noqa: E501


        :return: The institution_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this Site.


        :param institution_key: The institution_key of this Site.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def live(self):
        """Gets the live of this Site.  # noqa: E501


        :return: The live of this Site.  # noqa: E501
        :rtype: SiteStatuses
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this Site.


        :param live: The live of this Site.  # noqa: E501
        :type: SiteStatuses
        """

        self._live = live

    @property
    def channel_key(self):
        """Gets the channel_key of this Site.  # noqa: E501


        :return: The channel_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._channel_key

    @channel_key.setter
    def channel_key(self, channel_key):
        """Sets the channel_key of this Site.


        :param channel_key: The channel_key of this Site.  # noqa: E501
        :type: int
        """

        self._channel_key = channel_key

    @property
    def email(self):
        """Gets the email of this Site.  # noqa: E501


        :return: The email of this Site.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Site.


        :param email: The email of this Site.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def promotion_set_key(self):
        """Gets the promotion_set_key of this Site.  # noqa: E501


        :return: The promotion_set_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._promotion_set_key

    @promotion_set_key.setter
    def promotion_set_key(self, promotion_set_key):
        """Sets the promotion_set_key of this Site.


        :param promotion_set_key: The promotion_set_key of this Site.  # noqa: E501
        :type: int
        """

        self._promotion_set_key = promotion_set_key

    @property
    def category(self):
        """Gets the category of this Site.  # noqa: E501


        :return: The category of this Site.  # noqa: E501
        :rtype: SiteCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Site.


        :param category: The category of this Site.  # noqa: E501
        :type: SiteCategory
        """

        self._category = category

    @property
    def first_promo_line(self):
        """Gets the first_promo_line of this Site.  # noqa: E501


        :return: The first_promo_line of this Site.  # noqa: E501
        :rtype: str
        """
        return self._first_promo_line

    @first_promo_line.setter
    def first_promo_line(self, first_promo_line):
        """Sets the first_promo_line of this Site.


        :param first_promo_line: The first_promo_line of this Site.  # noqa: E501
        :type: str
        """

        self._first_promo_line = first_promo_line

    @property
    def second_promo_line(self):
        """Gets the second_promo_line of this Site.  # noqa: E501


        :return: The second_promo_line of this Site.  # noqa: E501
        :rtype: str
        """
        return self._second_promo_line

    @second_promo_line.setter
    def second_promo_line(self, second_promo_line):
        """Sets the second_promo_line of this Site.


        :param second_promo_line: The second_promo_line of this Site.  # noqa: E501
        :type: str
        """

        self._second_promo_line = second_promo_line

    @property
    def default_logo_key(self):
        """Gets the default_logo_key of this Site.  # noqa: E501


        :return: The default_logo_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._default_logo_key

    @default_logo_key.setter
    def default_logo_key(self, default_logo_key):
        """Sets the default_logo_key of this Site.


        :param default_logo_key: The default_logo_key of this Site.  # noqa: E501
        :type: int
        """

        self._default_logo_key = default_logo_key

    @property
    def default_avatar_key(self):
        """Gets the default_avatar_key of this Site.  # noqa: E501


        :return: The default_avatar_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._default_avatar_key

    @default_avatar_key.setter
    def default_avatar_key(self, default_avatar_key):
        """Sets the default_avatar_key of this Site.


        :param default_avatar_key: The default_avatar_key of this Site.  # noqa: E501
        :type: int
        """

        self._default_avatar_key = default_avatar_key

    @property
    def primary_color(self):
        """Gets the primary_color of this Site.  # noqa: E501


        :return: The primary_color of this Site.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this Site.


        :param primary_color: The primary_color of this Site.  # noqa: E501
        :type: str
        """

        self._primary_color = primary_color

    @property
    def component_color(self):
        """Gets the component_color of this Site.  # noqa: E501


        :return: The component_color of this Site.  # noqa: E501
        :rtype: str
        """
        return self._component_color

    @component_color.setter
    def component_color(self, component_color):
        """Sets the component_color of this Site.


        :param component_color: The component_color of this Site.  # noqa: E501
        :type: str
        """

        self._component_color = component_color

    @property
    def highlight_color(self):
        """Gets the highlight_color of this Site.  # noqa: E501


        :return: The highlight_color of this Site.  # noqa: E501
        :rtype: str
        """
        return self._highlight_color

    @highlight_color.setter
    def highlight_color(self, highlight_color):
        """Sets the highlight_color of this Site.


        :param highlight_color: The highlight_color of this Site.  # noqa: E501
        :type: str
        """

        self._highlight_color = highlight_color

    @property
    def link_color(self):
        """Gets the link_color of this Site.  # noqa: E501


        :return: The link_color of this Site.  # noqa: E501
        :rtype: str
        """
        return self._link_color

    @link_color.setter
    def link_color(self, link_color):
        """Sets the link_color of this Site.


        :param link_color: The link_color of this Site.  # noqa: E501
        :type: str
        """

        self._link_color = link_color

    @property
    def header_color(self):
        """Gets the header_color of this Site.  # noqa: E501


        :return: The header_color of this Site.  # noqa: E501
        :rtype: str
        """
        return self._header_color

    @header_color.setter
    def header_color(self, header_color):
        """Sets the header_color of this Site.


        :param header_color: The header_color of this Site.  # noqa: E501
        :type: str
        """

        self._header_color = header_color

    @property
    def google_account(self):
        """Gets the google_account of this Site.  # noqa: E501


        :return: The google_account of this Site.  # noqa: E501
        :rtype: str
        """
        return self._google_account

    @google_account.setter
    def google_account(self, google_account):
        """Sets the google_account of this Site.


        :param google_account: The google_account of this Site.  # noqa: E501
        :type: str
        """

        self._google_account = google_account

    @property
    def twitter_account(self):
        """Gets the twitter_account of this Site.  # noqa: E501


        :return: The twitter_account of this Site.  # noqa: E501
        :rtype: str
        """
        return self._twitter_account

    @twitter_account.setter
    def twitter_account(self, twitter_account):
        """Sets the twitter_account of this Site.


        :param twitter_account: The twitter_account of this Site.  # noqa: E501
        :type: str
        """

        self._twitter_account = twitter_account

    @property
    def twitter_list(self):
        """Gets the twitter_list of this Site.  # noqa: E501


        :return: The twitter_list of this Site.  # noqa: E501
        :rtype: str
        """
        return self._twitter_list

    @twitter_list.setter
    def twitter_list(self, twitter_list):
        """Sets the twitter_list of this Site.


        :param twitter_list: The twitter_list of this Site.  # noqa: E501
        :type: str
        """

        self._twitter_list = twitter_list

    @property
    def facebook_account(self):
        """Gets the facebook_account of this Site.  # noqa: E501


        :return: The facebook_account of this Site.  # noqa: E501
        :rtype: str
        """
        return self._facebook_account

    @facebook_account.setter
    def facebook_account(self, facebook_account):
        """Sets the facebook_account of this Site.


        :param facebook_account: The facebook_account of this Site.  # noqa: E501
        :type: str
        """

        self._facebook_account = facebook_account

    @property
    def instagram(self):
        """Gets the instagram of this Site.  # noqa: E501


        :return: The instagram of this Site.  # noqa: E501
        :rtype: str
        """
        return self._instagram

    @instagram.setter
    def instagram(self, instagram):
        """Sets the instagram of this Site.


        :param instagram: The instagram of this Site.  # noqa: E501
        :type: str
        """

        self._instagram = instagram

    @property
    def you_tube(self):
        """Gets the you_tube of this Site.  # noqa: E501


        :return: The you_tube of this Site.  # noqa: E501
        :rtype: str
        """
        return self._you_tube

    @you_tube.setter
    def you_tube(self, you_tube):
        """Sets the you_tube of this Site.


        :param you_tube: The you_tube of this Site.  # noqa: E501
        :type: str
        """

        self._you_tube = you_tube

    @property
    def tickets(self):
        """Gets the tickets of this Site.  # noqa: E501


        :return: The tickets of this Site.  # noqa: E501
        :rtype: str
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this Site.


        :param tickets: The tickets of this Site.  # noqa: E501
        :type: str
        """

        self._tickets = tickets

    @property
    def fan_shop_key(self):
        """Gets the fan_shop_key of this Site.  # noqa: E501


        :return: The fan_shop_key of this Site.  # noqa: E501
        :rtype: int
        """
        return self._fan_shop_key

    @fan_shop_key.setter
    def fan_shop_key(self, fan_shop_key):
        """Sets the fan_shop_key of this Site.


        :param fan_shop_key: The fan_shop_key of this Site.  # noqa: E501
        :type: int
        """

        self._fan_shop_key = fan_shop_key

    @property
    def fan_shop(self):
        """Gets the fan_shop of this Site.  # noqa: E501


        :return: The fan_shop of this Site.  # noqa: E501
        :rtype: FanShop
        """
        return self._fan_shop

    @fan_shop.setter
    def fan_shop(self, fan_shop):
        """Sets the fan_shop of this Site.


        :param fan_shop: The fan_shop of this Site.  # noqa: E501
        :type: FanShop
        """

        self._fan_shop = fan_shop

    @property
    def default_logo(self):
        """Gets the default_logo of this Site.  # noqa: E501


        :return: The default_logo of this Site.  # noqa: E501
        :rtype: Asset
        """
        return self._default_logo

    @default_logo.setter
    def default_logo(self, default_logo):
        """Sets the default_logo of this Site.


        :param default_logo: The default_logo of this Site.  # noqa: E501
        :type: Asset
        """

        self._default_logo = default_logo

    @property
    def default_avatar(self):
        """Gets the default_avatar of this Site.  # noqa: E501


        :return: The default_avatar of this Site.  # noqa: E501
        :rtype: Asset
        """
        return self._default_avatar

    @default_avatar.setter
    def default_avatar(self, default_avatar):
        """Sets the default_avatar of this Site.


        :param default_avatar: The default_avatar of this Site.  # noqa: E501
        :type: Asset
        """

        self._default_avatar = default_avatar

    @property
    def home_page(self):
        """Gets the home_page of this Site.  # noqa: E501


        :return: The home_page of this Site.  # noqa: E501
        :rtype: Page
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this Site.


        :param home_page: The home_page of this Site.  # noqa: E501
        :type: Page
        """

        self._home_page = home_page

    @property
    def board_captcha(self):
        """Gets the board_captcha of this Site.  # noqa: E501


        :return: The board_captcha of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._board_captcha

    @board_captcha.setter
    def board_captcha(self, board_captcha):
        """Sets the board_captcha of this Site.


        :param board_captcha: The board_captcha of this Site.  # noqa: E501
        :type: bool
        """

        self._board_captcha = board_captcha

    @property
    def conference(self):
        """Gets the conference of this Site.  # noqa: E501


        :return: The conference of this Site.  # noqa: E501
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this Site.


        :param conference: The conference of this Site.  # noqa: E501
        :type: str
        """

        self._conference = conference

    @property
    def league(self):
        """Gets the league of this Site.  # noqa: E501


        :return: The league of this Site.  # noqa: E501
        :rtype: str
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this Site.


        :param league: The league of this Site.  # noqa: E501
        :type: str
        """

        self._league = league

    @property
    def network(self):
        """Gets the network of this Site.  # noqa: E501


        :return: The network of this Site.  # noqa: E501
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Site.


        :param network: The network of this Site.  # noqa: E501
        :type: Network
        """

        self._network = network

    @property
    def podcasts(self):
        """Gets the podcasts of this Site.  # noqa: E501


        :return: The podcasts of this Site.  # noqa: E501
        :rtype: list[Podcast]
        """
        return self._podcasts

    @podcasts.setter
    def podcasts(self, podcasts):
        """Sets the podcasts of this Site.


        :param podcasts: The podcasts of this Site.  # noqa: E501
        :type: list[Podcast]
        """

        self._podcasts = podcasts

    @property
    def ip_bans(self):
        """Gets the ip_bans of this Site.  # noqa: E501


        :return: The ip_bans of this Site.  # noqa: E501
        :rtype: list[IpBan]
        """
        return self._ip_bans

    @ip_bans.setter
    def ip_bans(self, ip_bans):
        """Sets the ip_bans of this Site.


        :param ip_bans: The ip_bans of this Site.  # noqa: E501
        :type: list[IpBan]
        """

        self._ip_bans = ip_bans

    @property
    def promotion_set(self):
        """Gets the promotion_set of this Site.  # noqa: E501


        :return: The promotion_set of this Site.  # noqa: E501
        :rtype: PromotionSet
        """
        return self._promotion_set

    @promotion_set.setter
    def promotion_set(self, promotion_set):
        """Sets the promotion_set of this Site.


        :param promotion_set: The promotion_set of this Site.  # noqa: E501
        :type: PromotionSet
        """

        self._promotion_set = promotion_set

    @property
    def institution(self):
        """Gets the institution of this Site.  # noqa: E501


        :return: The institution of this Site.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this Site.


        :param institution: The institution of this Site.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def users(self):
        """Gets the users of this Site.  # noqa: E501


        :return: The users of this Site.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Site.


        :param users: The users of this Site.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    @property
    def user_roles(self):
        """Gets the user_roles of this Site.  # noqa: E501


        :return: The user_roles of this Site.  # noqa: E501
        :rtype: list[UserRole]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this Site.


        :param user_roles: The user_roles of this Site.  # noqa: E501
        :type: list[UserRole]
        """

        self._user_roles = user_roles

    @property
    def subscription_sites(self):
        """Gets the subscription_sites of this Site.  # noqa: E501


        :return: The subscription_sites of this Site.  # noqa: E501
        :rtype: list[SubscriptionSite]
        """
        return self._subscription_sites

    @subscription_sites.setter
    def subscription_sites(self, subscription_sites):
        """Sets the subscription_sites of this Site.


        :param subscription_sites: The subscription_sites of this Site.  # noqa: E501
        :type: list[SubscriptionSite]
        """

        self._subscription_sites = subscription_sites

    @property
    def site_urls(self):
        """Gets the site_urls of this Site.  # noqa: E501


        :return: The site_urls of this Site.  # noqa: E501
        :rtype: list[SiteUrl]
        """
        return self._site_urls

    @site_urls.setter
    def site_urls(self, site_urls):
        """Sets the site_urls of this Site.


        :param site_urls: The site_urls of this Site.  # noqa: E501
        :type: list[SiteUrl]
        """

        self._site_urls = site_urls

    @property
    def contact_groups(self):
        """Gets the contact_groups of this Site.  # noqa: E501


        :return: The contact_groups of this Site.  # noqa: E501
        :rtype: list[ContactGroup]
        """
        return self._contact_groups

    @contact_groups.setter
    def contact_groups(self, contact_groups):
        """Sets the contact_groups of this Site.


        :param contact_groups: The contact_groups of this Site.  # noqa: E501
        :type: list[ContactGroup]
        """

        self._contact_groups = contact_groups

    @property
    def channels(self):
        """Gets the channels of this Site.  # noqa: E501


        :return: The channels of this Site.  # noqa: E501
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Site.


        :param channels: The channels of this Site.  # noqa: E501
        :type: list[Channel]
        """

        self._channels = channels

    @property
    def user_ban_writes(self):
        """Gets the user_ban_writes of this Site.  # noqa: E501


        :return: The user_ban_writes of this Site.  # noqa: E501
        :rtype: list[UserBanWrite]
        """
        return self._user_ban_writes

    @user_ban_writes.setter
    def user_ban_writes(self, user_ban_writes):
        """Sets the user_ban_writes of this Site.


        :param user_ban_writes: The user_ban_writes of this Site.  # noqa: E501
        :type: list[UserBanWrite]
        """

        self._user_ban_writes = user_ban_writes

    @property
    def menus(self):
        """Gets the menus of this Site.  # noqa: E501


        :return: The menus of this Site.  # noqa: E501
        :rtype: list[Menu]
        """
        return self._menus

    @menus.setter
    def menus(self, menus):
        """Sets the menus of this Site.


        :param menus: The menus of this Site.  # noqa: E501
        :type: list[Menu]
        """

        self._menus = menus

    @property
    def quick_links(self):
        """Gets the quick_links of this Site.  # noqa: E501


        :return: The quick_links of this Site.  # noqa: E501
        :rtype: list[QuickLink]
        """
        return self._quick_links

    @quick_links.setter
    def quick_links(self, quick_links):
        """Sets the quick_links of this Site.


        :param quick_links: The quick_links of this Site.  # noqa: E501
        :type: list[QuickLink]
        """

        self._quick_links = quick_links

    @property
    def writer_goal_sites(self):
        """Gets the writer_goal_sites of this Site.  # noqa: E501


        :return: The writer_goal_sites of this Site.  # noqa: E501
        :rtype: list[WriterGoalSite]
        """
        return self._writer_goal_sites

    @writer_goal_sites.setter
    def writer_goal_sites(self, writer_goal_sites):
        """Sets the writer_goal_sites of this Site.


        :param writer_goal_sites: The writer_goal_sites of this Site.  # noqa: E501
        :type: list[WriterGoalSite]
        """

        self._writer_goal_sites = writer_goal_sites

    @property
    def video_channels(self):
        """Gets the video_channels of this Site.  # noqa: E501


        :return: The video_channels of this Site.  # noqa: E501
        :rtype: list[VideoChannel]
        """
        return self._video_channels

    @video_channels.setter
    def video_channels(self, video_channels):
        """Sets the video_channels of this Site.


        :param video_channels: The video_channels of this Site.  # noqa: E501
        :type: list[VideoChannel]
        """

        self._video_channels = video_channels

    @property
    def default_site_url(self):
        """Gets the default_site_url of this Site.  # noqa: E501


        :return: The default_site_url of this Site.  # noqa: E501
        :rtype: SiteUrl
        """
        return self._default_site_url

    @default_site_url.setter
    def default_site_url(self, default_site_url):
        """Sets the default_site_url of this Site.


        :param default_site_url: The default_site_url of this Site.  # noqa: E501
        :type: SiteUrl
        """

        self._default_site_url = default_site_url

    @property
    def url(self):
        """Gets the url of this Site.  # noqa: E501


        :return: The url of this Site.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Site.


        :param url: The url of this Site.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Site, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

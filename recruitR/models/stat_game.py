# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatGame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'home_team_key': 'int',
        'away_team_key': 'int',
        '_date': 'datetime',
        'home_score': 'int',
        'away_score': 'int',
        'location': 'str',
        'ticket_link': 'str',
        'sport_key': 'int',
        'year': 'int',
        'week': 'int',
        'game_status_type_key': 'int',
        'game_type_key': 'int',
        'game_cover_type_key': 'int',
        'league_key': 'int',
        'line': 'float',
        'name': 'str',
        'cbs_annotation': 'str',
        'home_team': 'Team',
        'away_team': 'Team',
        'sport': 'Sport',
        'league': 'League',
        'stat_game_assets': 'list[StatGameAsset]',
        'stat_game_contents': 'list[StatGameContent]'
    }

    attribute_map = {
        'key': 'key',
        'home_team_key': 'homeTeamKey',
        'away_team_key': 'awayTeamKey',
        '_date': 'date',
        'home_score': 'homeScore',
        'away_score': 'awayScore',
        'location': 'location',
        'ticket_link': 'ticketLink',
        'sport_key': 'sportKey',
        'year': 'year',
        'week': 'week',
        'game_status_type_key': 'gameStatusTypeKey',
        'game_type_key': 'gameTypeKey',
        'game_cover_type_key': 'gameCoverTypeKey',
        'league_key': 'leagueKey',
        'line': 'line',
        'name': 'name',
        'cbs_annotation': 'cbsAnnotation',
        'home_team': 'homeTeam',
        'away_team': 'awayTeam',
        'sport': 'sport',
        'league': 'league',
        'stat_game_assets': 'statGameAssets',
        'stat_game_contents': 'statGameContents'
    }

    def __init__(self, key=None, home_team_key=None, away_team_key=None, _date=None, home_score=None, away_score=None, location=None, ticket_link=None, sport_key=None, year=None, week=None, game_status_type_key=None, game_type_key=None, game_cover_type_key=None, league_key=None, line=None, name=None, cbs_annotation=None, home_team=None, away_team=None, sport=None, league=None, stat_game_assets=None, stat_game_contents=None):  # noqa: E501
        """StatGame - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._home_team_key = None
        self._away_team_key = None
        self.__date = None
        self._home_score = None
        self._away_score = None
        self._location = None
        self._ticket_link = None
        self._sport_key = None
        self._year = None
        self._week = None
        self._game_status_type_key = None
        self._game_type_key = None
        self._game_cover_type_key = None
        self._league_key = None
        self._line = None
        self._name = None
        self._cbs_annotation = None
        self._home_team = None
        self._away_team = None
        self._sport = None
        self._league = None
        self._stat_game_assets = None
        self._stat_game_contents = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if home_team_key is not None:
            self.home_team_key = home_team_key
        if away_team_key is not None:
            self.away_team_key = away_team_key
        if _date is not None:
            self._date = _date
        if home_score is not None:
            self.home_score = home_score
        if away_score is not None:
            self.away_score = away_score
        if location is not None:
            self.location = location
        if ticket_link is not None:
            self.ticket_link = ticket_link
        if sport_key is not None:
            self.sport_key = sport_key
        if year is not None:
            self.year = year
        if week is not None:
            self.week = week
        if game_status_type_key is not None:
            self.game_status_type_key = game_status_type_key
        if game_type_key is not None:
            self.game_type_key = game_type_key
        if game_cover_type_key is not None:
            self.game_cover_type_key = game_cover_type_key
        if league_key is not None:
            self.league_key = league_key
        if line is not None:
            self.line = line
        if name is not None:
            self.name = name
        if cbs_annotation is not None:
            self.cbs_annotation = cbs_annotation
        if home_team is not None:
            self.home_team = home_team
        if away_team is not None:
            self.away_team = away_team
        if sport is not None:
            self.sport = sport
        if league is not None:
            self.league = league
        if stat_game_assets is not None:
            self.stat_game_assets = stat_game_assets
        if stat_game_contents is not None:
            self.stat_game_contents = stat_game_contents

    @property
    def key(self):
        """Gets the key of this StatGame.  # noqa: E501


        :return: The key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StatGame.


        :param key: The key of this StatGame.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def home_team_key(self):
        """Gets the home_team_key of this StatGame.  # noqa: E501


        :return: The home_team_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._home_team_key

    @home_team_key.setter
    def home_team_key(self, home_team_key):
        """Sets the home_team_key of this StatGame.


        :param home_team_key: The home_team_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._home_team_key = home_team_key

    @property
    def away_team_key(self):
        """Gets the away_team_key of this StatGame.  # noqa: E501


        :return: The away_team_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._away_team_key

    @away_team_key.setter
    def away_team_key(self, away_team_key):
        """Sets the away_team_key of this StatGame.


        :param away_team_key: The away_team_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._away_team_key = away_team_key

    @property
    def _date(self):
        """Gets the _date of this StatGame.  # noqa: E501


        :return: The _date of this StatGame.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StatGame.


        :param _date: The _date of this StatGame.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def home_score(self):
        """Gets the home_score of this StatGame.  # noqa: E501


        :return: The home_score of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this StatGame.


        :param home_score: The home_score of this StatGame.  # noqa: E501
        :type: int
        """

        self._home_score = home_score

    @property
    def away_score(self):
        """Gets the away_score of this StatGame.  # noqa: E501


        :return: The away_score of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this StatGame.


        :param away_score: The away_score of this StatGame.  # noqa: E501
        :type: int
        """

        self._away_score = away_score

    @property
    def location(self):
        """Gets the location of this StatGame.  # noqa: E501


        :return: The location of this StatGame.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StatGame.


        :param location: The location of this StatGame.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def ticket_link(self):
        """Gets the ticket_link of this StatGame.  # noqa: E501


        :return: The ticket_link of this StatGame.  # noqa: E501
        :rtype: str
        """
        return self._ticket_link

    @ticket_link.setter
    def ticket_link(self, ticket_link):
        """Sets the ticket_link of this StatGame.


        :param ticket_link: The ticket_link of this StatGame.  # noqa: E501
        :type: str
        """

        self._ticket_link = ticket_link

    @property
    def sport_key(self):
        """Gets the sport_key of this StatGame.  # noqa: E501


        :return: The sport_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this StatGame.


        :param sport_key: The sport_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def year(self):
        """Gets the year of this StatGame.  # noqa: E501


        :return: The year of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this StatGame.


        :param year: The year of this StatGame.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def week(self):
        """Gets the week of this StatGame.  # noqa: E501


        :return: The week of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this StatGame.


        :param week: The week of this StatGame.  # noqa: E501
        :type: int
        """

        self._week = week

    @property
    def game_status_type_key(self):
        """Gets the game_status_type_key of this StatGame.  # noqa: E501


        :return: The game_status_type_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._game_status_type_key

    @game_status_type_key.setter
    def game_status_type_key(self, game_status_type_key):
        """Sets the game_status_type_key of this StatGame.


        :param game_status_type_key: The game_status_type_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._game_status_type_key = game_status_type_key

    @property
    def game_type_key(self):
        """Gets the game_type_key of this StatGame.  # noqa: E501


        :return: The game_type_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._game_type_key

    @game_type_key.setter
    def game_type_key(self, game_type_key):
        """Sets the game_type_key of this StatGame.


        :param game_type_key: The game_type_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._game_type_key = game_type_key

    @property
    def game_cover_type_key(self):
        """Gets the game_cover_type_key of this StatGame.  # noqa: E501


        :return: The game_cover_type_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._game_cover_type_key

    @game_cover_type_key.setter
    def game_cover_type_key(self, game_cover_type_key):
        """Sets the game_cover_type_key of this StatGame.


        :param game_cover_type_key: The game_cover_type_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._game_cover_type_key = game_cover_type_key

    @property
    def league_key(self):
        """Gets the league_key of this StatGame.  # noqa: E501


        :return: The league_key of this StatGame.  # noqa: E501
        :rtype: int
        """
        return self._league_key

    @league_key.setter
    def league_key(self, league_key):
        """Sets the league_key of this StatGame.


        :param league_key: The league_key of this StatGame.  # noqa: E501
        :type: int
        """

        self._league_key = league_key

    @property
    def line(self):
        """Gets the line of this StatGame.  # noqa: E501


        :return: The line of this StatGame.  # noqa: E501
        :rtype: float
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this StatGame.


        :param line: The line of this StatGame.  # noqa: E501
        :type: float
        """

        self._line = line

    @property
    def name(self):
        """Gets the name of this StatGame.  # noqa: E501


        :return: The name of this StatGame.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatGame.


        :param name: The name of this StatGame.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cbs_annotation(self):
        """Gets the cbs_annotation of this StatGame.  # noqa: E501


        :return: The cbs_annotation of this StatGame.  # noqa: E501
        :rtype: str
        """
        return self._cbs_annotation

    @cbs_annotation.setter
    def cbs_annotation(self, cbs_annotation):
        """Sets the cbs_annotation of this StatGame.


        :param cbs_annotation: The cbs_annotation of this StatGame.  # noqa: E501
        :type: str
        """

        self._cbs_annotation = cbs_annotation

    @property
    def home_team(self):
        """Gets the home_team of this StatGame.  # noqa: E501


        :return: The home_team of this StatGame.  # noqa: E501
        :rtype: Team
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this StatGame.


        :param home_team: The home_team of this StatGame.  # noqa: E501
        :type: Team
        """

        self._home_team = home_team

    @property
    def away_team(self):
        """Gets the away_team of this StatGame.  # noqa: E501


        :return: The away_team of this StatGame.  # noqa: E501
        :rtype: Team
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this StatGame.


        :param away_team: The away_team of this StatGame.  # noqa: E501
        :type: Team
        """

        self._away_team = away_team

    @property
    def sport(self):
        """Gets the sport of this StatGame.  # noqa: E501


        :return: The sport of this StatGame.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this StatGame.


        :param sport: The sport of this StatGame.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    @property
    def league(self):
        """Gets the league of this StatGame.  # noqa: E501


        :return: The league of this StatGame.  # noqa: E501
        :rtype: League
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this StatGame.


        :param league: The league of this StatGame.  # noqa: E501
        :type: League
        """

        self._league = league

    @property
    def stat_game_assets(self):
        """Gets the stat_game_assets of this StatGame.  # noqa: E501


        :return: The stat_game_assets of this StatGame.  # noqa: E501
        :rtype: list[StatGameAsset]
        """
        return self._stat_game_assets

    @stat_game_assets.setter
    def stat_game_assets(self, stat_game_assets):
        """Sets the stat_game_assets of this StatGame.


        :param stat_game_assets: The stat_game_assets of this StatGame.  # noqa: E501
        :type: list[StatGameAsset]
        """

        self._stat_game_assets = stat_game_assets

    @property
    def stat_game_contents(self):
        """Gets the stat_game_contents of this StatGame.  # noqa: E501


        :return: The stat_game_contents of this StatGame.  # noqa: E501
        :rtype: list[StatGameContent]
        """
        return self._stat_game_contents

    @stat_game_contents.setter
    def stat_game_contents(self, stat_game_contents):
        """Sets the stat_game_contents of this StatGame.


        :param stat_game_contents: The stat_game_contents of this StatGame.  # noqa: E501
        :type: list[StatGameContent]
        """

        self._stat_game_contents = stat_game_contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatGame, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatGame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

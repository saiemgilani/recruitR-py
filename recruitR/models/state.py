# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class State(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'tax_rate': 'float',
        'region_key': 'int',
        'country_key': 'int',
        'betting_url': 'str',
        'pixel_tracking_value': 'str',
        'double_click_tracking_value': 'str',
        'cards': 'list[Card]',
        'zip_codes': 'list[ZipCode]'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'tax_rate': 'taxRate',
        'region_key': 'regionKey',
        'country_key': 'countryKey',
        'betting_url': 'bettingUrl',
        'pixel_tracking_value': 'pixelTrackingValue',
        'double_click_tracking_value': 'doubleClickTrackingValue',
        'cards': 'cards',
        'zip_codes': 'zipCodes'
    }

    def __init__(self, key=None, name=None, abbreviation=None, tax_rate=None, region_key=None, country_key=None, betting_url=None, pixel_tracking_value=None, double_click_tracking_value=None, cards=None, zip_codes=None):  # noqa: E501
        """State - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._abbreviation = None
        self._tax_rate = None
        self._region_key = None
        self._country_key = None
        self._betting_url = None
        self._pixel_tracking_value = None
        self._double_click_tracking_value = None
        self._cards = None
        self._zip_codes = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if region_key is not None:
            self.region_key = region_key
        if country_key is not None:
            self.country_key = country_key
        if betting_url is not None:
            self.betting_url = betting_url
        if pixel_tracking_value is not None:
            self.pixel_tracking_value = pixel_tracking_value
        if double_click_tracking_value is not None:
            self.double_click_tracking_value = double_click_tracking_value
        if cards is not None:
            self.cards = cards
        if zip_codes is not None:
            self.zip_codes = zip_codes

    @property
    def key(self):
        """Gets the key of this State.  # noqa: E501


        :return: The key of this State.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this State.


        :param key: The key of this State.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this State.  # noqa: E501


        :return: The name of this State.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this State.


        :param name: The name of this State.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this State.  # noqa: E501


        :return: The abbreviation of this State.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this State.


        :param abbreviation: The abbreviation of this State.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def tax_rate(self):
        """Gets the tax_rate of this State.  # noqa: E501


        :return: The tax_rate of this State.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this State.


        :param tax_rate: The tax_rate of this State.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def region_key(self):
        """Gets the region_key of this State.  # noqa: E501


        :return: The region_key of this State.  # noqa: E501
        :rtype: int
        """
        return self._region_key

    @region_key.setter
    def region_key(self, region_key):
        """Sets the region_key of this State.


        :param region_key: The region_key of this State.  # noqa: E501
        :type: int
        """

        self._region_key = region_key

    @property
    def country_key(self):
        """Gets the country_key of this State.  # noqa: E501


        :return: The country_key of this State.  # noqa: E501
        :rtype: int
        """
        return self._country_key

    @country_key.setter
    def country_key(self, country_key):
        """Sets the country_key of this State.


        :param country_key: The country_key of this State.  # noqa: E501
        :type: int
        """

        self._country_key = country_key

    @property
    def betting_url(self):
        """Gets the betting_url of this State.  # noqa: E501


        :return: The betting_url of this State.  # noqa: E501
        :rtype: str
        """
        return self._betting_url

    @betting_url.setter
    def betting_url(self, betting_url):
        """Sets the betting_url of this State.


        :param betting_url: The betting_url of this State.  # noqa: E501
        :type: str
        """

        self._betting_url = betting_url

    @property
    def pixel_tracking_value(self):
        """Gets the pixel_tracking_value of this State.  # noqa: E501


        :return: The pixel_tracking_value of this State.  # noqa: E501
        :rtype: str
        """
        return self._pixel_tracking_value

    @pixel_tracking_value.setter
    def pixel_tracking_value(self, pixel_tracking_value):
        """Sets the pixel_tracking_value of this State.


        :param pixel_tracking_value: The pixel_tracking_value of this State.  # noqa: E501
        :type: str
        """

        self._pixel_tracking_value = pixel_tracking_value

    @property
    def double_click_tracking_value(self):
        """Gets the double_click_tracking_value of this State.  # noqa: E501


        :return: The double_click_tracking_value of this State.  # noqa: E501
        :rtype: str
        """
        return self._double_click_tracking_value

    @double_click_tracking_value.setter
    def double_click_tracking_value(self, double_click_tracking_value):
        """Sets the double_click_tracking_value of this State.


        :param double_click_tracking_value: The double_click_tracking_value of this State.  # noqa: E501
        :type: str
        """

        self._double_click_tracking_value = double_click_tracking_value

    @property
    def cards(self):
        """Gets the cards of this State.  # noqa: E501


        :return: The cards of this State.  # noqa: E501
        :rtype: list[Card]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this State.


        :param cards: The cards of this State.  # noqa: E501
        :type: list[Card]
        """

        self._cards = cards

    @property
    def zip_codes(self):
        """Gets the zip_codes of this State.  # noqa: E501


        :return: The zip_codes of this State.  # noqa: E501
        :rtype: list[ZipCode]
        """
        return self._zip_codes

    @zip_codes.setter
    def zip_codes(self, zip_codes):
        """Sets the zip_codes of this State.


        :param zip_codes: The zip_codes of this State.  # noqa: E501
        :type: list[ZipCode]
        """

        self._zip_codes = zip_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(State, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, State):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'price': 'float',
        'network_key': 'int',
        'subscription_type_key': 'int',
        'description': 'str',
        'restricted_network': 'int',
        'serial': 'str',
        'available_for_purchase': 'bool',
        'include_sportsline': 'bool',
        'global_features': 'UserGlobalFeatures',
        'subscription_sites': 'list[SubscriptionSite]',
        'subscription_type': 'SubscriptionType',
        'user_subscriptions': 'list[UserSubscription]',
        'user_notes': 'list[UserNote]',
        'default_name': 'str'
    }

    attribute_map = {
        'key': 'key',
        'price': 'price',
        'network_key': 'networkKey',
        'subscription_type_key': 'subscriptionTypeKey',
        'description': 'description',
        'restricted_network': 'restrictedNetwork',
        'serial': 'serial',
        'available_for_purchase': 'availableForPurchase',
        'include_sportsline': 'includeSportsline',
        'global_features': 'globalFeatures',
        'subscription_sites': 'subscriptionSites',
        'subscription_type': 'subscriptionType',
        'user_subscriptions': 'userSubscriptions',
        'user_notes': 'userNotes',
        'default_name': 'defaultName'
    }

    def __init__(self, key=None, price=None, network_key=None, subscription_type_key=None, description=None, restricted_network=None, serial=None, available_for_purchase=None, include_sportsline=None, global_features=None, subscription_sites=None, subscription_type=None, user_subscriptions=None, user_notes=None, default_name=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._price = None
        self._network_key = None
        self._subscription_type_key = None
        self._description = None
        self._restricted_network = None
        self._serial = None
        self._available_for_purchase = None
        self._include_sportsline = None
        self._global_features = None
        self._subscription_sites = None
        self._subscription_type = None
        self._user_subscriptions = None
        self._user_notes = None
        self._default_name = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if price is not None:
            self.price = price
        if network_key is not None:
            self.network_key = network_key
        if subscription_type_key is not None:
            self.subscription_type_key = subscription_type_key
        if description is not None:
            self.description = description
        if restricted_network is not None:
            self.restricted_network = restricted_network
        if serial is not None:
            self.serial = serial
        if available_for_purchase is not None:
            self.available_for_purchase = available_for_purchase
        if include_sportsline is not None:
            self.include_sportsline = include_sportsline
        if global_features is not None:
            self.global_features = global_features
        if subscription_sites is not None:
            self.subscription_sites = subscription_sites
        if subscription_type is not None:
            self.subscription_type = subscription_type
        if user_subscriptions is not None:
            self.user_subscriptions = user_subscriptions
        if user_notes is not None:
            self.user_notes = user_notes
        if default_name is not None:
            self.default_name = default_name

    @property
    def key(self):
        """Gets the key of this Subscription.  # noqa: E501


        :return: The key of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Subscription.


        :param key: The key of this Subscription.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def price(self):
        """Gets the price of this Subscription.  # noqa: E501


        :return: The price of this Subscription.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Subscription.


        :param price: The price of this Subscription.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def network_key(self):
        """Gets the network_key of this Subscription.  # noqa: E501


        :return: The network_key of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._network_key

    @network_key.setter
    def network_key(self, network_key):
        """Sets the network_key of this Subscription.


        :param network_key: The network_key of this Subscription.  # noqa: E501
        :type: int
        """

        self._network_key = network_key

    @property
    def subscription_type_key(self):
        """Gets the subscription_type_key of this Subscription.  # noqa: E501


        :return: The subscription_type_key of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._subscription_type_key

    @subscription_type_key.setter
    def subscription_type_key(self, subscription_type_key):
        """Sets the subscription_type_key of this Subscription.


        :param subscription_type_key: The subscription_type_key of this Subscription.  # noqa: E501
        :type: int
        """

        self._subscription_type_key = subscription_type_key

    @property
    def description(self):
        """Gets the description of this Subscription.  # noqa: E501


        :return: The description of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscription.


        :param description: The description of this Subscription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def restricted_network(self):
        """Gets the restricted_network of this Subscription.  # noqa: E501


        :return: The restricted_network of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._restricted_network

    @restricted_network.setter
    def restricted_network(self, restricted_network):
        """Sets the restricted_network of this Subscription.


        :param restricted_network: The restricted_network of this Subscription.  # noqa: E501
        :type: int
        """

        self._restricted_network = restricted_network

    @property
    def serial(self):
        """Gets the serial of this Subscription.  # noqa: E501


        :return: The serial of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Subscription.


        :param serial: The serial of this Subscription.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def available_for_purchase(self):
        """Gets the available_for_purchase of this Subscription.  # noqa: E501


        :return: The available_for_purchase of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_purchase

    @available_for_purchase.setter
    def available_for_purchase(self, available_for_purchase):
        """Sets the available_for_purchase of this Subscription.


        :param available_for_purchase: The available_for_purchase of this Subscription.  # noqa: E501
        :type: bool
        """

        self._available_for_purchase = available_for_purchase

    @property
    def include_sportsline(self):
        """Gets the include_sportsline of this Subscription.  # noqa: E501


        :return: The include_sportsline of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._include_sportsline

    @include_sportsline.setter
    def include_sportsline(self, include_sportsline):
        """Sets the include_sportsline of this Subscription.


        :param include_sportsline: The include_sportsline of this Subscription.  # noqa: E501
        :type: bool
        """

        self._include_sportsline = include_sportsline

    @property
    def global_features(self):
        """Gets the global_features of this Subscription.  # noqa: E501


        :return: The global_features of this Subscription.  # noqa: E501
        :rtype: UserGlobalFeatures
        """
        return self._global_features

    @global_features.setter
    def global_features(self, global_features):
        """Sets the global_features of this Subscription.


        :param global_features: The global_features of this Subscription.  # noqa: E501
        :type: UserGlobalFeatures
        """

        self._global_features = global_features

    @property
    def subscription_sites(self):
        """Gets the subscription_sites of this Subscription.  # noqa: E501


        :return: The subscription_sites of this Subscription.  # noqa: E501
        :rtype: list[SubscriptionSite]
        """
        return self._subscription_sites

    @subscription_sites.setter
    def subscription_sites(self, subscription_sites):
        """Sets the subscription_sites of this Subscription.


        :param subscription_sites: The subscription_sites of this Subscription.  # noqa: E501
        :type: list[SubscriptionSite]
        """

        self._subscription_sites = subscription_sites

    @property
    def subscription_type(self):
        """Gets the subscription_type of this Subscription.  # noqa: E501


        :return: The subscription_type of this Subscription.  # noqa: E501
        :rtype: SubscriptionType
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this Subscription.


        :param subscription_type: The subscription_type of this Subscription.  # noqa: E501
        :type: SubscriptionType
        """

        self._subscription_type = subscription_type

    @property
    def user_subscriptions(self):
        """Gets the user_subscriptions of this Subscription.  # noqa: E501


        :return: The user_subscriptions of this Subscription.  # noqa: E501
        :rtype: list[UserSubscription]
        """
        return self._user_subscriptions

    @user_subscriptions.setter
    def user_subscriptions(self, user_subscriptions):
        """Sets the user_subscriptions of this Subscription.


        :param user_subscriptions: The user_subscriptions of this Subscription.  # noqa: E501
        :type: list[UserSubscription]
        """

        self._user_subscriptions = user_subscriptions

    @property
    def user_notes(self):
        """Gets the user_notes of this Subscription.  # noqa: E501


        :return: The user_notes of this Subscription.  # noqa: E501
        :rtype: list[UserNote]
        """
        return self._user_notes

    @user_notes.setter
    def user_notes(self, user_notes):
        """Sets the user_notes of this Subscription.


        :param user_notes: The user_notes of this Subscription.  # noqa: E501
        :type: list[UserNote]
        """

        self._user_notes = user_notes

    @property
    def default_name(self):
        """Gets the default_name of this Subscription.  # noqa: E501


        :return: The default_name of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._default_name

    @default_name.setter
    def default_name(self, default_name):
        """Sets the default_name of this Subscription.


        :param default_name: The default_name of this Subscription.  # noqa: E501
        :type: str
        """

        self._default_name = default_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

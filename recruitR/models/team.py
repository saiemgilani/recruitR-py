# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'sport_key': 'int',
        'institution_key': 'int',
        'cbs_key': 'int',
        'name': 'str',
        'stats_url': 'str',
        'uses_stat_roster': 'bool',
        'current_team_conference': 'TeamConference',
        'institution': 'Institution',
        'team_conferences': 'list[TeamConference]',
        'sport': 'Sport'
    }

    attribute_map = {
        'key': 'key',
        'sport_key': 'sportKey',
        'institution_key': 'institutionKey',
        'cbs_key': 'cbsKey',
        'name': 'name',
        'stats_url': 'statsUrl',
        'uses_stat_roster': 'usesStatRoster',
        'current_team_conference': 'currentTeamConference',
        'institution': 'institution',
        'team_conferences': 'teamConferences',
        'sport': 'sport'
    }

    def __init__(self, key=None, sport_key=None, institution_key=None, cbs_key=None, name=None, stats_url=None, uses_stat_roster=None, current_team_conference=None, institution=None, team_conferences=None, sport=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._sport_key = None
        self._institution_key = None
        self._cbs_key = None
        self._name = None
        self._stats_url = None
        self._uses_stat_roster = None
        self._current_team_conference = None
        self._institution = None
        self._team_conferences = None
        self._sport = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if sport_key is not None:
            self.sport_key = sport_key
        if institution_key is not None:
            self.institution_key = institution_key
        if cbs_key is not None:
            self.cbs_key = cbs_key
        if name is not None:
            self.name = name
        if stats_url is not None:
            self.stats_url = stats_url
        if uses_stat_roster is not None:
            self.uses_stat_roster = uses_stat_roster
        if current_team_conference is not None:
            self.current_team_conference = current_team_conference
        if institution is not None:
            self.institution = institution
        if team_conferences is not None:
            self.team_conferences = team_conferences
        if sport is not None:
            self.sport = sport

    @property
    def key(self):
        """Gets the key of this Team.  # noqa: E501


        :return: The key of this Team.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Team.


        :param key: The key of this Team.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def sport_key(self):
        """Gets the sport_key of this Team.  # noqa: E501


        :return: The sport_key of this Team.  # noqa: E501
        :rtype: int
        """
        return self._sport_key

    @sport_key.setter
    def sport_key(self, sport_key):
        """Sets the sport_key of this Team.


        :param sport_key: The sport_key of this Team.  # noqa: E501
        :type: int
        """

        self._sport_key = sport_key

    @property
    def institution_key(self):
        """Gets the institution_key of this Team.  # noqa: E501


        :return: The institution_key of this Team.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this Team.


        :param institution_key: The institution_key of this Team.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def cbs_key(self):
        """Gets the cbs_key of this Team.  # noqa: E501


        :return: The cbs_key of this Team.  # noqa: E501
        :rtype: int
        """
        return self._cbs_key

    @cbs_key.setter
    def cbs_key(self, cbs_key):
        """Sets the cbs_key of this Team.


        :param cbs_key: The cbs_key of this Team.  # noqa: E501
        :type: int
        """

        self._cbs_key = cbs_key

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501


        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def stats_url(self):
        """Gets the stats_url of this Team.  # noqa: E501


        :return: The stats_url of this Team.  # noqa: E501
        :rtype: str
        """
        return self._stats_url

    @stats_url.setter
    def stats_url(self, stats_url):
        """Sets the stats_url of this Team.


        :param stats_url: The stats_url of this Team.  # noqa: E501
        :type: str
        """

        self._stats_url = stats_url

    @property
    def uses_stat_roster(self):
        """Gets the uses_stat_roster of this Team.  # noqa: E501


        :return: The uses_stat_roster of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._uses_stat_roster

    @uses_stat_roster.setter
    def uses_stat_roster(self, uses_stat_roster):
        """Sets the uses_stat_roster of this Team.


        :param uses_stat_roster: The uses_stat_roster of this Team.  # noqa: E501
        :type: bool
        """

        self._uses_stat_roster = uses_stat_roster

    @property
    def current_team_conference(self):
        """Gets the current_team_conference of this Team.  # noqa: E501


        :return: The current_team_conference of this Team.  # noqa: E501
        :rtype: TeamConference
        """
        return self._current_team_conference

    @current_team_conference.setter
    def current_team_conference(self, current_team_conference):
        """Sets the current_team_conference of this Team.


        :param current_team_conference: The current_team_conference of this Team.  # noqa: E501
        :type: TeamConference
        """

        self._current_team_conference = current_team_conference

    @property
    def institution(self):
        """Gets the institution of this Team.  # noqa: E501


        :return: The institution of this Team.  # noqa: E501
        :rtype: Institution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this Team.


        :param institution: The institution of this Team.  # noqa: E501
        :type: Institution
        """

        self._institution = institution

    @property
    def team_conferences(self):
        """Gets the team_conferences of this Team.  # noqa: E501


        :return: The team_conferences of this Team.  # noqa: E501
        :rtype: list[TeamConference]
        """
        return self._team_conferences

    @team_conferences.setter
    def team_conferences(self, team_conferences):
        """Sets the team_conferences of this Team.


        :param team_conferences: The team_conferences of this Team.  # noqa: E501
        :type: list[TeamConference]
        """

        self._team_conferences = team_conferences

    @property
    def sport(self):
        """Gets the sport of this Team.  # noqa: E501


        :return: The sport of this Team.  # noqa: E501
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this Team.


        :param sport: The sport of this Team.  # noqa: E501
        :type: Sport
        """

        self._sport = sport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

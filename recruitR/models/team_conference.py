# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamConference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'team_key': 'int',
        'conference_key': 'int',
        'start_year': 'int',
        'team': 'Team',
        'conference': 'Conference'
    }

    attribute_map = {
        'key': 'key',
        'team_key': 'teamKey',
        'conference_key': 'conferenceKey',
        'start_year': 'startYear',
        'team': 'team',
        'conference': 'conference'
    }

    def __init__(self, key=None, team_key=None, conference_key=None, start_year=None, team=None, conference=None):  # noqa: E501
        """TeamConference - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._team_key = None
        self._conference_key = None
        self._start_year = None
        self._team = None
        self._conference = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if team_key is not None:
            self.team_key = team_key
        if conference_key is not None:
            self.conference_key = conference_key
        if start_year is not None:
            self.start_year = start_year
        if team is not None:
            self.team = team
        if conference is not None:
            self.conference = conference

    @property
    def key(self):
        """Gets the key of this TeamConference.  # noqa: E501


        :return: The key of this TeamConference.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TeamConference.


        :param key: The key of this TeamConference.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def team_key(self):
        """Gets the team_key of this TeamConference.  # noqa: E501


        :return: The team_key of this TeamConference.  # noqa: E501
        :rtype: int
        """
        return self._team_key

    @team_key.setter
    def team_key(self, team_key):
        """Sets the team_key of this TeamConference.


        :param team_key: The team_key of this TeamConference.  # noqa: E501
        :type: int
        """

        self._team_key = team_key

    @property
    def conference_key(self):
        """Gets the conference_key of this TeamConference.  # noqa: E501


        :return: The conference_key of this TeamConference.  # noqa: E501
        :rtype: int
        """
        return self._conference_key

    @conference_key.setter
    def conference_key(self, conference_key):
        """Sets the conference_key of this TeamConference.


        :param conference_key: The conference_key of this TeamConference.  # noqa: E501
        :type: int
        """

        self._conference_key = conference_key

    @property
    def start_year(self):
        """Gets the start_year of this TeamConference.  # noqa: E501


        :return: The start_year of this TeamConference.  # noqa: E501
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this TeamConference.


        :param start_year: The start_year of this TeamConference.  # noqa: E501
        :type: int
        """

        self._start_year = start_year

    @property
    def team(self):
        """Gets the team of this TeamConference.  # noqa: E501


        :return: The team of this TeamConference.  # noqa: E501
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamConference.


        :param team: The team of this TeamConference.  # noqa: E501
        :type: Team
        """

        self._team = team

    @property
    def conference(self):
        """Gets the conference of this TeamConference.  # noqa: E501


        :return: The conference of this TeamConference.  # noqa: E501
        :rtype: Conference
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this TeamConference.


        :param conference: The conference of this TeamConference.  # noqa: E501
        :type: Conference
        """

        self._conference = conference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamConference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamConference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

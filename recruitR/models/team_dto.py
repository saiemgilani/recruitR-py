# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'team_id': 'int',
        'institution_key': 'int',
        'conference': 'str',
        'conference_abbreviation': 'str',
        'sport': 'str',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'team_id': 'teamId',
        'institution_key': 'institutionKey',
        'conference': 'conference',
        'conference_abbreviation': 'conferenceAbbreviation',
        'sport': 'sport',
        'type': 'type'
    }

    def __init__(self, name=None, team_id=None, institution_key=None, conference=None, conference_abbreviation=None, sport=None, type=None):  # noqa: E501
        """TeamDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._team_id = None
        self._institution_key = None
        self._conference = None
        self._conference_abbreviation = None
        self._sport = None
        self._type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if team_id is not None:
            self.team_id = team_id
        if institution_key is not None:
            self.institution_key = institution_key
        if conference is not None:
            self.conference = conference
        if conference_abbreviation is not None:
            self.conference_abbreviation = conference_abbreviation
        if sport is not None:
            self.sport = sport
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this TeamDto.  # noqa: E501

        Team Name  # noqa: E501

        :return: The name of this TeamDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamDto.

        Team Name  # noqa: E501

        :param name: The name of this TeamDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def team_id(self):
        """Gets the team_id of this TeamDto.  # noqa: E501

        Primary key of the team  # noqa: E501

        :return: The team_id of this TeamDto.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamDto.

        Primary key of the team  # noqa: E501

        :param team_id: The team_id of this TeamDto.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def institution_key(self):
        """Gets the institution_key of this TeamDto.  # noqa: E501

        Key of the institution  # noqa: E501

        :return: The institution_key of this TeamDto.  # noqa: E501
        :rtype: int
        """
        return self._institution_key

    @institution_key.setter
    def institution_key(self, institution_key):
        """Sets the institution_key of this TeamDto.

        Key of the institution  # noqa: E501

        :param institution_key: The institution_key of this TeamDto.  # noqa: E501
        :type: int
        """

        self._institution_key = institution_key

    @property
    def conference(self):
        """Gets the conference of this TeamDto.  # noqa: E501

        Name of the team's Conference  # noqa: E501

        :return: The conference of this TeamDto.  # noqa: E501
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this TeamDto.

        Name of the team's Conference  # noqa: E501

        :param conference: The conference of this TeamDto.  # noqa: E501
        :type: str
        """

        self._conference = conference

    @property
    def conference_abbreviation(self):
        """Gets the conference_abbreviation of this TeamDto.  # noqa: E501

        Abbreviation of the team's Conference  # noqa: E501

        :return: The conference_abbreviation of this TeamDto.  # noqa: E501
        :rtype: str
        """
        return self._conference_abbreviation

    @conference_abbreviation.setter
    def conference_abbreviation(self, conference_abbreviation):
        """Sets the conference_abbreviation of this TeamDto.

        Abbreviation of the team's Conference  # noqa: E501

        :param conference_abbreviation: The conference_abbreviation of this TeamDto.  # noqa: E501
        :type: str
        """

        self._conference_abbreviation = conference_abbreviation

    @property
    def sport(self):
        """Gets the sport of this TeamDto.  # noqa: E501

        Name of Sport assoicated with the specific Team PK  # noqa: E501

        :return: The sport of this TeamDto.  # noqa: E501
        :rtype: str
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this TeamDto.

        Name of Sport assoicated with the specific Team PK  # noqa: E501

        :param sport: The sport of this TeamDto.  # noqa: E501
        :type: str
        """

        self._sport = sport

    @property
    def type(self):
        """Gets the type of this TeamDto.  # noqa: E501

        Institutution Type (College or Pro)  # noqa: E501

        :return: The type of this TeamDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TeamDto.

        Institutution Type (College or Pro)  # noqa: E501

        :param type: The type of this TeamDto.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

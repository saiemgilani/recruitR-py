# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'alias': 'str',
        'hash': 'str',
        'terms_of_service': 'bool',
        'terms_of_service_date': 'datetime',
        'site_key': 'int',
        'post_count': 'int',
        'date_of_birth': 'datetime',
        'can_contact': 'bool',
        'registered_date': 'datetime',
        'hide_sigs': 'int',
        'thumbs_up': 'int',
        'thumbs_down': 'int',
        'star_filter': 'int',
        'avatar': 'str',
        'avatar_key': 'int',
        'last_trial_date': 'datetime',
        'follow_filter': 'int',
        'author': 'str',
        'title': 'str',
        'points': 'int',
        'status': 'UserStatus',
        'zip_code_key': 'int',
        'show_name': 'bool',
        'private_message_setting': 'PrivateMessageSettingType',
        'member_badge_selected': 'int',
        'achievement_badge_selected': 'int',
        'merge_status': 'MergeStatuses',
        'serial': 'str',
        'twitter_user_key': 'int',
        'reference_key': 'int',
        'affiliation_key': 'int',
        'all_access_vip': 'AllAccessVIPType',
        'role_group': 'RoleGroup',
        'ip': 'str',
        'spam_confidence': 'float',
        'login_type': 'LoginType',
        'contributor_type': 'ContributorType',
        'base_post_count': 'int',
        'sportsline_eligible': 'bool',
        'sportsline_email': 'str',
        'score_strip_preference': 'ScoreStripPreference',
        'last_login_date': 'datetime',
        'archived_post_count': 'int',
        'archived_thumbs_up': 'int',
        'archived_thumbs_down': 'int',
        'password': 'str',
        'password_iv': 'str',
        'password_algorithm': 'PasswordEncryptionMethod',
        'password_salt': 'str',
        'password_hash': 'str',
        'extended_user': 'ExtendedUser',
        'site': 'Site',
        'affiliation': 'Affiliation',
        'last_password_update_date': 'str',
        'affiliations': 'list[UserAffiliation]',
        'coupon_codes': 'list[CouponCode]',
        'members': 'list[Member]',
        'private_message_users': 'list[PrivateMessageUser]',
        'session_hashes': 'list[SessionHash]',
        'user_notes': 'list[UserNote]',
        'admin_user_notes': 'list[UserNote]',
        'ip_bans': 'list[IpBan]',
        'resets': 'list[UserReset]',
        'user_roles': 'list[UserRole]',
        'user_subscriptions': 'list[UserSubscription]',
        'user_transactions': 'list[UserTransaction]',
        'admin_user_transactions': 'list[UserTransaction]',
        'user_ignores': 'list[UserIgnore]',
        'user_ignored_bys': 'list[UserIgnore]',
        'user_follow_boards': 'list[UserFollowBoard]',
        'media_bans': 'list[UserBanMedia]',
        'admin_media_bans': 'list[UserBanMedia]',
        'write_bans': 'list[UserBanWrite]',
        'admin_write_bans': 'list[UserBanWrite]',
        'posts': 'list[Post]',
        'post_votes': 'list[PostVote]',
        'scout_users': 'list[ScoutUser]',
        'alerts': 'list[Alert]',
        'contact': 'Contact',
        'user_accounts': 'list[UserAccount]',
        'deleted_contents': 'list[DeletedContent]',
        'deleted_replies': 'list[DeletedReply]',
        'writer_goal_site_writers': 'list[WriterGoalSiteWriter]',
        'member': 'Member'
    }

    attribute_map = {
        'key': 'key',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'alias': 'alias',
        'hash': 'hash',
        'terms_of_service': 'termsOfService',
        'terms_of_service_date': 'termsOfServiceDate',
        'site_key': 'siteKey',
        'post_count': 'postCount',
        'date_of_birth': 'dateOfBirth',
        'can_contact': 'canContact',
        'registered_date': 'registeredDate',
        'hide_sigs': 'hideSigs',
        'thumbs_up': 'thumbsUp',
        'thumbs_down': 'thumbsDown',
        'star_filter': 'starFilter',
        'avatar': 'avatar',
        'avatar_key': 'avatarKey',
        'last_trial_date': 'lastTrialDate',
        'follow_filter': 'followFilter',
        'author': 'author',
        'title': 'title',
        'points': 'points',
        'status': 'status',
        'zip_code_key': 'zipCodeKey',
        'show_name': 'showName',
        'private_message_setting': 'privateMessageSetting',
        'member_badge_selected': 'memberBadgeSelected',
        'achievement_badge_selected': 'achievementBadgeSelected',
        'merge_status': 'mergeStatus',
        'serial': 'serial',
        'twitter_user_key': 'twitterUserKey',
        'reference_key': 'referenceKey',
        'affiliation_key': 'affiliationKey',
        'all_access_vip': 'allAccessVip',
        'role_group': 'roleGroup',
        'ip': 'ip',
        'spam_confidence': 'spamConfidence',
        'login_type': 'loginType',
        'contributor_type': 'contributorType',
        'base_post_count': 'basePostCount',
        'sportsline_eligible': 'sportslineEligible',
        'sportsline_email': 'sportslineEmail',
        'score_strip_preference': 'scoreStripPreference',
        'last_login_date': 'lastLoginDate',
        'archived_post_count': 'archivedPostCount',
        'archived_thumbs_up': 'archivedThumbsUp',
        'archived_thumbs_down': 'archivedThumbsDown',
        'password': 'password',
        'password_iv': 'passwordIV',
        'password_algorithm': 'passwordAlgorithm',
        'password_salt': 'passwordSalt',
        'password_hash': 'passwordHash',
        'extended_user': 'extendedUser',
        'site': 'site',
        'affiliation': 'affiliation',
        'last_password_update_date': 'lastPasswordUpdateDate',
        'affiliations': 'affiliations',
        'coupon_codes': 'couponCodes',
        'members': 'members',
        'private_message_users': 'privateMessageUsers',
        'session_hashes': 'sessionHashes',
        'user_notes': 'userNotes',
        'admin_user_notes': 'adminUserNotes',
        'ip_bans': 'ipBans',
        'resets': 'resets',
        'user_roles': 'userRoles',
        'user_subscriptions': 'userSubscriptions',
        'user_transactions': 'userTransactions',
        'admin_user_transactions': 'adminUserTransactions',
        'user_ignores': 'userIgnores',
        'user_ignored_bys': 'userIgnoredBys',
        'user_follow_boards': 'userFollowBoards',
        'media_bans': 'mediaBans',
        'admin_media_bans': 'adminMediaBans',
        'write_bans': 'writeBans',
        'admin_write_bans': 'adminWriteBans',
        'posts': 'posts',
        'post_votes': 'postVotes',
        'scout_users': 'scoutUsers',
        'alerts': 'alerts',
        'contact': 'contact',
        'user_accounts': 'userAccounts',
        'deleted_contents': 'deletedContents',
        'deleted_replies': 'deletedReplies',
        'writer_goal_site_writers': 'writerGoalSiteWriters',
        'member': 'member'
    }

    def __init__(self, key=None, first_name=None, last_name=None, email=None, alias=None, hash=None, terms_of_service=None, terms_of_service_date=None, site_key=None, post_count=None, date_of_birth=None, can_contact=None, registered_date=None, hide_sigs=None, thumbs_up=None, thumbs_down=None, star_filter=None, avatar=None, avatar_key=None, last_trial_date=None, follow_filter=None, author=None, title=None, points=None, status=None, zip_code_key=None, show_name=None, private_message_setting=None, member_badge_selected=None, achievement_badge_selected=None, merge_status=None, serial=None, twitter_user_key=None, reference_key=None, affiliation_key=None, all_access_vip=None, role_group=None, ip=None, spam_confidence=None, login_type=None, contributor_type=None, base_post_count=None, sportsline_eligible=None, sportsline_email=None, score_strip_preference=None, last_login_date=None, archived_post_count=None, archived_thumbs_up=None, archived_thumbs_down=None, password=None, password_iv=None, password_algorithm=None, password_salt=None, password_hash=None, extended_user=None, site=None, affiliation=None, last_password_update_date=None, affiliations=None, coupon_codes=None, members=None, private_message_users=None, session_hashes=None, user_notes=None, admin_user_notes=None, ip_bans=None, resets=None, user_roles=None, user_subscriptions=None, user_transactions=None, admin_user_transactions=None, user_ignores=None, user_ignored_bys=None, user_follow_boards=None, media_bans=None, admin_media_bans=None, write_bans=None, admin_write_bans=None, posts=None, post_votes=None, scout_users=None, alerts=None, contact=None, user_accounts=None, deleted_contents=None, deleted_replies=None, writer_goal_site_writers=None, member=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._alias = None
        self._hash = None
        self._terms_of_service = None
        self._terms_of_service_date = None
        self._site_key = None
        self._post_count = None
        self._date_of_birth = None
        self._can_contact = None
        self._registered_date = None
        self._hide_sigs = None
        self._thumbs_up = None
        self._thumbs_down = None
        self._star_filter = None
        self._avatar = None
        self._avatar_key = None
        self._last_trial_date = None
        self._follow_filter = None
        self._author = None
        self._title = None
        self._points = None
        self._status = None
        self._zip_code_key = None
        self._show_name = None
        self._private_message_setting = None
        self._member_badge_selected = None
        self._achievement_badge_selected = None
        self._merge_status = None
        self._serial = None
        self._twitter_user_key = None
        self._reference_key = None
        self._affiliation_key = None
        self._all_access_vip = None
        self._role_group = None
        self._ip = None
        self._spam_confidence = None
        self._login_type = None
        self._contributor_type = None
        self._base_post_count = None
        self._sportsline_eligible = None
        self._sportsline_email = None
        self._score_strip_preference = None
        self._last_login_date = None
        self._archived_post_count = None
        self._archived_thumbs_up = None
        self._archived_thumbs_down = None
        self._password = None
        self._password_iv = None
        self._password_algorithm = None
        self._password_salt = None
        self._password_hash = None
        self._extended_user = None
        self._site = None
        self._affiliation = None
        self._last_password_update_date = None
        self._affiliations = None
        self._coupon_codes = None
        self._members = None
        self._private_message_users = None
        self._session_hashes = None
        self._user_notes = None
        self._admin_user_notes = None
        self._ip_bans = None
        self._resets = None
        self._user_roles = None
        self._user_subscriptions = None
        self._user_transactions = None
        self._admin_user_transactions = None
        self._user_ignores = None
        self._user_ignored_bys = None
        self._user_follow_boards = None
        self._media_bans = None
        self._admin_media_bans = None
        self._write_bans = None
        self._admin_write_bans = None
        self._posts = None
        self._post_votes = None
        self._scout_users = None
        self._alerts = None
        self._contact = None
        self._user_accounts = None
        self._deleted_contents = None
        self._deleted_replies = None
        self._writer_goal_site_writers = None
        self._member = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if alias is not None:
            self.alias = alias
        if hash is not None:
            self.hash = hash
        if terms_of_service is not None:
            self.terms_of_service = terms_of_service
        if terms_of_service_date is not None:
            self.terms_of_service_date = terms_of_service_date
        if site_key is not None:
            self.site_key = site_key
        if post_count is not None:
            self.post_count = post_count
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if can_contact is not None:
            self.can_contact = can_contact
        if registered_date is not None:
            self.registered_date = registered_date
        if hide_sigs is not None:
            self.hide_sigs = hide_sigs
        if thumbs_up is not None:
            self.thumbs_up = thumbs_up
        if thumbs_down is not None:
            self.thumbs_down = thumbs_down
        if star_filter is not None:
            self.star_filter = star_filter
        if avatar is not None:
            self.avatar = avatar
        if avatar_key is not None:
            self.avatar_key = avatar_key
        if last_trial_date is not None:
            self.last_trial_date = last_trial_date
        if follow_filter is not None:
            self.follow_filter = follow_filter
        if author is not None:
            self.author = author
        if title is not None:
            self.title = title
        self.points = points
        if status is not None:
            self.status = status
        if zip_code_key is not None:
            self.zip_code_key = zip_code_key
        self.show_name = show_name
        if private_message_setting is not None:
            self.private_message_setting = private_message_setting
        if member_badge_selected is not None:
            self.member_badge_selected = member_badge_selected
        if achievement_badge_selected is not None:
            self.achievement_badge_selected = achievement_badge_selected
        if merge_status is not None:
            self.merge_status = merge_status
        if serial is not None:
            self.serial = serial
        if twitter_user_key is not None:
            self.twitter_user_key = twitter_user_key
        if reference_key is not None:
            self.reference_key = reference_key
        if affiliation_key is not None:
            self.affiliation_key = affiliation_key
        if all_access_vip is not None:
            self.all_access_vip = all_access_vip
        if role_group is not None:
            self.role_group = role_group
        if ip is not None:
            self.ip = ip
        if spam_confidence is not None:
            self.spam_confidence = spam_confidence
        if login_type is not None:
            self.login_type = login_type
        if contributor_type is not None:
            self.contributor_type = contributor_type
        if base_post_count is not None:
            self.base_post_count = base_post_count
        if sportsline_eligible is not None:
            self.sportsline_eligible = sportsline_eligible
        if sportsline_email is not None:
            self.sportsline_email = sportsline_email
        if score_strip_preference is not None:
            self.score_strip_preference = score_strip_preference
        if last_login_date is not None:
            self.last_login_date = last_login_date
        if archived_post_count is not None:
            self.archived_post_count = archived_post_count
        if archived_thumbs_up is not None:
            self.archived_thumbs_up = archived_thumbs_up
        if archived_thumbs_down is not None:
            self.archived_thumbs_down = archived_thumbs_down
        if password is not None:
            self.password = password
        if password_iv is not None:
            self.password_iv = password_iv
        if password_algorithm is not None:
            self.password_algorithm = password_algorithm
        if password_salt is not None:
            self.password_salt = password_salt
        if password_hash is not None:
            self.password_hash = password_hash
        if extended_user is not None:
            self.extended_user = extended_user
        if site is not None:
            self.site = site
        if affiliation is not None:
            self.affiliation = affiliation
        if last_password_update_date is not None:
            self.last_password_update_date = last_password_update_date
        if affiliations is not None:
            self.affiliations = affiliations
        if coupon_codes is not None:
            self.coupon_codes = coupon_codes
        if members is not None:
            self.members = members
        if private_message_users is not None:
            self.private_message_users = private_message_users
        if session_hashes is not None:
            self.session_hashes = session_hashes
        if user_notes is not None:
            self.user_notes = user_notes
        if admin_user_notes is not None:
            self.admin_user_notes = admin_user_notes
        if ip_bans is not None:
            self.ip_bans = ip_bans
        if resets is not None:
            self.resets = resets
        if user_roles is not None:
            self.user_roles = user_roles
        if user_subscriptions is not None:
            self.user_subscriptions = user_subscriptions
        if user_transactions is not None:
            self.user_transactions = user_transactions
        if admin_user_transactions is not None:
            self.admin_user_transactions = admin_user_transactions
        if user_ignores is not None:
            self.user_ignores = user_ignores
        if user_ignored_bys is not None:
            self.user_ignored_bys = user_ignored_bys
        if user_follow_boards is not None:
            self.user_follow_boards = user_follow_boards
        if media_bans is not None:
            self.media_bans = media_bans
        if admin_media_bans is not None:
            self.admin_media_bans = admin_media_bans
        if write_bans is not None:
            self.write_bans = write_bans
        if admin_write_bans is not None:
            self.admin_write_bans = admin_write_bans
        if posts is not None:
            self.posts = posts
        if post_votes is not None:
            self.post_votes = post_votes
        if scout_users is not None:
            self.scout_users = scout_users
        if alerts is not None:
            self.alerts = alerts
        if contact is not None:
            self.contact = contact
        if user_accounts is not None:
            self.user_accounts = user_accounts
        if deleted_contents is not None:
            self.deleted_contents = deleted_contents
        if deleted_replies is not None:
            self.deleted_replies = deleted_replies
        if writer_goal_site_writers is not None:
            self.writer_goal_site_writers = writer_goal_site_writers
        if member is not None:
            self.member = member

    @property
    def key(self):
        """Gets the key of this User.  # noqa: E501


        :return: The key of this User.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this User.


        :param key: The key of this User.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def alias(self):
        """Gets the alias of this User.  # noqa: E501


        :return: The alias of this User.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this User.


        :param alias: The alias of this User.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def hash(self):
        """Gets the hash of this User.  # noqa: E501


        :return: The hash of this User.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this User.


        :param hash: The hash of this User.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this User.  # noqa: E501


        :return: The terms_of_service of this User.  # noqa: E501
        :rtype: bool
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this User.


        :param terms_of_service: The terms_of_service of this User.  # noqa: E501
        :type: bool
        """

        self._terms_of_service = terms_of_service

    @property
    def terms_of_service_date(self):
        """Gets the terms_of_service_date of this User.  # noqa: E501


        :return: The terms_of_service_date of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._terms_of_service_date

    @terms_of_service_date.setter
    def terms_of_service_date(self, terms_of_service_date):
        """Sets the terms_of_service_date of this User.


        :param terms_of_service_date: The terms_of_service_date of this User.  # noqa: E501
        :type: datetime
        """

        self._terms_of_service_date = terms_of_service_date

    @property
    def site_key(self):
        """Gets the site_key of this User.  # noqa: E501


        :return: The site_key of this User.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this User.


        :param site_key: The site_key of this User.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def post_count(self):
        """Gets the post_count of this User.  # noqa: E501


        :return: The post_count of this User.  # noqa: E501
        :rtype: int
        """
        return self._post_count

    @post_count.setter
    def post_count(self, post_count):
        """Sets the post_count of this User.


        :param post_count: The post_count of this User.  # noqa: E501
        :type: int
        """

        self._post_count = post_count

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this User.  # noqa: E501


        :return: The date_of_birth of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this User.


        :param date_of_birth: The date_of_birth of this User.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def can_contact(self):
        """Gets the can_contact of this User.  # noqa: E501


        :return: The can_contact of this User.  # noqa: E501
        :rtype: bool
        """
        return self._can_contact

    @can_contact.setter
    def can_contact(self, can_contact):
        """Sets the can_contact of this User.


        :param can_contact: The can_contact of this User.  # noqa: E501
        :type: bool
        """

        self._can_contact = can_contact

    @property
    def registered_date(self):
        """Gets the registered_date of this User.  # noqa: E501


        :return: The registered_date of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._registered_date

    @registered_date.setter
    def registered_date(self, registered_date):
        """Sets the registered_date of this User.


        :param registered_date: The registered_date of this User.  # noqa: E501
        :type: datetime
        """

        self._registered_date = registered_date

    @property
    def hide_sigs(self):
        """Gets the hide_sigs of this User.  # noqa: E501


        :return: The hide_sigs of this User.  # noqa: E501
        :rtype: int
        """
        return self._hide_sigs

    @hide_sigs.setter
    def hide_sigs(self, hide_sigs):
        """Sets the hide_sigs of this User.


        :param hide_sigs: The hide_sigs of this User.  # noqa: E501
        :type: int
        """

        self._hide_sigs = hide_sigs

    @property
    def thumbs_up(self):
        """Gets the thumbs_up of this User.  # noqa: E501


        :return: The thumbs_up of this User.  # noqa: E501
        :rtype: int
        """
        return self._thumbs_up

    @thumbs_up.setter
    def thumbs_up(self, thumbs_up):
        """Sets the thumbs_up of this User.


        :param thumbs_up: The thumbs_up of this User.  # noqa: E501
        :type: int
        """

        self._thumbs_up = thumbs_up

    @property
    def thumbs_down(self):
        """Gets the thumbs_down of this User.  # noqa: E501


        :return: The thumbs_down of this User.  # noqa: E501
        :rtype: int
        """
        return self._thumbs_down

    @thumbs_down.setter
    def thumbs_down(self, thumbs_down):
        """Sets the thumbs_down of this User.


        :param thumbs_down: The thumbs_down of this User.  # noqa: E501
        :type: int
        """

        self._thumbs_down = thumbs_down

    @property
    def star_filter(self):
        """Gets the star_filter of this User.  # noqa: E501


        :return: The star_filter of this User.  # noqa: E501
        :rtype: int
        """
        return self._star_filter

    @star_filter.setter
    def star_filter(self, star_filter):
        """Sets the star_filter of this User.


        :param star_filter: The star_filter of this User.  # noqa: E501
        :type: int
        """

        self._star_filter = star_filter

    @property
    def avatar(self):
        """Gets the avatar of this User.  # noqa: E501


        :return: The avatar of this User.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this User.


        :param avatar: The avatar of this User.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def avatar_key(self):
        """Gets the avatar_key of this User.  # noqa: E501


        :return: The avatar_key of this User.  # noqa: E501
        :rtype: int
        """
        return self._avatar_key

    @avatar_key.setter
    def avatar_key(self, avatar_key):
        """Sets the avatar_key of this User.


        :param avatar_key: The avatar_key of this User.  # noqa: E501
        :type: int
        """

        self._avatar_key = avatar_key

    @property
    def last_trial_date(self):
        """Gets the last_trial_date of this User.  # noqa: E501


        :return: The last_trial_date of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_trial_date

    @last_trial_date.setter
    def last_trial_date(self, last_trial_date):
        """Sets the last_trial_date of this User.


        :param last_trial_date: The last_trial_date of this User.  # noqa: E501
        :type: datetime
        """

        self._last_trial_date = last_trial_date

    @property
    def follow_filter(self):
        """Gets the follow_filter of this User.  # noqa: E501


        :return: The follow_filter of this User.  # noqa: E501
        :rtype: int
        """
        return self._follow_filter

    @follow_filter.setter
    def follow_filter(self, follow_filter):
        """Sets the follow_filter of this User.


        :param follow_filter: The follow_filter of this User.  # noqa: E501
        :type: int
        """

        self._follow_filter = follow_filter

    @property
    def author(self):
        """Gets the author of this User.  # noqa: E501


        :return: The author of this User.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this User.


        :param author: The author of this User.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def title(self):
        """Gets the title of this User.  # noqa: E501


        :return: The title of this User.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this User.


        :param title: The title of this User.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def points(self):
        """Gets the points of this User.  # noqa: E501


        :return: The points of this User.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this User.


        :param points: The points of this User.  # noqa: E501
        :type: int
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501


        :return: The status of this User.  # noqa: E501
        :rtype: UserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.


        :param status: The status of this User.  # noqa: E501
        :type: UserStatus
        """

        self._status = status

    @property
    def zip_code_key(self):
        """Gets the zip_code_key of this User.  # noqa: E501


        :return: The zip_code_key of this User.  # noqa: E501
        :rtype: int
        """
        return self._zip_code_key

    @zip_code_key.setter
    def zip_code_key(self, zip_code_key):
        """Sets the zip_code_key of this User.


        :param zip_code_key: The zip_code_key of this User.  # noqa: E501
        :type: int
        """

        self._zip_code_key = zip_code_key

    @property
    def show_name(self):
        """Gets the show_name of this User.  # noqa: E501


        :return: The show_name of this User.  # noqa: E501
        :rtype: bool
        """
        return self._show_name

    @show_name.setter
    def show_name(self, show_name):
        """Sets the show_name of this User.


        :param show_name: The show_name of this User.  # noqa: E501
        :type: bool
        """
        if show_name is None:
            raise ValueError("Invalid value for `show_name`, must not be `None`")  # noqa: E501

        self._show_name = show_name

    @property
    def private_message_setting(self):
        """Gets the private_message_setting of this User.  # noqa: E501


        :return: The private_message_setting of this User.  # noqa: E501
        :rtype: PrivateMessageSettingType
        """
        return self._private_message_setting

    @private_message_setting.setter
    def private_message_setting(self, private_message_setting):
        """Sets the private_message_setting of this User.


        :param private_message_setting: The private_message_setting of this User.  # noqa: E501
        :type: PrivateMessageSettingType
        """

        self._private_message_setting = private_message_setting

    @property
    def member_badge_selected(self):
        """Gets the member_badge_selected of this User.  # noqa: E501


        :return: The member_badge_selected of this User.  # noqa: E501
        :rtype: int
        """
        return self._member_badge_selected

    @member_badge_selected.setter
    def member_badge_selected(self, member_badge_selected):
        """Sets the member_badge_selected of this User.


        :param member_badge_selected: The member_badge_selected of this User.  # noqa: E501
        :type: int
        """

        self._member_badge_selected = member_badge_selected

    @property
    def achievement_badge_selected(self):
        """Gets the achievement_badge_selected of this User.  # noqa: E501


        :return: The achievement_badge_selected of this User.  # noqa: E501
        :rtype: int
        """
        return self._achievement_badge_selected

    @achievement_badge_selected.setter
    def achievement_badge_selected(self, achievement_badge_selected):
        """Sets the achievement_badge_selected of this User.


        :param achievement_badge_selected: The achievement_badge_selected of this User.  # noqa: E501
        :type: int
        """

        self._achievement_badge_selected = achievement_badge_selected

    @property
    def merge_status(self):
        """Gets the merge_status of this User.  # noqa: E501


        :return: The merge_status of this User.  # noqa: E501
        :rtype: MergeStatuses
        """
        return self._merge_status

    @merge_status.setter
    def merge_status(self, merge_status):
        """Sets the merge_status of this User.


        :param merge_status: The merge_status of this User.  # noqa: E501
        :type: MergeStatuses
        """

        self._merge_status = merge_status

    @property
    def serial(self):
        """Gets the serial of this User.  # noqa: E501


        :return: The serial of this User.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this User.


        :param serial: The serial of this User.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def twitter_user_key(self):
        """Gets the twitter_user_key of this User.  # noqa: E501


        :return: The twitter_user_key of this User.  # noqa: E501
        :rtype: int
        """
        return self._twitter_user_key

    @twitter_user_key.setter
    def twitter_user_key(self, twitter_user_key):
        """Sets the twitter_user_key of this User.


        :param twitter_user_key: The twitter_user_key of this User.  # noqa: E501
        :type: int
        """

        self._twitter_user_key = twitter_user_key

    @property
    def reference_key(self):
        """Gets the reference_key of this User.  # noqa: E501


        :return: The reference_key of this User.  # noqa: E501
        :rtype: int
        """
        return self._reference_key

    @reference_key.setter
    def reference_key(self, reference_key):
        """Sets the reference_key of this User.


        :param reference_key: The reference_key of this User.  # noqa: E501
        :type: int
        """

        self._reference_key = reference_key

    @property
    def affiliation_key(self):
        """Gets the affiliation_key of this User.  # noqa: E501


        :return: The affiliation_key of this User.  # noqa: E501
        :rtype: int
        """
        return self._affiliation_key

    @affiliation_key.setter
    def affiliation_key(self, affiliation_key):
        """Sets the affiliation_key of this User.


        :param affiliation_key: The affiliation_key of this User.  # noqa: E501
        :type: int
        """

        self._affiliation_key = affiliation_key

    @property
    def all_access_vip(self):
        """Gets the all_access_vip of this User.  # noqa: E501


        :return: The all_access_vip of this User.  # noqa: E501
        :rtype: AllAccessVIPType
        """
        return self._all_access_vip

    @all_access_vip.setter
    def all_access_vip(self, all_access_vip):
        """Sets the all_access_vip of this User.


        :param all_access_vip: The all_access_vip of this User.  # noqa: E501
        :type: AllAccessVIPType
        """

        self._all_access_vip = all_access_vip

    @property
    def role_group(self):
        """Gets the role_group of this User.  # noqa: E501


        :return: The role_group of this User.  # noqa: E501
        :rtype: RoleGroup
        """
        return self._role_group

    @role_group.setter
    def role_group(self, role_group):
        """Sets the role_group of this User.


        :param role_group: The role_group of this User.  # noqa: E501
        :type: RoleGroup
        """

        self._role_group = role_group

    @property
    def ip(self):
        """Gets the ip of this User.  # noqa: E501


        :return: The ip of this User.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this User.


        :param ip: The ip of this User.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def spam_confidence(self):
        """Gets the spam_confidence of this User.  # noqa: E501


        :return: The spam_confidence of this User.  # noqa: E501
        :rtype: float
        """
        return self._spam_confidence

    @spam_confidence.setter
    def spam_confidence(self, spam_confidence):
        """Sets the spam_confidence of this User.


        :param spam_confidence: The spam_confidence of this User.  # noqa: E501
        :type: float
        """

        self._spam_confidence = spam_confidence

    @property
    def login_type(self):
        """Gets the login_type of this User.  # noqa: E501


        :return: The login_type of this User.  # noqa: E501
        :rtype: LoginType
        """
        return self._login_type

    @login_type.setter
    def login_type(self, login_type):
        """Sets the login_type of this User.


        :param login_type: The login_type of this User.  # noqa: E501
        :type: LoginType
        """

        self._login_type = login_type

    @property
    def contributor_type(self):
        """Gets the contributor_type of this User.  # noqa: E501


        :return: The contributor_type of this User.  # noqa: E501
        :rtype: ContributorType
        """
        return self._contributor_type

    @contributor_type.setter
    def contributor_type(self, contributor_type):
        """Sets the contributor_type of this User.


        :param contributor_type: The contributor_type of this User.  # noqa: E501
        :type: ContributorType
        """

        self._contributor_type = contributor_type

    @property
    def base_post_count(self):
        """Gets the base_post_count of this User.  # noqa: E501


        :return: The base_post_count of this User.  # noqa: E501
        :rtype: int
        """
        return self._base_post_count

    @base_post_count.setter
    def base_post_count(self, base_post_count):
        """Sets the base_post_count of this User.


        :param base_post_count: The base_post_count of this User.  # noqa: E501
        :type: int
        """

        self._base_post_count = base_post_count

    @property
    def sportsline_eligible(self):
        """Gets the sportsline_eligible of this User.  # noqa: E501


        :return: The sportsline_eligible of this User.  # noqa: E501
        :rtype: bool
        """
        return self._sportsline_eligible

    @sportsline_eligible.setter
    def sportsline_eligible(self, sportsline_eligible):
        """Sets the sportsline_eligible of this User.


        :param sportsline_eligible: The sportsline_eligible of this User.  # noqa: E501
        :type: bool
        """

        self._sportsline_eligible = sportsline_eligible

    @property
    def sportsline_email(self):
        """Gets the sportsline_email of this User.  # noqa: E501


        :return: The sportsline_email of this User.  # noqa: E501
        :rtype: str
        """
        return self._sportsline_email

    @sportsline_email.setter
    def sportsline_email(self, sportsline_email):
        """Sets the sportsline_email of this User.


        :param sportsline_email: The sportsline_email of this User.  # noqa: E501
        :type: str
        """

        self._sportsline_email = sportsline_email

    @property
    def score_strip_preference(self):
        """Gets the score_strip_preference of this User.  # noqa: E501


        :return: The score_strip_preference of this User.  # noqa: E501
        :rtype: ScoreStripPreference
        """
        return self._score_strip_preference

    @score_strip_preference.setter
    def score_strip_preference(self, score_strip_preference):
        """Sets the score_strip_preference of this User.


        :param score_strip_preference: The score_strip_preference of this User.  # noqa: E501
        :type: ScoreStripPreference
        """

        self._score_strip_preference = score_strip_preference

    @property
    def last_login_date(self):
        """Gets the last_login_date of this User.  # noqa: E501


        :return: The last_login_date of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_date

    @last_login_date.setter
    def last_login_date(self, last_login_date):
        """Sets the last_login_date of this User.


        :param last_login_date: The last_login_date of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login_date = last_login_date

    @property
    def archived_post_count(self):
        """Gets the archived_post_count of this User.  # noqa: E501


        :return: The archived_post_count of this User.  # noqa: E501
        :rtype: int
        """
        return self._archived_post_count

    @archived_post_count.setter
    def archived_post_count(self, archived_post_count):
        """Sets the archived_post_count of this User.


        :param archived_post_count: The archived_post_count of this User.  # noqa: E501
        :type: int
        """

        self._archived_post_count = archived_post_count

    @property
    def archived_thumbs_up(self):
        """Gets the archived_thumbs_up of this User.  # noqa: E501


        :return: The archived_thumbs_up of this User.  # noqa: E501
        :rtype: int
        """
        return self._archived_thumbs_up

    @archived_thumbs_up.setter
    def archived_thumbs_up(self, archived_thumbs_up):
        """Sets the archived_thumbs_up of this User.


        :param archived_thumbs_up: The archived_thumbs_up of this User.  # noqa: E501
        :type: int
        """

        self._archived_thumbs_up = archived_thumbs_up

    @property
    def archived_thumbs_down(self):
        """Gets the archived_thumbs_down of this User.  # noqa: E501


        :return: The archived_thumbs_down of this User.  # noqa: E501
        :rtype: int
        """
        return self._archived_thumbs_down

    @archived_thumbs_down.setter
    def archived_thumbs_down(self, archived_thumbs_down):
        """Sets the archived_thumbs_down of this User.


        :param archived_thumbs_down: The archived_thumbs_down of this User.  # noqa: E501
        :type: int
        """

        self._archived_thumbs_down = archived_thumbs_down

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_iv(self):
        """Gets the password_iv of this User.  # noqa: E501


        :return: The password_iv of this User.  # noqa: E501
        :rtype: str
        """
        return self._password_iv

    @password_iv.setter
    def password_iv(self, password_iv):
        """Sets the password_iv of this User.


        :param password_iv: The password_iv of this User.  # noqa: E501
        :type: str
        """

        self._password_iv = password_iv

    @property
    def password_algorithm(self):
        """Gets the password_algorithm of this User.  # noqa: E501


        :return: The password_algorithm of this User.  # noqa: E501
        :rtype: PasswordEncryptionMethod
        """
        return self._password_algorithm

    @password_algorithm.setter
    def password_algorithm(self, password_algorithm):
        """Sets the password_algorithm of this User.


        :param password_algorithm: The password_algorithm of this User.  # noqa: E501
        :type: PasswordEncryptionMethod
        """

        self._password_algorithm = password_algorithm

    @property
    def password_salt(self):
        """Gets the password_salt of this User.  # noqa: E501


        :return: The password_salt of this User.  # noqa: E501
        :rtype: str
        """
        return self._password_salt

    @password_salt.setter
    def password_salt(self, password_salt):
        """Sets the password_salt of this User.


        :param password_salt: The password_salt of this User.  # noqa: E501
        :type: str
        """

        self._password_salt = password_salt

    @property
    def password_hash(self):
        """Gets the password_hash of this User.  # noqa: E501


        :return: The password_hash of this User.  # noqa: E501
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this User.


        :param password_hash: The password_hash of this User.  # noqa: E501
        :type: str
        """

        self._password_hash = password_hash

    @property
    def extended_user(self):
        """Gets the extended_user of this User.  # noqa: E501


        :return: The extended_user of this User.  # noqa: E501
        :rtype: ExtendedUser
        """
        return self._extended_user

    @extended_user.setter
    def extended_user(self, extended_user):
        """Sets the extended_user of this User.


        :param extended_user: The extended_user of this User.  # noqa: E501
        :type: ExtendedUser
        """

        self._extended_user = extended_user

    @property
    def site(self):
        """Gets the site of this User.  # noqa: E501


        :return: The site of this User.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this User.


        :param site: The site of this User.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def affiliation(self):
        """Gets the affiliation of this User.  # noqa: E501


        :return: The affiliation of this User.  # noqa: E501
        :rtype: Affiliation
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this User.


        :param affiliation: The affiliation of this User.  # noqa: E501
        :type: Affiliation
        """

        self._affiliation = affiliation

    @property
    def last_password_update_date(self):
        """Gets the last_password_update_date of this User.  # noqa: E501


        :return: The last_password_update_date of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_password_update_date

    @last_password_update_date.setter
    def last_password_update_date(self, last_password_update_date):
        """Sets the last_password_update_date of this User.


        :param last_password_update_date: The last_password_update_date of this User.  # noqa: E501
        :type: str
        """

        self._last_password_update_date = last_password_update_date

    @property
    def affiliations(self):
        """Gets the affiliations of this User.  # noqa: E501


        :return: The affiliations of this User.  # noqa: E501
        :rtype: list[UserAffiliation]
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """Sets the affiliations of this User.


        :param affiliations: The affiliations of this User.  # noqa: E501
        :type: list[UserAffiliation]
        """

        self._affiliations = affiliations

    @property
    def coupon_codes(self):
        """Gets the coupon_codes of this User.  # noqa: E501


        :return: The coupon_codes of this User.  # noqa: E501
        :rtype: list[CouponCode]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """Sets the coupon_codes of this User.


        :param coupon_codes: The coupon_codes of this User.  # noqa: E501
        :type: list[CouponCode]
        """

        self._coupon_codes = coupon_codes

    @property
    def members(self):
        """Gets the members of this User.  # noqa: E501


        :return: The members of this User.  # noqa: E501
        :rtype: list[Member]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this User.


        :param members: The members of this User.  # noqa: E501
        :type: list[Member]
        """

        self._members = members

    @property
    def private_message_users(self):
        """Gets the private_message_users of this User.  # noqa: E501


        :return: The private_message_users of this User.  # noqa: E501
        :rtype: list[PrivateMessageUser]
        """
        return self._private_message_users

    @private_message_users.setter
    def private_message_users(self, private_message_users):
        """Sets the private_message_users of this User.


        :param private_message_users: The private_message_users of this User.  # noqa: E501
        :type: list[PrivateMessageUser]
        """

        self._private_message_users = private_message_users

    @property
    def session_hashes(self):
        """Gets the session_hashes of this User.  # noqa: E501


        :return: The session_hashes of this User.  # noqa: E501
        :rtype: list[SessionHash]
        """
        return self._session_hashes

    @session_hashes.setter
    def session_hashes(self, session_hashes):
        """Sets the session_hashes of this User.


        :param session_hashes: The session_hashes of this User.  # noqa: E501
        :type: list[SessionHash]
        """

        self._session_hashes = session_hashes

    @property
    def user_notes(self):
        """Gets the user_notes of this User.  # noqa: E501


        :return: The user_notes of this User.  # noqa: E501
        :rtype: list[UserNote]
        """
        return self._user_notes

    @user_notes.setter
    def user_notes(self, user_notes):
        """Sets the user_notes of this User.


        :param user_notes: The user_notes of this User.  # noqa: E501
        :type: list[UserNote]
        """

        self._user_notes = user_notes

    @property
    def admin_user_notes(self):
        """Gets the admin_user_notes of this User.  # noqa: E501


        :return: The admin_user_notes of this User.  # noqa: E501
        :rtype: list[UserNote]
        """
        return self._admin_user_notes

    @admin_user_notes.setter
    def admin_user_notes(self, admin_user_notes):
        """Sets the admin_user_notes of this User.


        :param admin_user_notes: The admin_user_notes of this User.  # noqa: E501
        :type: list[UserNote]
        """

        self._admin_user_notes = admin_user_notes

    @property
    def ip_bans(self):
        """Gets the ip_bans of this User.  # noqa: E501


        :return: The ip_bans of this User.  # noqa: E501
        :rtype: list[IpBan]
        """
        return self._ip_bans

    @ip_bans.setter
    def ip_bans(self, ip_bans):
        """Sets the ip_bans of this User.


        :param ip_bans: The ip_bans of this User.  # noqa: E501
        :type: list[IpBan]
        """

        self._ip_bans = ip_bans

    @property
    def resets(self):
        """Gets the resets of this User.  # noqa: E501


        :return: The resets of this User.  # noqa: E501
        :rtype: list[UserReset]
        """
        return self._resets

    @resets.setter
    def resets(self, resets):
        """Sets the resets of this User.


        :param resets: The resets of this User.  # noqa: E501
        :type: list[UserReset]
        """

        self._resets = resets

    @property
    def user_roles(self):
        """Gets the user_roles of this User.  # noqa: E501


        :return: The user_roles of this User.  # noqa: E501
        :rtype: list[UserRole]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this User.


        :param user_roles: The user_roles of this User.  # noqa: E501
        :type: list[UserRole]
        """

        self._user_roles = user_roles

    @property
    def user_subscriptions(self):
        """Gets the user_subscriptions of this User.  # noqa: E501


        :return: The user_subscriptions of this User.  # noqa: E501
        :rtype: list[UserSubscription]
        """
        return self._user_subscriptions

    @user_subscriptions.setter
    def user_subscriptions(self, user_subscriptions):
        """Sets the user_subscriptions of this User.


        :param user_subscriptions: The user_subscriptions of this User.  # noqa: E501
        :type: list[UserSubscription]
        """

        self._user_subscriptions = user_subscriptions

    @property
    def user_transactions(self):
        """Gets the user_transactions of this User.  # noqa: E501


        :return: The user_transactions of this User.  # noqa: E501
        :rtype: list[UserTransaction]
        """
        return self._user_transactions

    @user_transactions.setter
    def user_transactions(self, user_transactions):
        """Sets the user_transactions of this User.


        :param user_transactions: The user_transactions of this User.  # noqa: E501
        :type: list[UserTransaction]
        """

        self._user_transactions = user_transactions

    @property
    def admin_user_transactions(self):
        """Gets the admin_user_transactions of this User.  # noqa: E501


        :return: The admin_user_transactions of this User.  # noqa: E501
        :rtype: list[UserTransaction]
        """
        return self._admin_user_transactions

    @admin_user_transactions.setter
    def admin_user_transactions(self, admin_user_transactions):
        """Sets the admin_user_transactions of this User.


        :param admin_user_transactions: The admin_user_transactions of this User.  # noqa: E501
        :type: list[UserTransaction]
        """

        self._admin_user_transactions = admin_user_transactions

    @property
    def user_ignores(self):
        """Gets the user_ignores of this User.  # noqa: E501


        :return: The user_ignores of this User.  # noqa: E501
        :rtype: list[UserIgnore]
        """
        return self._user_ignores

    @user_ignores.setter
    def user_ignores(self, user_ignores):
        """Sets the user_ignores of this User.


        :param user_ignores: The user_ignores of this User.  # noqa: E501
        :type: list[UserIgnore]
        """

        self._user_ignores = user_ignores

    @property
    def user_ignored_bys(self):
        """Gets the user_ignored_bys of this User.  # noqa: E501


        :return: The user_ignored_bys of this User.  # noqa: E501
        :rtype: list[UserIgnore]
        """
        return self._user_ignored_bys

    @user_ignored_bys.setter
    def user_ignored_bys(self, user_ignored_bys):
        """Sets the user_ignored_bys of this User.


        :param user_ignored_bys: The user_ignored_bys of this User.  # noqa: E501
        :type: list[UserIgnore]
        """

        self._user_ignored_bys = user_ignored_bys

    @property
    def user_follow_boards(self):
        """Gets the user_follow_boards of this User.  # noqa: E501


        :return: The user_follow_boards of this User.  # noqa: E501
        :rtype: list[UserFollowBoard]
        """
        return self._user_follow_boards

    @user_follow_boards.setter
    def user_follow_boards(self, user_follow_boards):
        """Sets the user_follow_boards of this User.


        :param user_follow_boards: The user_follow_boards of this User.  # noqa: E501
        :type: list[UserFollowBoard]
        """

        self._user_follow_boards = user_follow_boards

    @property
    def media_bans(self):
        """Gets the media_bans of this User.  # noqa: E501


        :return: The media_bans of this User.  # noqa: E501
        :rtype: list[UserBanMedia]
        """
        return self._media_bans

    @media_bans.setter
    def media_bans(self, media_bans):
        """Sets the media_bans of this User.


        :param media_bans: The media_bans of this User.  # noqa: E501
        :type: list[UserBanMedia]
        """

        self._media_bans = media_bans

    @property
    def admin_media_bans(self):
        """Gets the admin_media_bans of this User.  # noqa: E501


        :return: The admin_media_bans of this User.  # noqa: E501
        :rtype: list[UserBanMedia]
        """
        return self._admin_media_bans

    @admin_media_bans.setter
    def admin_media_bans(self, admin_media_bans):
        """Sets the admin_media_bans of this User.


        :param admin_media_bans: The admin_media_bans of this User.  # noqa: E501
        :type: list[UserBanMedia]
        """

        self._admin_media_bans = admin_media_bans

    @property
    def write_bans(self):
        """Gets the write_bans of this User.  # noqa: E501


        :return: The write_bans of this User.  # noqa: E501
        :rtype: list[UserBanWrite]
        """
        return self._write_bans

    @write_bans.setter
    def write_bans(self, write_bans):
        """Sets the write_bans of this User.


        :param write_bans: The write_bans of this User.  # noqa: E501
        :type: list[UserBanWrite]
        """

        self._write_bans = write_bans

    @property
    def admin_write_bans(self):
        """Gets the admin_write_bans of this User.  # noqa: E501


        :return: The admin_write_bans of this User.  # noqa: E501
        :rtype: list[UserBanWrite]
        """
        return self._admin_write_bans

    @admin_write_bans.setter
    def admin_write_bans(self, admin_write_bans):
        """Sets the admin_write_bans of this User.


        :param admin_write_bans: The admin_write_bans of this User.  # noqa: E501
        :type: list[UserBanWrite]
        """

        self._admin_write_bans = admin_write_bans

    @property
    def posts(self):
        """Gets the posts of this User.  # noqa: E501


        :return: The posts of this User.  # noqa: E501
        :rtype: list[Post]
        """
        return self._posts

    @posts.setter
    def posts(self, posts):
        """Sets the posts of this User.


        :param posts: The posts of this User.  # noqa: E501
        :type: list[Post]
        """

        self._posts = posts

    @property
    def post_votes(self):
        """Gets the post_votes of this User.  # noqa: E501


        :return: The post_votes of this User.  # noqa: E501
        :rtype: list[PostVote]
        """
        return self._post_votes

    @post_votes.setter
    def post_votes(self, post_votes):
        """Sets the post_votes of this User.


        :param post_votes: The post_votes of this User.  # noqa: E501
        :type: list[PostVote]
        """

        self._post_votes = post_votes

    @property
    def scout_users(self):
        """Gets the scout_users of this User.  # noqa: E501


        :return: The scout_users of this User.  # noqa: E501
        :rtype: list[ScoutUser]
        """
        return self._scout_users

    @scout_users.setter
    def scout_users(self, scout_users):
        """Sets the scout_users of this User.


        :param scout_users: The scout_users of this User.  # noqa: E501
        :type: list[ScoutUser]
        """

        self._scout_users = scout_users

    @property
    def alerts(self):
        """Gets the alerts of this User.  # noqa: E501


        :return: The alerts of this User.  # noqa: E501
        :rtype: list[Alert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this User.


        :param alerts: The alerts of this User.  # noqa: E501
        :type: list[Alert]
        """

        self._alerts = alerts

    @property
    def contact(self):
        """Gets the contact of this User.  # noqa: E501


        :return: The contact of this User.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this User.


        :param contact: The contact of this User.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def user_accounts(self):
        """Gets the user_accounts of this User.  # noqa: E501


        :return: The user_accounts of this User.  # noqa: E501
        :rtype: list[UserAccount]
        """
        return self._user_accounts

    @user_accounts.setter
    def user_accounts(self, user_accounts):
        """Sets the user_accounts of this User.


        :param user_accounts: The user_accounts of this User.  # noqa: E501
        :type: list[UserAccount]
        """

        self._user_accounts = user_accounts

    @property
    def deleted_contents(self):
        """Gets the deleted_contents of this User.  # noqa: E501


        :return: The deleted_contents of this User.  # noqa: E501
        :rtype: list[DeletedContent]
        """
        return self._deleted_contents

    @deleted_contents.setter
    def deleted_contents(self, deleted_contents):
        """Sets the deleted_contents of this User.


        :param deleted_contents: The deleted_contents of this User.  # noqa: E501
        :type: list[DeletedContent]
        """

        self._deleted_contents = deleted_contents

    @property
    def deleted_replies(self):
        """Gets the deleted_replies of this User.  # noqa: E501


        :return: The deleted_replies of this User.  # noqa: E501
        :rtype: list[DeletedReply]
        """
        return self._deleted_replies

    @deleted_replies.setter
    def deleted_replies(self, deleted_replies):
        """Sets the deleted_replies of this User.


        :param deleted_replies: The deleted_replies of this User.  # noqa: E501
        :type: list[DeletedReply]
        """

        self._deleted_replies = deleted_replies

    @property
    def writer_goal_site_writers(self):
        """Gets the writer_goal_site_writers of this User.  # noqa: E501


        :return: The writer_goal_site_writers of this User.  # noqa: E501
        :rtype: list[WriterGoalSiteWriter]
        """
        return self._writer_goal_site_writers

    @writer_goal_site_writers.setter
    def writer_goal_site_writers(self, writer_goal_site_writers):
        """Sets the writer_goal_site_writers of this User.


        :param writer_goal_site_writers: The writer_goal_site_writers of this User.  # noqa: E501
        :type: list[WriterGoalSiteWriter]
        """

        self._writer_goal_site_writers = writer_goal_site_writers

    @property
    def member(self):
        """Gets the member of this User.  # noqa: E501


        :return: The member of this User.  # noqa: E501
        :rtype: Member
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this User.


        :param member: The member of this User.  # noqa: E501
        :type: Member
        """

        self._member = member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'user_key': 'int',
        'user_subscription_key': 'int',
        'subscription_key': 'int',
        '_date': 'datetime',
        'admin_user_key': 'int',
        'text': 'str',
        'follow_up': 'int',
        'report': 'int',
        'acknowledge': 'int',
        'user': 'User',
        'admin_user': 'User',
        'user_subscription': 'UserSubscription',
        'subscription': 'Subscription'
    }

    attribute_map = {
        'key': 'key',
        'user_key': 'userKey',
        'user_subscription_key': 'userSubscriptionKey',
        'subscription_key': 'subscriptionKey',
        '_date': 'date',
        'admin_user_key': 'adminUserKey',
        'text': 'text',
        'follow_up': 'followUp',
        'report': 'report',
        'acknowledge': 'acknowledge',
        'user': 'user',
        'admin_user': 'adminUser',
        'user_subscription': 'userSubscription',
        'subscription': 'subscription'
    }

    def __init__(self, key=None, user_key=None, user_subscription_key=None, subscription_key=None, _date=None, admin_user_key=None, text=None, follow_up=None, report=None, acknowledge=None, user=None, admin_user=None, user_subscription=None, subscription=None):  # noqa: E501
        """UserNote - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._user_key = None
        self._user_subscription_key = None
        self._subscription_key = None
        self.__date = None
        self._admin_user_key = None
        self._text = None
        self._follow_up = None
        self._report = None
        self._acknowledge = None
        self._user = None
        self._admin_user = None
        self._user_subscription = None
        self._subscription = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if user_key is not None:
            self.user_key = user_key
        if user_subscription_key is not None:
            self.user_subscription_key = user_subscription_key
        if subscription_key is not None:
            self.subscription_key = subscription_key
        if _date is not None:
            self._date = _date
        if admin_user_key is not None:
            self.admin_user_key = admin_user_key
        if text is not None:
            self.text = text
        if follow_up is not None:
            self.follow_up = follow_up
        if report is not None:
            self.report = report
        if acknowledge is not None:
            self.acknowledge = acknowledge
        if user is not None:
            self.user = user
        if admin_user is not None:
            self.admin_user = admin_user
        if user_subscription is not None:
            self.user_subscription = user_subscription
        if subscription is not None:
            self.subscription = subscription

    @property
    def key(self):
        """Gets the key of this UserNote.  # noqa: E501


        :return: The key of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UserNote.


        :param key: The key of this UserNote.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def user_key(self):
        """Gets the user_key of this UserNote.  # noqa: E501


        :return: The user_key of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this UserNote.


        :param user_key: The user_key of this UserNote.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def user_subscription_key(self):
        """Gets the user_subscription_key of this UserNote.  # noqa: E501


        :return: The user_subscription_key of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._user_subscription_key

    @user_subscription_key.setter
    def user_subscription_key(self, user_subscription_key):
        """Sets the user_subscription_key of this UserNote.


        :param user_subscription_key: The user_subscription_key of this UserNote.  # noqa: E501
        :type: int
        """

        self._user_subscription_key = user_subscription_key

    @property
    def subscription_key(self):
        """Gets the subscription_key of this UserNote.  # noqa: E501


        :return: The subscription_key of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._subscription_key

    @subscription_key.setter
    def subscription_key(self, subscription_key):
        """Sets the subscription_key of this UserNote.


        :param subscription_key: The subscription_key of this UserNote.  # noqa: E501
        :type: int
        """

        self._subscription_key = subscription_key

    @property
    def _date(self):
        """Gets the _date of this UserNote.  # noqa: E501


        :return: The _date of this UserNote.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this UserNote.


        :param _date: The _date of this UserNote.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def admin_user_key(self):
        """Gets the admin_user_key of this UserNote.  # noqa: E501


        :return: The admin_user_key of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._admin_user_key

    @admin_user_key.setter
    def admin_user_key(self, admin_user_key):
        """Sets the admin_user_key of this UserNote.


        :param admin_user_key: The admin_user_key of this UserNote.  # noqa: E501
        :type: int
        """

        self._admin_user_key = admin_user_key

    @property
    def text(self):
        """Gets the text of this UserNote.  # noqa: E501


        :return: The text of this UserNote.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this UserNote.


        :param text: The text of this UserNote.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def follow_up(self):
        """Gets the follow_up of this UserNote.  # noqa: E501


        :return: The follow_up of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._follow_up

    @follow_up.setter
    def follow_up(self, follow_up):
        """Sets the follow_up of this UserNote.


        :param follow_up: The follow_up of this UserNote.  # noqa: E501
        :type: int
        """

        self._follow_up = follow_up

    @property
    def report(self):
        """Gets the report of this UserNote.  # noqa: E501


        :return: The report of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this UserNote.


        :param report: The report of this UserNote.  # noqa: E501
        :type: int
        """

        self._report = report

    @property
    def acknowledge(self):
        """Gets the acknowledge of this UserNote.  # noqa: E501


        :return: The acknowledge of this UserNote.  # noqa: E501
        :rtype: int
        """
        return self._acknowledge

    @acknowledge.setter
    def acknowledge(self, acknowledge):
        """Sets the acknowledge of this UserNote.


        :param acknowledge: The acknowledge of this UserNote.  # noqa: E501
        :type: int
        """

        self._acknowledge = acknowledge

    @property
    def user(self):
        """Gets the user of this UserNote.  # noqa: E501


        :return: The user of this UserNote.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserNote.


        :param user: The user of this UserNote.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def admin_user(self):
        """Gets the admin_user of this UserNote.  # noqa: E501


        :return: The admin_user of this UserNote.  # noqa: E501
        :rtype: User
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this UserNote.


        :param admin_user: The admin_user of this UserNote.  # noqa: E501
        :type: User
        """

        self._admin_user = admin_user

    @property
    def user_subscription(self):
        """Gets the user_subscription of this UserNote.  # noqa: E501


        :return: The user_subscription of this UserNote.  # noqa: E501
        :rtype: UserSubscription
        """
        return self._user_subscription

    @user_subscription.setter
    def user_subscription(self, user_subscription):
        """Sets the user_subscription of this UserNote.


        :param user_subscription: The user_subscription of this UserNote.  # noqa: E501
        :type: UserSubscription
        """

        self._user_subscription = user_subscription

    @property
    def subscription(self):
        """Gets the subscription of this UserNote.  # noqa: E501


        :return: The subscription of this UserNote.  # noqa: E501
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this UserNote.


        :param subscription: The subscription of this UserNote.  # noqa: E501
        :type: Subscription
        """

        self._subscription = subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'subscription_key': 'int',
        'user_key': 'int',
        'original_date': 'datetime',
        'expire_date': 'datetime',
        'cancel_date': 'datetime',
        'error_date': 'datetime',
        'comp': 'bool',
        'price': 'float',
        'card_key': 'int',
        'ninety_ten': 'int',
        'error_text': 'str',
        'last_lapsed': 'int',
        'last_lapsed_sent_date': 'datetime',
        'promotion_key': 'int',
        'sportsline_eligible': 'bool',
        'sportsline_cancelled': 'bool',
        'global_features': 'UserGlobalFeatures',
        'past_due_date': 'datetime',
        'all_access_eligible_date': 'datetime',
        'account': 'Account',
        'user': 'User',
        'card': 'Card',
        'promotion': 'Promotion',
        'subscription': 'Subscription',
        'user_notes': 'list[UserNote]',
        'transactions': 'list[UserTransaction]',
        'default_name': 'str',
        'status': 'str'
    }

    attribute_map = {
        'key': 'key',
        'subscription_key': 'subscriptionKey',
        'user_key': 'userKey',
        'original_date': 'originalDate',
        'expire_date': 'expireDate',
        'cancel_date': 'cancelDate',
        'error_date': 'errorDate',
        'comp': 'comp',
        'price': 'price',
        'card_key': 'cardKey',
        'ninety_ten': 'ninetyTen',
        'error_text': 'errorText',
        'last_lapsed': 'lastLapsed',
        'last_lapsed_sent_date': 'lastLapsedSentDate',
        'promotion_key': 'promotionKey',
        'sportsline_eligible': 'sportslineEligible',
        'sportsline_cancelled': 'sportslineCancelled',
        'global_features': 'globalFeatures',
        'past_due_date': 'pastDueDate',
        'all_access_eligible_date': 'allAccessEligibleDate',
        'account': 'account',
        'user': 'user',
        'card': 'card',
        'promotion': 'promotion',
        'subscription': 'subscription',
        'user_notes': 'userNotes',
        'transactions': 'transactions',
        'default_name': 'defaultName',
        'status': 'status'
    }

    def __init__(self, key=None, subscription_key=None, user_key=None, original_date=None, expire_date=None, cancel_date=None, error_date=None, comp=None, price=None, card_key=None, ninety_ten=None, error_text=None, last_lapsed=None, last_lapsed_sent_date=None, promotion_key=None, sportsline_eligible=None, sportsline_cancelled=None, global_features=None, past_due_date=None, all_access_eligible_date=None, account=None, user=None, card=None, promotion=None, subscription=None, user_notes=None, transactions=None, default_name=None, status=None):  # noqa: E501
        """UserSubscription - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._subscription_key = None
        self._user_key = None
        self._original_date = None
        self._expire_date = None
        self._cancel_date = None
        self._error_date = None
        self._comp = None
        self._price = None
        self._card_key = None
        self._ninety_ten = None
        self._error_text = None
        self._last_lapsed = None
        self._last_lapsed_sent_date = None
        self._promotion_key = None
        self._sportsline_eligible = None
        self._sportsline_cancelled = None
        self._global_features = None
        self._past_due_date = None
        self._all_access_eligible_date = None
        self._account = None
        self._user = None
        self._card = None
        self._promotion = None
        self._subscription = None
        self._user_notes = None
        self._transactions = None
        self._default_name = None
        self._status = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if subscription_key is not None:
            self.subscription_key = subscription_key
        if user_key is not None:
            self.user_key = user_key
        if original_date is not None:
            self.original_date = original_date
        if expire_date is not None:
            self.expire_date = expire_date
        if cancel_date is not None:
            self.cancel_date = cancel_date
        if error_date is not None:
            self.error_date = error_date
        if comp is not None:
            self.comp = comp
        if price is not None:
            self.price = price
        if card_key is not None:
            self.card_key = card_key
        if ninety_ten is not None:
            self.ninety_ten = ninety_ten
        if error_text is not None:
            self.error_text = error_text
        if last_lapsed is not None:
            self.last_lapsed = last_lapsed
        if last_lapsed_sent_date is not None:
            self.last_lapsed_sent_date = last_lapsed_sent_date
        if promotion_key is not None:
            self.promotion_key = promotion_key
        if sportsline_eligible is not None:
            self.sportsline_eligible = sportsline_eligible
        if sportsline_cancelled is not None:
            self.sportsline_cancelled = sportsline_cancelled
        if global_features is not None:
            self.global_features = global_features
        if past_due_date is not None:
            self.past_due_date = past_due_date
        if all_access_eligible_date is not None:
            self.all_access_eligible_date = all_access_eligible_date
        if account is not None:
            self.account = account
        if user is not None:
            self.user = user
        if card is not None:
            self.card = card
        if promotion is not None:
            self.promotion = promotion
        if subscription is not None:
            self.subscription = subscription
        if user_notes is not None:
            self.user_notes = user_notes
        if transactions is not None:
            self.transactions = transactions
        if default_name is not None:
            self.default_name = default_name
        if status is not None:
            self.status = status

    @property
    def key(self):
        """Gets the key of this UserSubscription.  # noqa: E501


        :return: The key of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UserSubscription.


        :param key: The key of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def subscription_key(self):
        """Gets the subscription_key of this UserSubscription.  # noqa: E501


        :return: The subscription_key of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._subscription_key

    @subscription_key.setter
    def subscription_key(self, subscription_key):
        """Sets the subscription_key of this UserSubscription.


        :param subscription_key: The subscription_key of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._subscription_key = subscription_key

    @property
    def user_key(self):
        """Gets the user_key of this UserSubscription.  # noqa: E501


        :return: The user_key of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this UserSubscription.


        :param user_key: The user_key of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def original_date(self):
        """Gets the original_date of this UserSubscription.  # noqa: E501


        :return: The original_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._original_date

    @original_date.setter
    def original_date(self, original_date):
        """Sets the original_date of this UserSubscription.


        :param original_date: The original_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._original_date = original_date

    @property
    def expire_date(self):
        """Gets the expire_date of this UserSubscription.  # noqa: E501


        :return: The expire_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this UserSubscription.


        :param expire_date: The expire_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._expire_date = expire_date

    @property
    def cancel_date(self):
        """Gets the cancel_date of this UserSubscription.  # noqa: E501


        :return: The cancel_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date):
        """Sets the cancel_date of this UserSubscription.


        :param cancel_date: The cancel_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._cancel_date = cancel_date

    @property
    def error_date(self):
        """Gets the error_date of this UserSubscription.  # noqa: E501


        :return: The error_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._error_date

    @error_date.setter
    def error_date(self, error_date):
        """Sets the error_date of this UserSubscription.


        :param error_date: The error_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._error_date = error_date

    @property
    def comp(self):
        """Gets the comp of this UserSubscription.  # noqa: E501


        :return: The comp of this UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._comp

    @comp.setter
    def comp(self, comp):
        """Sets the comp of this UserSubscription.


        :param comp: The comp of this UserSubscription.  # noqa: E501
        :type: bool
        """

        self._comp = comp

    @property
    def price(self):
        """Gets the price of this UserSubscription.  # noqa: E501


        :return: The price of this UserSubscription.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this UserSubscription.


        :param price: The price of this UserSubscription.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def card_key(self):
        """Gets the card_key of this UserSubscription.  # noqa: E501


        :return: The card_key of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._card_key

    @card_key.setter
    def card_key(self, card_key):
        """Sets the card_key of this UserSubscription.


        :param card_key: The card_key of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._card_key = card_key

    @property
    def ninety_ten(self):
        """Gets the ninety_ten of this UserSubscription.  # noqa: E501


        :return: The ninety_ten of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._ninety_ten

    @ninety_ten.setter
    def ninety_ten(self, ninety_ten):
        """Sets the ninety_ten of this UserSubscription.


        :param ninety_ten: The ninety_ten of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._ninety_ten = ninety_ten

    @property
    def error_text(self):
        """Gets the error_text of this UserSubscription.  # noqa: E501


        :return: The error_text of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this UserSubscription.


        :param error_text: The error_text of this UserSubscription.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def last_lapsed(self):
        """Gets the last_lapsed of this UserSubscription.  # noqa: E501


        :return: The last_lapsed of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._last_lapsed

    @last_lapsed.setter
    def last_lapsed(self, last_lapsed):
        """Sets the last_lapsed of this UserSubscription.


        :param last_lapsed: The last_lapsed of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._last_lapsed = last_lapsed

    @property
    def last_lapsed_sent_date(self):
        """Gets the last_lapsed_sent_date of this UserSubscription.  # noqa: E501


        :return: The last_lapsed_sent_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._last_lapsed_sent_date

    @last_lapsed_sent_date.setter
    def last_lapsed_sent_date(self, last_lapsed_sent_date):
        """Sets the last_lapsed_sent_date of this UserSubscription.


        :param last_lapsed_sent_date: The last_lapsed_sent_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._last_lapsed_sent_date = last_lapsed_sent_date

    @property
    def promotion_key(self):
        """Gets the promotion_key of this UserSubscription.  # noqa: E501


        :return: The promotion_key of this UserSubscription.  # noqa: E501
        :rtype: int
        """
        return self._promotion_key

    @promotion_key.setter
    def promotion_key(self, promotion_key):
        """Sets the promotion_key of this UserSubscription.


        :param promotion_key: The promotion_key of this UserSubscription.  # noqa: E501
        :type: int
        """

        self._promotion_key = promotion_key

    @property
    def sportsline_eligible(self):
        """Gets the sportsline_eligible of this UserSubscription.  # noqa: E501


        :return: The sportsline_eligible of this UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._sportsline_eligible

    @sportsline_eligible.setter
    def sportsline_eligible(self, sportsline_eligible):
        """Sets the sportsline_eligible of this UserSubscription.


        :param sportsline_eligible: The sportsline_eligible of this UserSubscription.  # noqa: E501
        :type: bool
        """

        self._sportsline_eligible = sportsline_eligible

    @property
    def sportsline_cancelled(self):
        """Gets the sportsline_cancelled of this UserSubscription.  # noqa: E501


        :return: The sportsline_cancelled of this UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._sportsline_cancelled

    @sportsline_cancelled.setter
    def sportsline_cancelled(self, sportsline_cancelled):
        """Sets the sportsline_cancelled of this UserSubscription.


        :param sportsline_cancelled: The sportsline_cancelled of this UserSubscription.  # noqa: E501
        :type: bool
        """

        self._sportsline_cancelled = sportsline_cancelled

    @property
    def global_features(self):
        """Gets the global_features of this UserSubscription.  # noqa: E501


        :return: The global_features of this UserSubscription.  # noqa: E501
        :rtype: UserGlobalFeatures
        """
        return self._global_features

    @global_features.setter
    def global_features(self, global_features):
        """Sets the global_features of this UserSubscription.


        :param global_features: The global_features of this UserSubscription.  # noqa: E501
        :type: UserGlobalFeatures
        """

        self._global_features = global_features

    @property
    def past_due_date(self):
        """Gets the past_due_date of this UserSubscription.  # noqa: E501


        :return: The past_due_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._past_due_date

    @past_due_date.setter
    def past_due_date(self, past_due_date):
        """Sets the past_due_date of this UserSubscription.


        :param past_due_date: The past_due_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._past_due_date = past_due_date

    @property
    def all_access_eligible_date(self):
        """Gets the all_access_eligible_date of this UserSubscription.  # noqa: E501


        :return: The all_access_eligible_date of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._all_access_eligible_date

    @all_access_eligible_date.setter
    def all_access_eligible_date(self, all_access_eligible_date):
        """Sets the all_access_eligible_date of this UserSubscription.


        :param all_access_eligible_date: The all_access_eligible_date of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._all_access_eligible_date = all_access_eligible_date

    @property
    def account(self):
        """Gets the account of this UserSubscription.  # noqa: E501


        :return: The account of this UserSubscription.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this UserSubscription.


        :param account: The account of this UserSubscription.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def user(self):
        """Gets the user of this UserSubscription.  # noqa: E501


        :return: The user of this UserSubscription.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserSubscription.


        :param user: The user of this UserSubscription.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def card(self):
        """Gets the card of this UserSubscription.  # noqa: E501


        :return: The card of this UserSubscription.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this UserSubscription.


        :param card: The card of this UserSubscription.  # noqa: E501
        :type: Card
        """

        self._card = card

    @property
    def promotion(self):
        """Gets the promotion of this UserSubscription.  # noqa: E501


        :return: The promotion of this UserSubscription.  # noqa: E501
        :rtype: Promotion
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """Sets the promotion of this UserSubscription.


        :param promotion: The promotion of this UserSubscription.  # noqa: E501
        :type: Promotion
        """

        self._promotion = promotion

    @property
    def subscription(self):
        """Gets the subscription of this UserSubscription.  # noqa: E501


        :return: The subscription of this UserSubscription.  # noqa: E501
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this UserSubscription.


        :param subscription: The subscription of this UserSubscription.  # noqa: E501
        :type: Subscription
        """

        self._subscription = subscription

    @property
    def user_notes(self):
        """Gets the user_notes of this UserSubscription.  # noqa: E501


        :return: The user_notes of this UserSubscription.  # noqa: E501
        :rtype: list[UserNote]
        """
        return self._user_notes

    @user_notes.setter
    def user_notes(self, user_notes):
        """Sets the user_notes of this UserSubscription.


        :param user_notes: The user_notes of this UserSubscription.  # noqa: E501
        :type: list[UserNote]
        """

        self._user_notes = user_notes

    @property
    def transactions(self):
        """Gets the transactions of this UserSubscription.  # noqa: E501


        :return: The transactions of this UserSubscription.  # noqa: E501
        :rtype: list[UserTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this UserSubscription.


        :param transactions: The transactions of this UserSubscription.  # noqa: E501
        :type: list[UserTransaction]
        """

        self._transactions = transactions

    @property
    def default_name(self):
        """Gets the default_name of this UserSubscription.  # noqa: E501


        :return: The default_name of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._default_name

    @default_name.setter
    def default_name(self, default_name):
        """Sets the default_name of this UserSubscription.


        :param default_name: The default_name of this UserSubscription.  # noqa: E501
        :type: str
        """

        self._default_name = default_name

    @property
    def status(self):
        """Gets the status of this UserSubscription.  # noqa: E501


        :return: The status of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserSubscription.


        :param status: The status of this UserSubscription.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

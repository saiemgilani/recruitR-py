# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'cbs_channels': 'str',
        'network_key': 'int',
        'site_key': 'int',
        'league_key': 'int',
        'last_updated': 'datetime',
        'enabled': 'bool',
        'managed': 'bool',
        'site': 'Site'
    }

    attribute_map = {
        'key': 'key',
        'cbs_channels': 'cbsChannels',
        'network_key': 'networkKey',
        'site_key': 'siteKey',
        'league_key': 'leagueKey',
        'last_updated': 'lastUpdated',
        'enabled': 'enabled',
        'managed': 'managed',
        'site': 'site'
    }

    def __init__(self, key=None, cbs_channels=None, network_key=None, site_key=None, league_key=None, last_updated=None, enabled=None, managed=None, site=None):  # noqa: E501
        """VideoChannel - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._cbs_channels = None
        self._network_key = None
        self._site_key = None
        self._league_key = None
        self._last_updated = None
        self._enabled = None
        self._managed = None
        self._site = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if cbs_channels is not None:
            self.cbs_channels = cbs_channels
        if network_key is not None:
            self.network_key = network_key
        if site_key is not None:
            self.site_key = site_key
        if league_key is not None:
            self.league_key = league_key
        if last_updated is not None:
            self.last_updated = last_updated
        if enabled is not None:
            self.enabled = enabled
        if managed is not None:
            self.managed = managed
        if site is not None:
            self.site = site

    @property
    def key(self):
        """Gets the key of this VideoChannel.  # noqa: E501


        :return: The key of this VideoChannel.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this VideoChannel.


        :param key: The key of this VideoChannel.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def cbs_channels(self):
        """Gets the cbs_channels of this VideoChannel.  # noqa: E501


        :return: The cbs_channels of this VideoChannel.  # noqa: E501
        :rtype: str
        """
        return self._cbs_channels

    @cbs_channels.setter
    def cbs_channels(self, cbs_channels):
        """Sets the cbs_channels of this VideoChannel.


        :param cbs_channels: The cbs_channels of this VideoChannel.  # noqa: E501
        :type: str
        """

        self._cbs_channels = cbs_channels

    @property
    def network_key(self):
        """Gets the network_key of this VideoChannel.  # noqa: E501


        :return: The network_key of this VideoChannel.  # noqa: E501
        :rtype: int
        """
        return self._network_key

    @network_key.setter
    def network_key(self, network_key):
        """Sets the network_key of this VideoChannel.


        :param network_key: The network_key of this VideoChannel.  # noqa: E501
        :type: int
        """

        self._network_key = network_key

    @property
    def site_key(self):
        """Gets the site_key of this VideoChannel.  # noqa: E501


        :return: The site_key of this VideoChannel.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this VideoChannel.


        :param site_key: The site_key of this VideoChannel.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def league_key(self):
        """Gets the league_key of this VideoChannel.  # noqa: E501


        :return: The league_key of this VideoChannel.  # noqa: E501
        :rtype: int
        """
        return self._league_key

    @league_key.setter
    def league_key(self, league_key):
        """Sets the league_key of this VideoChannel.


        :param league_key: The league_key of this VideoChannel.  # noqa: E501
        :type: int
        """

        self._league_key = league_key

    @property
    def last_updated(self):
        """Gets the last_updated of this VideoChannel.  # noqa: E501


        :return: The last_updated of this VideoChannel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VideoChannel.


        :param last_updated: The last_updated of this VideoChannel.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def enabled(self):
        """Gets the enabled of this VideoChannel.  # noqa: E501


        :return: The enabled of this VideoChannel.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VideoChannel.


        :param enabled: The enabled of this VideoChannel.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def managed(self):
        """Gets the managed of this VideoChannel.  # noqa: E501


        :return: The managed of this VideoChannel.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this VideoChannel.


        :param managed: The managed of this VideoChannel.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def site(self):
        """Gets the site of this VideoChannel.  # noqa: E501


        :return: The site of this VideoChannel.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this VideoChannel.


        :param site: The site of this VideoChannel.  # noqa: E501
        :type: Site
        """

        self._site = site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

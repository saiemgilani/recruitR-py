# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriterGoal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'network_key': 'int',
        'month': 'int',
        'year': 'int',
        'created': 'datetime',
        'updated': 'datetime',
        'network': 'Network',
        'writer_goal_sites': 'list[WriterGoalSite]'
    }

    attribute_map = {
        'key': 'key',
        'network_key': 'networkKey',
        'month': 'month',
        'year': 'year',
        'created': 'created',
        'updated': 'updated',
        'network': 'network',
        'writer_goal_sites': 'writerGoalSites'
    }

    def __init__(self, key=None, network_key=None, month=None, year=None, created=None, updated=None, network=None, writer_goal_sites=None):  # noqa: E501
        """WriterGoal - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._network_key = None
        self._month = None
        self._year = None
        self._created = None
        self._updated = None
        self._network = None
        self._writer_goal_sites = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if network_key is not None:
            self.network_key = network_key
        if month is not None:
            self.month = month
        if year is not None:
            self.year = year
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if network is not None:
            self.network = network
        if writer_goal_sites is not None:
            self.writer_goal_sites = writer_goal_sites

    @property
    def key(self):
        """Gets the key of this WriterGoal.  # noqa: E501


        :return: The key of this WriterGoal.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WriterGoal.


        :param key: The key of this WriterGoal.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def network_key(self):
        """Gets the network_key of this WriterGoal.  # noqa: E501


        :return: The network_key of this WriterGoal.  # noqa: E501
        :rtype: int
        """
        return self._network_key

    @network_key.setter
    def network_key(self, network_key):
        """Sets the network_key of this WriterGoal.


        :param network_key: The network_key of this WriterGoal.  # noqa: E501
        :type: int
        """

        self._network_key = network_key

    @property
    def month(self):
        """Gets the month of this WriterGoal.  # noqa: E501


        :return: The month of this WriterGoal.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this WriterGoal.


        :param month: The month of this WriterGoal.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def year(self):
        """Gets the year of this WriterGoal.  # noqa: E501


        :return: The year of this WriterGoal.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this WriterGoal.


        :param year: The year of this WriterGoal.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def created(self):
        """Gets the created of this WriterGoal.  # noqa: E501


        :return: The created of this WriterGoal.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WriterGoal.


        :param created: The created of this WriterGoal.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this WriterGoal.  # noqa: E501


        :return: The updated of this WriterGoal.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this WriterGoal.


        :param updated: The updated of this WriterGoal.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def network(self):
        """Gets the network of this WriterGoal.  # noqa: E501


        :return: The network of this WriterGoal.  # noqa: E501
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WriterGoal.


        :param network: The network of this WriterGoal.  # noqa: E501
        :type: Network
        """

        self._network = network

    @property
    def writer_goal_sites(self):
        """Gets the writer_goal_sites of this WriterGoal.  # noqa: E501


        :return: The writer_goal_sites of this WriterGoal.  # noqa: E501
        :rtype: list[WriterGoalSite]
        """
        return self._writer_goal_sites

    @writer_goal_sites.setter
    def writer_goal_sites(self, writer_goal_sites):
        """Sets the writer_goal_sites of this WriterGoal.


        :param writer_goal_sites: The writer_goal_sites of this WriterGoal.  # noqa: E501
        :type: list[WriterGoalSite]
        """

        self._writer_goal_sites = writer_goal_sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriterGoal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriterGoal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

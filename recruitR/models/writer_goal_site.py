# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriterGoalSite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'writer_goal_key': 'int',
        'site_key': 'int',
        'page_views': 'int',
        'video_views': 'int',
        'sessions': 'int',
        'created': 'datetime',
        'updated': 'datetime',
        'actual_page_views': 'int',
        'actual_video_views': 'int',
        'actual_sessions': 'int',
        'writer_goal': 'WriterGoal',
        'site': 'Site',
        'writer_goal_site_writers': 'list[WriterGoalSiteWriter]'
    }

    attribute_map = {
        'key': 'key',
        'writer_goal_key': 'writerGoalKey',
        'site_key': 'siteKey',
        'page_views': 'pageViews',
        'video_views': 'videoViews',
        'sessions': 'sessions',
        'created': 'created',
        'updated': 'updated',
        'actual_page_views': 'actualPageViews',
        'actual_video_views': 'actualVideoViews',
        'actual_sessions': 'actualSessions',
        'writer_goal': 'writerGoal',
        'site': 'site',
        'writer_goal_site_writers': 'writerGoalSiteWriters'
    }

    def __init__(self, key=None, writer_goal_key=None, site_key=None, page_views=None, video_views=None, sessions=None, created=None, updated=None, actual_page_views=None, actual_video_views=None, actual_sessions=None, writer_goal=None, site=None, writer_goal_site_writers=None):  # noqa: E501
        """WriterGoalSite - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._writer_goal_key = None
        self._site_key = None
        self._page_views = None
        self._video_views = None
        self._sessions = None
        self._created = None
        self._updated = None
        self._actual_page_views = None
        self._actual_video_views = None
        self._actual_sessions = None
        self._writer_goal = None
        self._site = None
        self._writer_goal_site_writers = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if writer_goal_key is not None:
            self.writer_goal_key = writer_goal_key
        if site_key is not None:
            self.site_key = site_key
        if page_views is not None:
            self.page_views = page_views
        if video_views is not None:
            self.video_views = video_views
        if sessions is not None:
            self.sessions = sessions
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if actual_page_views is not None:
            self.actual_page_views = actual_page_views
        if actual_video_views is not None:
            self.actual_video_views = actual_video_views
        if actual_sessions is not None:
            self.actual_sessions = actual_sessions
        if writer_goal is not None:
            self.writer_goal = writer_goal
        if site is not None:
            self.site = site
        if writer_goal_site_writers is not None:
            self.writer_goal_site_writers = writer_goal_site_writers

    @property
    def key(self):
        """Gets the key of this WriterGoalSite.  # noqa: E501


        :return: The key of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WriterGoalSite.


        :param key: The key of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def writer_goal_key(self):
        """Gets the writer_goal_key of this WriterGoalSite.  # noqa: E501


        :return: The writer_goal_key of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._writer_goal_key

    @writer_goal_key.setter
    def writer_goal_key(self, writer_goal_key):
        """Sets the writer_goal_key of this WriterGoalSite.


        :param writer_goal_key: The writer_goal_key of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._writer_goal_key = writer_goal_key

    @property
    def site_key(self):
        """Gets the site_key of this WriterGoalSite.  # noqa: E501


        :return: The site_key of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this WriterGoalSite.


        :param site_key: The site_key of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._site_key = site_key

    @property
    def page_views(self):
        """Gets the page_views of this WriterGoalSite.  # noqa: E501


        :return: The page_views of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._page_views

    @page_views.setter
    def page_views(self, page_views):
        """Sets the page_views of this WriterGoalSite.


        :param page_views: The page_views of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._page_views = page_views

    @property
    def video_views(self):
        """Gets the video_views of this WriterGoalSite.  # noqa: E501


        :return: The video_views of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._video_views

    @video_views.setter
    def video_views(self, video_views):
        """Sets the video_views of this WriterGoalSite.


        :param video_views: The video_views of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._video_views = video_views

    @property
    def sessions(self):
        """Gets the sessions of this WriterGoalSite.  # noqa: E501


        :return: The sessions of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this WriterGoalSite.


        :param sessions: The sessions of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._sessions = sessions

    @property
    def created(self):
        """Gets the created of this WriterGoalSite.  # noqa: E501


        :return: The created of this WriterGoalSite.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WriterGoalSite.


        :param created: The created of this WriterGoalSite.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this WriterGoalSite.  # noqa: E501


        :return: The updated of this WriterGoalSite.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this WriterGoalSite.


        :param updated: The updated of this WriterGoalSite.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def actual_page_views(self):
        """Gets the actual_page_views of this WriterGoalSite.  # noqa: E501


        :return: The actual_page_views of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._actual_page_views

    @actual_page_views.setter
    def actual_page_views(self, actual_page_views):
        """Sets the actual_page_views of this WriterGoalSite.


        :param actual_page_views: The actual_page_views of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._actual_page_views = actual_page_views

    @property
    def actual_video_views(self):
        """Gets the actual_video_views of this WriterGoalSite.  # noqa: E501


        :return: The actual_video_views of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._actual_video_views

    @actual_video_views.setter
    def actual_video_views(self, actual_video_views):
        """Sets the actual_video_views of this WriterGoalSite.


        :param actual_video_views: The actual_video_views of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._actual_video_views = actual_video_views

    @property
    def actual_sessions(self):
        """Gets the actual_sessions of this WriterGoalSite.  # noqa: E501


        :return: The actual_sessions of this WriterGoalSite.  # noqa: E501
        :rtype: int
        """
        return self._actual_sessions

    @actual_sessions.setter
    def actual_sessions(self, actual_sessions):
        """Sets the actual_sessions of this WriterGoalSite.


        :param actual_sessions: The actual_sessions of this WriterGoalSite.  # noqa: E501
        :type: int
        """

        self._actual_sessions = actual_sessions

    @property
    def writer_goal(self):
        """Gets the writer_goal of this WriterGoalSite.  # noqa: E501


        :return: The writer_goal of this WriterGoalSite.  # noqa: E501
        :rtype: WriterGoal
        """
        return self._writer_goal

    @writer_goal.setter
    def writer_goal(self, writer_goal):
        """Sets the writer_goal of this WriterGoalSite.


        :param writer_goal: The writer_goal of this WriterGoalSite.  # noqa: E501
        :type: WriterGoal
        """

        self._writer_goal = writer_goal

    @property
    def site(self):
        """Gets the site of this WriterGoalSite.  # noqa: E501


        :return: The site of this WriterGoalSite.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WriterGoalSite.


        :param site: The site of this WriterGoalSite.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def writer_goal_site_writers(self):
        """Gets the writer_goal_site_writers of this WriterGoalSite.  # noqa: E501


        :return: The writer_goal_site_writers of this WriterGoalSite.  # noqa: E501
        :rtype: list[WriterGoalSiteWriter]
        """
        return self._writer_goal_site_writers

    @writer_goal_site_writers.setter
    def writer_goal_site_writers(self, writer_goal_site_writers):
        """Sets the writer_goal_site_writers of this WriterGoalSite.


        :param writer_goal_site_writers: The writer_goal_site_writers of this WriterGoalSite.  # noqa: E501
        :type: list[WriterGoalSiteWriter]
        """

        self._writer_goal_site_writers = writer_goal_site_writers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriterGoalSite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriterGoalSite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

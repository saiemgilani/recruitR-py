# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriterGoalSiteWriter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'writer_goal_site_key': 'int',
        'user_key': 'int',
        'contractor': 'bool',
        'board_posts': 'int',
        'content_creations': 'int',
        'page_views': 'int',
        'bonus': 'float',
        'created': 'datetime',
        'updated': 'datetime',
        'actual_board_posts': 'int',
        'actual_content_creations': 'int',
        'actual_page_views': 'int',
        'writer_goal_site': 'WriterGoalSite',
        'user': 'User'
    }

    attribute_map = {
        'key': 'key',
        'writer_goal_site_key': 'writerGoalSiteKey',
        'user_key': 'userKey',
        'contractor': 'contractor',
        'board_posts': 'boardPosts',
        'content_creations': 'contentCreations',
        'page_views': 'pageViews',
        'bonus': 'bonus',
        'created': 'created',
        'updated': 'updated',
        'actual_board_posts': 'actualBoardPosts',
        'actual_content_creations': 'actualContentCreations',
        'actual_page_views': 'actualPageViews',
        'writer_goal_site': 'writerGoalSite',
        'user': 'user'
    }

    def __init__(self, key=None, writer_goal_site_key=None, user_key=None, contractor=None, board_posts=None, content_creations=None, page_views=None, bonus=None, created=None, updated=None, actual_board_posts=None, actual_content_creations=None, actual_page_views=None, writer_goal_site=None, user=None):  # noqa: E501
        """WriterGoalSiteWriter - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._writer_goal_site_key = None
        self._user_key = None
        self._contractor = None
        self._board_posts = None
        self._content_creations = None
        self._page_views = None
        self._bonus = None
        self._created = None
        self._updated = None
        self._actual_board_posts = None
        self._actual_content_creations = None
        self._actual_page_views = None
        self._writer_goal_site = None
        self._user = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if writer_goal_site_key is not None:
            self.writer_goal_site_key = writer_goal_site_key
        if user_key is not None:
            self.user_key = user_key
        if contractor is not None:
            self.contractor = contractor
        if board_posts is not None:
            self.board_posts = board_posts
        if content_creations is not None:
            self.content_creations = content_creations
        if page_views is not None:
            self.page_views = page_views
        if bonus is not None:
            self.bonus = bonus
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if actual_board_posts is not None:
            self.actual_board_posts = actual_board_posts
        if actual_content_creations is not None:
            self.actual_content_creations = actual_content_creations
        if actual_page_views is not None:
            self.actual_page_views = actual_page_views
        if writer_goal_site is not None:
            self.writer_goal_site = writer_goal_site
        if user is not None:
            self.user = user

    @property
    def key(self):
        """Gets the key of this WriterGoalSiteWriter.  # noqa: E501


        :return: The key of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WriterGoalSiteWriter.


        :param key: The key of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def writer_goal_site_key(self):
        """Gets the writer_goal_site_key of this WriterGoalSiteWriter.  # noqa: E501


        :return: The writer_goal_site_key of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._writer_goal_site_key

    @writer_goal_site_key.setter
    def writer_goal_site_key(self, writer_goal_site_key):
        """Sets the writer_goal_site_key of this WriterGoalSiteWriter.


        :param writer_goal_site_key: The writer_goal_site_key of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._writer_goal_site_key = writer_goal_site_key

    @property
    def user_key(self):
        """Gets the user_key of this WriterGoalSiteWriter.  # noqa: E501


        :return: The user_key of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this WriterGoalSiteWriter.


        :param user_key: The user_key of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._user_key = user_key

    @property
    def contractor(self):
        """Gets the contractor of this WriterGoalSiteWriter.  # noqa: E501


        :return: The contractor of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: bool
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this WriterGoalSiteWriter.


        :param contractor: The contractor of this WriterGoalSiteWriter.  # noqa: E501
        :type: bool
        """

        self._contractor = contractor

    @property
    def board_posts(self):
        """Gets the board_posts of this WriterGoalSiteWriter.  # noqa: E501


        :return: The board_posts of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._board_posts

    @board_posts.setter
    def board_posts(self, board_posts):
        """Sets the board_posts of this WriterGoalSiteWriter.


        :param board_posts: The board_posts of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._board_posts = board_posts

    @property
    def content_creations(self):
        """Gets the content_creations of this WriterGoalSiteWriter.  # noqa: E501


        :return: The content_creations of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._content_creations

    @content_creations.setter
    def content_creations(self, content_creations):
        """Sets the content_creations of this WriterGoalSiteWriter.


        :param content_creations: The content_creations of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._content_creations = content_creations

    @property
    def page_views(self):
        """Gets the page_views of this WriterGoalSiteWriter.  # noqa: E501


        :return: The page_views of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._page_views

    @page_views.setter
    def page_views(self, page_views):
        """Sets the page_views of this WriterGoalSiteWriter.


        :param page_views: The page_views of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._page_views = page_views

    @property
    def bonus(self):
        """Gets the bonus of this WriterGoalSiteWriter.  # noqa: E501


        :return: The bonus of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this WriterGoalSiteWriter.


        :param bonus: The bonus of this WriterGoalSiteWriter.  # noqa: E501
        :type: float
        """

        self._bonus = bonus

    @property
    def created(self):
        """Gets the created of this WriterGoalSiteWriter.  # noqa: E501


        :return: The created of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WriterGoalSiteWriter.


        :param created: The created of this WriterGoalSiteWriter.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this WriterGoalSiteWriter.  # noqa: E501


        :return: The updated of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this WriterGoalSiteWriter.


        :param updated: The updated of this WriterGoalSiteWriter.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def actual_board_posts(self):
        """Gets the actual_board_posts of this WriterGoalSiteWriter.  # noqa: E501


        :return: The actual_board_posts of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._actual_board_posts

    @actual_board_posts.setter
    def actual_board_posts(self, actual_board_posts):
        """Sets the actual_board_posts of this WriterGoalSiteWriter.


        :param actual_board_posts: The actual_board_posts of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._actual_board_posts = actual_board_posts

    @property
    def actual_content_creations(self):
        """Gets the actual_content_creations of this WriterGoalSiteWriter.  # noqa: E501


        :return: The actual_content_creations of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._actual_content_creations

    @actual_content_creations.setter
    def actual_content_creations(self, actual_content_creations):
        """Sets the actual_content_creations of this WriterGoalSiteWriter.


        :param actual_content_creations: The actual_content_creations of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._actual_content_creations = actual_content_creations

    @property
    def actual_page_views(self):
        """Gets the actual_page_views of this WriterGoalSiteWriter.  # noqa: E501


        :return: The actual_page_views of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: int
        """
        return self._actual_page_views

    @actual_page_views.setter
    def actual_page_views(self, actual_page_views):
        """Sets the actual_page_views of this WriterGoalSiteWriter.


        :param actual_page_views: The actual_page_views of this WriterGoalSiteWriter.  # noqa: E501
        :type: int
        """

        self._actual_page_views = actual_page_views

    @property
    def writer_goal_site(self):
        """Gets the writer_goal_site of this WriterGoalSiteWriter.  # noqa: E501


        :return: The writer_goal_site of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: WriterGoalSite
        """
        return self._writer_goal_site

    @writer_goal_site.setter
    def writer_goal_site(self, writer_goal_site):
        """Sets the writer_goal_site of this WriterGoalSiteWriter.


        :param writer_goal_site: The writer_goal_site of this WriterGoalSiteWriter.  # noqa: E501
        :type: WriterGoalSite
        """

        self._writer_goal_site = writer_goal_site

    @property
    def user(self):
        """Gets the user of this WriterGoalSiteWriter.  # noqa: E501


        :return: The user of this WriterGoalSiteWriter.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WriterGoalSiteWriter.


        :param user: The user of this WriterGoalSiteWriter.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriterGoalSiteWriter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriterGoalSiteWriter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

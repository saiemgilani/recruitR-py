# coding: utf-8

"""
    Recruit Database

    Groups of services that manage the data for the 247Sports recruiting database.<br>                                         Documentation for this silo can be found here:                                         <a target=\"_blank\" href=\"https://atlassian.cbsi.com/confluence/display/TWOSPORTS/RDB+Information\">                                         Recruit Database Documentation</a>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZipCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'int',
        'state_key': 'int',
        'postal_code': 'str',
        'city': 'str',
        'city_tax': 'float',
        'county_tax': 'float',
        'special_tax': 'float',
        'consolidated_tax': 'float',
        'state': 'State',
        'institutions': 'list[Institution]'
    }

    attribute_map = {
        'key': 'key',
        'state_key': 'stateKey',
        'postal_code': 'postalCode',
        'city': 'city',
        'city_tax': 'cityTax',
        'county_tax': 'countyTax',
        'special_tax': 'specialTax',
        'consolidated_tax': 'consolidatedTax',
        'state': 'state',
        'institutions': 'institutions'
    }

    def __init__(self, key=None, state_key=None, postal_code=None, city=None, city_tax=None, county_tax=None, special_tax=None, consolidated_tax=None, state=None, institutions=None):  # noqa: E501
        """ZipCode - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._state_key = None
        self._postal_code = None
        self._city = None
        self._city_tax = None
        self._county_tax = None
        self._special_tax = None
        self._consolidated_tax = None
        self._state = None
        self._institutions = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if state_key is not None:
            self.state_key = state_key
        if postal_code is not None:
            self.postal_code = postal_code
        if city is not None:
            self.city = city
        if city_tax is not None:
            self.city_tax = city_tax
        if county_tax is not None:
            self.county_tax = county_tax
        if special_tax is not None:
            self.special_tax = special_tax
        if consolidated_tax is not None:
            self.consolidated_tax = consolidated_tax
        if state is not None:
            self.state = state
        if institutions is not None:
            self.institutions = institutions

    @property
    def key(self):
        """Gets the key of this ZipCode.  # noqa: E501


        :return: The key of this ZipCode.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ZipCode.


        :param key: The key of this ZipCode.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def state_key(self):
        """Gets the state_key of this ZipCode.  # noqa: E501


        :return: The state_key of this ZipCode.  # noqa: E501
        :rtype: int
        """
        return self._state_key

    @state_key.setter
    def state_key(self, state_key):
        """Sets the state_key of this ZipCode.


        :param state_key: The state_key of this ZipCode.  # noqa: E501
        :type: int
        """

        self._state_key = state_key

    @property
    def postal_code(self):
        """Gets the postal_code of this ZipCode.  # noqa: E501


        :return: The postal_code of this ZipCode.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ZipCode.


        :param postal_code: The postal_code of this ZipCode.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this ZipCode.  # noqa: E501


        :return: The city of this ZipCode.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ZipCode.


        :param city: The city of this ZipCode.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def city_tax(self):
        """Gets the city_tax of this ZipCode.  # noqa: E501


        :return: The city_tax of this ZipCode.  # noqa: E501
        :rtype: float
        """
        return self._city_tax

    @city_tax.setter
    def city_tax(self, city_tax):
        """Sets the city_tax of this ZipCode.


        :param city_tax: The city_tax of this ZipCode.  # noqa: E501
        :type: float
        """

        self._city_tax = city_tax

    @property
    def county_tax(self):
        """Gets the county_tax of this ZipCode.  # noqa: E501


        :return: The county_tax of this ZipCode.  # noqa: E501
        :rtype: float
        """
        return self._county_tax

    @county_tax.setter
    def county_tax(self, county_tax):
        """Sets the county_tax of this ZipCode.


        :param county_tax: The county_tax of this ZipCode.  # noqa: E501
        :type: float
        """

        self._county_tax = county_tax

    @property
    def special_tax(self):
        """Gets the special_tax of this ZipCode.  # noqa: E501


        :return: The special_tax of this ZipCode.  # noqa: E501
        :rtype: float
        """
        return self._special_tax

    @special_tax.setter
    def special_tax(self, special_tax):
        """Sets the special_tax of this ZipCode.


        :param special_tax: The special_tax of this ZipCode.  # noqa: E501
        :type: float
        """

        self._special_tax = special_tax

    @property
    def consolidated_tax(self):
        """Gets the consolidated_tax of this ZipCode.  # noqa: E501


        :return: The consolidated_tax of this ZipCode.  # noqa: E501
        :rtype: float
        """
        return self._consolidated_tax

    @consolidated_tax.setter
    def consolidated_tax(self, consolidated_tax):
        """Sets the consolidated_tax of this ZipCode.


        :param consolidated_tax: The consolidated_tax of this ZipCode.  # noqa: E501
        :type: float
        """

        self._consolidated_tax = consolidated_tax

    @property
    def state(self):
        """Gets the state of this ZipCode.  # noqa: E501


        :return: The state of this ZipCode.  # noqa: E501
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ZipCode.


        :param state: The state of this ZipCode.  # noqa: E501
        :type: State
        """

        self._state = state

    @property
    def institutions(self):
        """Gets the institutions of this ZipCode.  # noqa: E501


        :return: The institutions of this ZipCode.  # noqa: E501
        :rtype: list[Institution]
        """
        return self._institutions

    @institutions.setter
    def institutions(self, institutions):
        """Sets the institutions of this ZipCode.


        :param institutions: The institutions of this ZipCode.  # noqa: E501
        :type: list[Institution]
        """

        self._institutions = institutions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZipCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZipCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
